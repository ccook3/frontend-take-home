{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/select/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Arrow: () => Arrow2,\n  Content: () => Content2,\n  Group: () => Group,\n  Icon: () => Icon,\n  Item: () => Item,\n  ItemIndicator: () => ItemIndicator,\n  ItemText: () => ItemText,\n  Label: () => Label,\n  Portal: () => Portal,\n  Root: () => Root2,\n  ScrollDownButton: () => ScrollDownButton,\n  ScrollUpButton: () => ScrollUpButton,\n  Select: () => Select,\n  SelectArrow: () => SelectArrow,\n  SelectContent: () => SelectContent,\n  SelectGroup: () => SelectGroup,\n  SelectIcon: () => SelectIcon,\n  SelectItem: () => SelectItem,\n  SelectItemIndicator: () => SelectItemIndicator,\n  SelectItemText: () => SelectItemText,\n  SelectLabel: () => SelectLabel,\n  SelectPortal: () => SelectPortal,\n  SelectScrollDownButton: () => SelectScrollDownButton,\n  SelectScrollUpButton: () => SelectScrollUpButton,\n  SelectSeparator: () => SelectSeparator,\n  SelectTrigger: () => SelectTrigger,\n  SelectValue: () => SelectValue,\n  SelectViewport: () => SelectViewport,\n  Separator: () => Separator,\n  Trigger: () => Trigger,\n  Value: () => Value,\n  Viewport: () => Viewport,\n  createSelectScope: () => createSelectScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/select/src/select.tsx\nvar React = __toESM(require(\"react\"));\nvar ReactDOM = __toESM(require(\"react-dom\"));\nvar import_number = require(\"@radix-ui/number\");\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_collection = require(\"@radix-ui/react-collection\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\nvar import_react_dismissable_layer = require(\"@radix-ui/react-dismissable-layer\");\nvar import_react_focus_guards = require(\"@radix-ui/react-focus-guards\");\nvar import_react_focus_scope = require(\"@radix-ui/react-focus-scope\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar PopperPrimitive = __toESM(require(\"@radix-ui/react-popper\"));\nvar import_react_popper = require(\"@radix-ui/react-popper\");\nvar import_react_portal = require(\"@radix-ui/react-portal\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_slot = require(\"@radix-ui/react-slot\");\nvar import_react_use_callback_ref = require(\"@radix-ui/react-use-callback-ref\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_use_layout_effect = require(\"@radix-ui/react-use-layout-effect\");\nvar import_react_use_previous = require(\"@radix-ui/react-use-previous\");\nvar import_react_visually_hidden = require(\"@radix-ui/react-visually-hidden\");\nvar import_aria_hidden = require(\"aria-hidden\");\nvar import_react_remove_scroll = require(\"react-remove-scroll\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar OPEN_KEYS = [\" \", \"Enter\", \"ArrowUp\", \"ArrowDown\"];\nvar SELECTION_KEYS = [\" \", \"Enter\"];\nvar SELECT_NAME = \"Select\";\nvar [Collection, useCollection, createCollectionScope] = (0, import_react_collection.createCollection)(SELECT_NAME);\nvar [createSelectContext, createSelectScope] = (0, import_react_context.createContextScope)(SELECT_NAME, [createCollectionScope, import_react_popper.createPopperScope]);\nvar usePopperScope = (0, import_react_popper.createPopperScope)();\nvar [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);\nvar [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);\nvar Select = props => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n    form\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState(null);\n  const [valueNode, setValueNode] = React.useState(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = (0, import_react_direction.useDirection)(dir);\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const triggerPointerDownPosRef = React.useRef(null);\n  const isFormControl = trigger ? form || !!trigger.closest(\"form\") : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(/* @__PURE__ */new Set());\n  const nativeSelectKey = Array.from(nativeOptionsSet).map(option => option.props.value).join(\";\");\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Root, {\n    ...popperScope,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsxs)(SelectProvider, {\n      required,\n      scope: __scopeSelect,\n      trigger,\n      onTriggerChange: setTrigger,\n      valueNode,\n      onValueNodeChange: setValueNode,\n      valueNodeHasChildren,\n      onValueNodeHasChildrenChange: setValueNodeHasChildren,\n      contentId: (0, import_react_id.useId)(),\n      value,\n      onValueChange: setValue,\n      open,\n      onOpenChange: setOpen,\n      dir: direction,\n      triggerPointerDownPosRef,\n      disabled,\n      children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Provider, {\n        scope: __scopeSelect,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectNativeOptionsProvider, {\n          scope: props.__scopeSelect,\n          onNativeOptionAdd: React.useCallback(option => {\n            setNativeOptionsSet(prev => new Set(prev).add(option));\n          }, []),\n          onNativeOptionRemove: React.useCallback(option => {\n            setNativeOptionsSet(prev => {\n              const optionsSet = new Set(prev);\n              optionsSet.delete(option);\n              return optionsSet;\n            });\n          }, []),\n          children\n        })\n      }), isFormControl ? /* @__PURE__ */(0, import_jsx_runtime.jsxs)(BubbleSelect, {\n        \"aria-hidden\": true,\n        required,\n        tabIndex: -1,\n        name,\n        autoComplete,\n        value,\n        onChange: event => setValue(event.target.value),\n        disabled,\n        form,\n        children: [value === void 0 ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"option\", {\n          value: \"\"\n        }) : null, Array.from(nativeOptionsSet)]\n      }, nativeSelectKey) : null]\n    })\n  });\n};\nSelect.displayName = SELECT_NAME;\nvar TRIGGER_NAME = \"SelectTrigger\";\nvar SelectTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n  const isDisabled = context.disabled || disabled;\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, context.onTriggerChange);\n  const getItems = useCollection(__scopeSelect);\n  const pointerTypeRef = React.useRef(\"touch\");\n  const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch(search => {\n    const enabledItems = getItems().filter(item => !item.disabled);\n    const currentItem = enabledItems.find(item => item.value === context.value);\n    const nextItem = findNextItem(enabledItems, search, currentItem);\n    if (nextItem !== void 0) {\n      context.onValueChange(nextItem.value);\n    }\n  });\n  const handleOpen = pointerEvent => {\n    if (!isDisabled) {\n      context.onOpenChange(true);\n      resetTypeahead();\n    }\n    if (pointerEvent) {\n      context.triggerPointerDownPosRef.current = {\n        x: Math.round(pointerEvent.pageX),\n        y: Math.round(pointerEvent.pageY)\n      };\n    }\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n      type: \"button\",\n      role: \"combobox\",\n      \"aria-controls\": context.contentId,\n      \"aria-expanded\": context.open,\n      \"aria-required\": context.required,\n      \"aria-autocomplete\": \"none\",\n      dir: context.dir,\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      disabled: isDisabled,\n      \"data-disabled\": isDisabled ? \"\" : void 0,\n      \"data-placeholder\": shouldShowPlaceholder(context.value) ? \"\" : void 0,\n      ...triggerProps,\n      ref: composedRefs,\n      onClick: (0, import_primitive.composeEventHandlers)(triggerProps.onClick, event => {\n        event.currentTarget.focus();\n        if (pointerTypeRef.current !== \"mouse\") {\n          handleOpen(event);\n        }\n      }),\n      onPointerDown: (0, import_primitive.composeEventHandlers)(triggerProps.onPointerDown, event => {\n        pointerTypeRef.current = event.pointerType;\n        const target = event.target;\n        if (target.hasPointerCapture(event.pointerId)) {\n          target.releasePointerCapture(event.pointerId);\n        }\n        if (event.button === 0 && event.ctrlKey === false && event.pointerType === \"mouse\") {\n          handleOpen(event);\n          event.preventDefault();\n        }\n      }),\n      onKeyDown: (0, import_primitive.composeEventHandlers)(triggerProps.onKeyDown, event => {\n        const isTypingAhead = searchRef.current !== \"\";\n        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n        if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n        if (isTypingAhead && event.key === \" \") return;\n        if (OPEN_KEYS.includes(event.key)) {\n          handleOpen();\n          event.preventDefault();\n        }\n      })\n    })\n  });\n});\nSelectTrigger.displayName = TRIGGER_NAME;\nvar VALUE_NAME = \"SelectValue\";\nvar SelectValue = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    className,\n    style,\n    children,\n    placeholder = \"\",\n    ...valueProps\n  } = props;\n  const context = useSelectContext(VALUE_NAME, __scopeSelect);\n  const {\n    onValueNodeHasChildrenChange\n  } = context;\n  const hasChildren = children !== void 0;\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, context.onValueNodeChange);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    onValueNodeHasChildrenChange(hasChildren);\n  }, [onValueNodeHasChildrenChange, hasChildren]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n    ...valueProps,\n    ref: composedRefs,\n    style: {\n      pointerEvents: \"none\"\n    },\n    children: shouldShowPlaceholder(context.value) ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {\n      children: placeholder\n    }) : children\n  });\n});\nSelectValue.displayName = VALUE_NAME;\nvar ICON_NAME = \"SelectIcon\";\nvar SelectIcon = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    children,\n    ...iconProps\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n    \"aria-hidden\": true,\n    ...iconProps,\n    ref: forwardedRef,\n    children: children || \"\\u25BC\"\n  });\n});\nSelectIcon.displayName = ICON_NAME;\nvar PORTAL_NAME = \"SelectPortal\";\nvar SelectPortal = props => {\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_portal.Portal, {\n    asChild: true,\n    ...props\n  });\n};\nSelectPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"SelectContent\";\nvar SelectContent = React.forwardRef((props, forwardedRef) => {\n  const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n  const [fragment, setFragment] = React.useState();\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    setFragment(new DocumentFragment());\n  }, []);\n  if (!context.open) {\n    const frag = fragment;\n    return frag ? ReactDOM.createPortal(/* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectContentProvider, {\n      scope: props.__scopeSelect,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Slot, {\n        scope: props.__scopeSelect,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"div\", {\n          children: props.children\n        })\n      })\n    }), frag) : null;\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectContentImpl, {\n    ...props,\n    ref: forwardedRef\n  });\n});\nSelectContent.displayName = CONTENT_NAME;\nvar CONTENT_MARGIN = 10;\nvar [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME);\nvar CONTENT_IMPL_NAME = \"SelectContentImpl\";\nvar SelectContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    position = \"item-aligned\",\n    onCloseAutoFocus,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    //\n    // PopperContent props\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    arrowPadding,\n    collisionBoundary,\n    collisionPadding,\n    sticky,\n    hideWhenDetached,\n    avoidCollisions,\n    //\n    ...contentProps\n  } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const [content, setContent] = React.useState(null);\n  const [viewport, setViewport] = React.useState(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setContent(node));\n  const [selectedItem, setSelectedItem] = React.useState(null);\n  const [selectedItemText, setSelectedItemText] = React.useState(null);\n  const getItems = useCollection(__scopeSelect);\n  const [isPositioned, setIsPositioned] = React.useState(false);\n  const firstValidItemFoundRef = React.useRef(false);\n  React.useEffect(() => {\n    if (content) return (0, import_aria_hidden.hideOthers)(content);\n  }, [content]);\n  (0, import_react_focus_guards.useFocusGuards)();\n  const focusFirst = React.useCallback(candidates => {\n    const [firstItem, ...restItems] = getItems().map(item => item.ref.current);\n    const [lastItem] = restItems.slice(-1);\n    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n    for (const candidate of candidates) {\n      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n      candidate?.scrollIntoView({\n        block: \"nearest\"\n      });\n      if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n      if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n      candidate?.focus();\n      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n    }\n  }, [getItems, viewport]);\n  const focusSelectedItem = React.useCallback(() => focusFirst([selectedItem, content]), [focusFirst, selectedItem, content]);\n  React.useEffect(() => {\n    if (isPositioned) {\n      focusSelectedItem();\n    }\n  }, [isPositioned, focusSelectedItem]);\n  const {\n    onOpenChange,\n    triggerPointerDownPosRef\n  } = context;\n  React.useEffect(() => {\n    if (content) {\n      let pointerMoveDelta = {\n        x: 0,\n        y: 0\n      };\n      const handlePointerMove = event => {\n        pointerMoveDelta = {\n          x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n          y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0))\n        };\n      };\n      const handlePointerUp = event => {\n        if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n          event.preventDefault();\n        } else {\n          if (!content.contains(event.target)) {\n            onOpenChange(false);\n          }\n        }\n        document.removeEventListener(\"pointermove\", handlePointerMove);\n        triggerPointerDownPosRef.current = null;\n      };\n      if (triggerPointerDownPosRef.current !== null) {\n        document.addEventListener(\"pointermove\", handlePointerMove);\n        document.addEventListener(\"pointerup\", handlePointerUp, {\n          capture: true,\n          once: true\n        });\n      }\n      return () => {\n        document.removeEventListener(\"pointermove\", handlePointerMove);\n        document.removeEventListener(\"pointerup\", handlePointerUp, {\n          capture: true\n        });\n      };\n    }\n  }, [content, onOpenChange, triggerPointerDownPosRef]);\n  React.useEffect(() => {\n    const close = () => onOpenChange(false);\n    window.addEventListener(\"blur\", close);\n    window.addEventListener(\"resize\", close);\n    return () => {\n      window.removeEventListener(\"blur\", close);\n      window.removeEventListener(\"resize\", close);\n    };\n  }, [onOpenChange]);\n  const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch(search => {\n    const enabledItems = getItems().filter(item => !item.disabled);\n    const currentItem = enabledItems.find(item => item.ref.current === document.activeElement);\n    const nextItem = findNextItem(enabledItems, search, currentItem);\n    if (nextItem) {\n      setTimeout(() => nextItem.ref.current.focus());\n    }\n  });\n  const itemRefCallback = React.useCallback((node, value, disabled) => {\n    const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n    const isSelectedItem = context.value !== void 0 && context.value === value;\n    if (isSelectedItem || isFirstValidItem) {\n      setSelectedItem(node);\n      if (isFirstValidItem) firstValidItemFoundRef.current = true;\n    }\n  }, [context.value]);\n  const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n  const itemTextRefCallback = React.useCallback((node, value, disabled) => {\n    const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n    const isSelectedItem = context.value !== void 0 && context.value === value;\n    if (isSelectedItem || isFirstValidItem) {\n      setSelectedItemText(node);\n    }\n  }, [context.value]);\n  const SelectPosition = position === \"popper\" ? SelectPopperPosition : SelectItemAlignedPosition;\n  const popperContentProps = SelectPosition === SelectPopperPosition ? {\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    arrowPadding,\n    collisionBoundary,\n    collisionPadding,\n    sticky,\n    hideWhenDetached,\n    avoidCollisions\n  } : {};\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectContentProvider, {\n    scope: __scopeSelect,\n    content,\n    viewport,\n    onViewportChange: setViewport,\n    itemRefCallback,\n    selectedItem,\n    onItemLeave: handleItemLeave,\n    itemTextRefCallback,\n    focusSelectedItem,\n    selectedItemText,\n    position,\n    isPositioned,\n    searchRef,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_remove_scroll.RemoveScroll, {\n      as: import_react_slot.Slot,\n      allowPinchZoom: true,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_focus_scope.FocusScope, {\n        asChild: true,\n        trapped: context.open,\n        onMountAutoFocus: event => {\n          event.preventDefault();\n        },\n        onUnmountAutoFocus: (0, import_primitive.composeEventHandlers)(onCloseAutoFocus, event => {\n          context.trigger?.focus({\n            preventScroll: true\n          });\n          event.preventDefault();\n        }),\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_dismissable_layer.DismissableLayer, {\n          asChild: true,\n          disableOutsidePointerEvents: true,\n          onEscapeKeyDown,\n          onPointerDownOutside,\n          onFocusOutside: event => event.preventDefault(),\n          onDismiss: () => context.onOpenChange(false),\n          children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectPosition, {\n            role: \"listbox\",\n            id: context.contentId,\n            \"data-state\": context.open ? \"open\" : \"closed\",\n            dir: context.dir,\n            onContextMenu: event => event.preventDefault(),\n            ...contentProps,\n            ...popperContentProps,\n            onPlaced: () => setIsPositioned(true),\n            ref: composedRefs,\n            style: {\n              // flex layout so we can place the scroll buttons properly\n              display: \"flex\",\n              flexDirection: \"column\",\n              // reset the outline by default as the content MAY get focused\n              outline: \"none\",\n              ...contentProps.style\n            },\n            onKeyDown: (0, import_primitive.composeEventHandlers)(contentProps.onKeyDown, event => {\n              const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n              if (event.key === \"Tab\") event.preventDefault();\n              if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n              if ([\"ArrowUp\", \"ArrowDown\", \"Home\", \"End\"].includes(event.key)) {\n                const items = getItems().filter(item => !item.disabled);\n                let candidateNodes = items.map(item => item.ref.current);\n                if ([\"ArrowUp\", \"End\"].includes(event.key)) {\n                  candidateNodes = candidateNodes.slice().reverse();\n                }\n                if ([\"ArrowUp\", \"ArrowDown\"].includes(event.key)) {\n                  const currentElement = event.target;\n                  const currentIndex = candidateNodes.indexOf(currentElement);\n                  candidateNodes = candidateNodes.slice(currentIndex + 1);\n                }\n                setTimeout(() => focusFirst(candidateNodes));\n                event.preventDefault();\n              }\n            })\n          })\n        })\n      })\n    })\n  });\n});\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\nvar ITEM_ALIGNED_POSITION_NAME = \"SelectItemAlignedPosition\";\nvar SelectItemAlignedPosition = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    onPlaced,\n    ...popperProps\n  } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState(null);\n  const [content, setContent] = React.useState(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n  const {\n    viewport,\n    selectedItem,\n    selectedItemText,\n    focusSelectedItem\n  } = contentContext;\n  const position = React.useCallback(() => {\n    if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n      if (context.dir !== \"rtl\") {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = (0, import_number.clamp)(left, [CONTENT_MARGIN,\n        // Prevents the content from going off the starting edge of the\n        // viewport. It may still go off the ending edge, but this can be\n        // controlled by the user since they may want to manage overflow in a\n        // specific way.\n        // https://github.com/radix-ui/primitives/issues/2049\n        Math.max(CONTENT_MARGIN, rightEdge - contentWidth)]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.left = clampedLeft + \"px\";\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = (0, import_number.clamp)(right, [CONTENT_MARGIN, Math.max(CONTENT_MARGIN, leftEdge - contentWidth)]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.right = clampedRight + \"px\";\n      }\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = \"0px\";\n        const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(triggerMiddleToBottomEdge, selectedItemHalfHeight + (\n        // viewport might have padding bottom, include it to avoid a scrollable viewport\n        isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth);\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + \"px\";\n      } else {\n        const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;\n        contentWrapper.style.top = \"0px\";\n        const clampedTopEdgeToTriggerMiddle = Math.max(topEdgeToTriggerMiddle, contentBorderTopWidth + viewport.offsetTop + (\n        // viewport might have padding top, include it to avoid a scrollable viewport\n        isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight);\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + \"px\";\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + \"px\";\n      contentWrapper.style.maxHeight = availableHeight + \"px\";\n      onPlaced?.();\n      requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);\n    }\n  }, [getItems, context.trigger, context.valueNode, contentWrapper, content, viewport, selectedItem, selectedItemText, context.dir, onPlaced]);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => position(), [position]);\n  const [contentZIndex, setContentZIndex] = React.useState();\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n  const handleScrollButtonChange = React.useCallback(node => {\n    if (node && shouldRepositionRef.current === true) {\n      position();\n      focusSelectedItem?.();\n      shouldRepositionRef.current = false;\n    }\n  }, [position, focusSelectedItem]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectViewportProvider, {\n    scope: __scopeSelect,\n    contentWrapper,\n    shouldExpandOnScrollRef,\n    onScrollButtonChange: handleScrollButtonChange,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"div\", {\n      ref: setContentWrapper,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"fixed\",\n        zIndex: contentZIndex\n      },\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        ...popperProps,\n        ref: composedRefs,\n        style: {\n          // When we get the height of the content, it includes borders. If we were to set\n          // the height without having `boxSizing: 'border-box'` it would be too big.\n          boxSizing: \"border-box\",\n          // We need to ensure the content doesn't get taller than the wrapper\n          maxHeight: \"100%\",\n          ...popperProps.style\n        }\n      })\n    })\n  });\n});\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\nvar POPPER_POSITION_NAME = \"SelectPopperPosition\";\nvar SelectPopperPosition = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = \"start\",\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Content, {\n    ...popperScope,\n    ...popperProps,\n    ref: forwardedRef,\n    align,\n    collisionPadding,\n    style: {\n      // Ensure border-box for floating-ui calculations\n      boxSizing: \"border-box\",\n      ...popperProps.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-select-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-select-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-select-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-select-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-select-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\nvar [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME, {});\nvar VIEWPORT_NAME = \"SelectViewport\";\nvar SelectViewport = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    nonce,\n    ...viewportProps\n  } = props;\n  const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n  const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, contentContext.onViewportChange);\n  const prevScrollTopRef = React.useRef(0);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`\n      },\n      nonce\n    }), /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Slot, {\n      scope: __scopeSelect,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        \"data-radix-select-viewport\": \"\",\n        role: \"presentation\",\n        ...viewportProps,\n        ref: composedRefs,\n        style: {\n          // we use position: 'relative' here on the `viewport` so that when we call\n          // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n          // (independent of the scrollUpButton).\n          position: \"relative\",\n          flex: 1,\n          // Viewport should only be scrollable in the vertical direction.\n          // This won't work in vertical writing modes, so we'll need to\n          // revisit this if/when that is supported\n          // https://developer.chrome.com/blog/vertical-form-controls\n          overflow: \"hidden auto\",\n          ...viewportProps.style\n        },\n        onScroll: (0, import_primitive.composeEventHandlers)(viewportProps.onScroll, event => {\n          const viewport = event.currentTarget;\n          const {\n            contentWrapper,\n            shouldExpandOnScrollRef\n          } = viewportContext;\n          if (shouldExpandOnScrollRef?.current && contentWrapper) {\n            const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n            if (scrolledBy > 0) {\n              const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n              const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n              const cssHeight = parseFloat(contentWrapper.style.height);\n              const prevHeight = Math.max(cssMinHeight, cssHeight);\n              if (prevHeight < availableHeight) {\n                const nextHeight = prevHeight + scrolledBy;\n                const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                const heightDiff = nextHeight - clampedNextHeight;\n                contentWrapper.style.height = clampedNextHeight + \"px\";\n                if (contentWrapper.style.bottom === \"0px\") {\n                  viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                  contentWrapper.style.justifyContent = \"flex-end\";\n                }\n              }\n            }\n          }\n          prevScrollTopRef.current = viewport.scrollTop;\n        })\n      })\n    })]\n  });\n});\nSelectViewport.displayName = VIEWPORT_NAME;\nvar GROUP_NAME = \"SelectGroup\";\nvar [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);\nvar SelectGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...groupProps\n  } = props;\n  const groupId = (0, import_react_id.useId)();\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectGroupContextProvider, {\n    scope: __scopeSelect,\n    id: groupId,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      role: \"group\",\n      \"aria-labelledby\": groupId,\n      ...groupProps,\n      ref: forwardedRef\n    })\n  });\n});\nSelectGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"SelectLabel\";\nvar SelectLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...labelProps\n  } = props;\n  const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    id: groupContext.id,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nSelectLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"SelectItem\";\nvar [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);\nvar SelectItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    value,\n    disabled = false,\n    textValue: textValueProp,\n    ...itemProps\n  } = props;\n  const context = useSelectContext(ITEM_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n  const isSelected = context.value === value;\n  const [textValue, setTextValue] = React.useState(textValueProp ?? \"\");\n  const [isFocused, setIsFocused] = React.useState(false);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => contentContext.itemRefCallback?.(node, value, disabled));\n  const textId = (0, import_react_id.useId)();\n  const pointerTypeRef = React.useRef(\"touch\");\n  const handleSelect = () => {\n    if (!disabled) {\n      context.onValueChange(value);\n      context.onOpenChange(false);\n    }\n  };\n  if (value === \"\") {\n    throw new Error(\"A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.\");\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectItemContextProvider, {\n    scope: __scopeSelect,\n    value,\n    disabled,\n    textId,\n    isSelected,\n    onItemTextChange: React.useCallback(node => {\n      setTextValue(prevTextValue => prevTextValue || (node?.textContent ?? \"\").trim());\n    }, []),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.ItemSlot, {\n      scope: __scopeSelect,\n      value,\n      disabled,\n      textValue,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        role: \"option\",\n        \"aria-labelledby\": textId,\n        \"data-highlighted\": isFocused ? \"\" : void 0,\n        \"aria-selected\": isSelected && isFocused,\n        \"data-state\": isSelected ? \"checked\" : \"unchecked\",\n        \"aria-disabled\": disabled || void 0,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        tabIndex: disabled ? void 0 : -1,\n        ...itemProps,\n        ref: composedRefs,\n        onFocus: (0, import_primitive.composeEventHandlers)(itemProps.onFocus, () => setIsFocused(true)),\n        onBlur: (0, import_primitive.composeEventHandlers)(itemProps.onBlur, () => setIsFocused(false)),\n        onClick: (0, import_primitive.composeEventHandlers)(itemProps.onClick, () => {\n          if (pointerTypeRef.current !== \"mouse\") handleSelect();\n        }),\n        onPointerUp: (0, import_primitive.composeEventHandlers)(itemProps.onPointerUp, () => {\n          if (pointerTypeRef.current === \"mouse\") handleSelect();\n        }),\n        onPointerDown: (0, import_primitive.composeEventHandlers)(itemProps.onPointerDown, event => {\n          pointerTypeRef.current = event.pointerType;\n        }),\n        onPointerMove: (0, import_primitive.composeEventHandlers)(itemProps.onPointerMove, event => {\n          pointerTypeRef.current = event.pointerType;\n          if (disabled) {\n            contentContext.onItemLeave?.();\n          } else if (pointerTypeRef.current === \"mouse\") {\n            event.currentTarget.focus({\n              preventScroll: true\n            });\n          }\n        }),\n        onPointerLeave: (0, import_primitive.composeEventHandlers)(itemProps.onPointerLeave, event => {\n          if (event.currentTarget === document.activeElement) {\n            contentContext.onItemLeave?.();\n          }\n        }),\n        onKeyDown: (0, import_primitive.composeEventHandlers)(itemProps.onKeyDown, event => {\n          const isTypingAhead = contentContext.searchRef?.current !== \"\";\n          if (isTypingAhead && event.key === \" \") return;\n          if (SELECTION_KEYS.includes(event.key)) handleSelect();\n          if (event.key === \" \") event.preventDefault();\n        })\n      })\n    })\n  });\n});\nSelectItem.displayName = ITEM_NAME;\nvar ITEM_TEXT_NAME = \"SelectItemText\";\nvar SelectItemText = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    className,\n    style,\n    ...itemTextProps\n  } = props;\n  const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n  const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n  const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n  const [itemTextNode, setItemTextNode] = React.useState(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setItemTextNode(node), itemContext.onItemTextChange, node => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled));\n  const textContent = itemTextNode?.textContent;\n  const nativeOption = React.useMemo(() => /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"option\", {\n    value: itemContext.value,\n    disabled: itemContext.disabled,\n    children: textContent\n  }, itemContext.value), [itemContext.disabled, itemContext.value, textContent]);\n  const {\n    onNativeOptionAdd,\n    onNativeOptionRemove\n  } = nativeOptionsContext;\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    onNativeOptionAdd(nativeOption);\n    return () => onNativeOptionRemove(nativeOption);\n  }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n      id: itemContext.textId,\n      ...itemTextProps,\n      ref: composedRefs\n    }), itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM.createPortal(itemTextProps.children, context.valueNode) : null]\n  });\n});\nSelectItemText.displayName = ITEM_TEXT_NAME;\nvar ITEM_INDICATOR_NAME = \"SelectItemIndicator\";\nvar SelectItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...itemIndicatorProps\n  } = props;\n  const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n  return itemContext.isSelected ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n    \"aria-hidden\": true,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  }) : null;\n});\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\nvar SCROLL_UP_BUTTON_NAME = \"SelectScrollUpButton\";\nvar SelectScrollUpButton = React.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, viewportContext.onScrollButtonChange);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll2 = function () {\n        const canScrollUp2 = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp2);\n      };\n      var handleScroll = handleScroll2;\n      const viewport = contentContext.viewport;\n      handleScroll2();\n      viewport.addEventListener(\"scroll\", handleScroll2);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll2);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollUp ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectScrollButtonImpl, {\n    ...props,\n    ref: composedRefs,\n    onAutoScroll: () => {\n      const {\n        viewport,\n        selectedItem\n      } = contentContext;\n      if (viewport && selectedItem) {\n        viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n      }\n    }\n  }) : null;\n});\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\nvar SCROLL_DOWN_BUTTON_NAME = \"SelectScrollDownButton\";\nvar SelectScrollDownButton = React.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, viewportContext.onScrollButtonChange);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll2 = function () {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown2);\n      };\n      var handleScroll = handleScroll2;\n      const viewport = contentContext.viewport;\n      handleScroll2();\n      viewport.addEventListener(\"scroll\", handleScroll2);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll2);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollDown ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(SelectScrollButtonImpl, {\n    ...props,\n    ref: composedRefs,\n    onAutoScroll: () => {\n      const {\n        viewport,\n        selectedItem\n      } = contentContext;\n      if (viewport && selectedItem) {\n        viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n      }\n    }\n  }) : null;\n});\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\nvar SelectScrollButtonImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    onAutoScroll,\n    ...scrollIndicatorProps\n  } = props;\n  const contentContext = useSelectContentContext(\"SelectScrollButton\", __scopeSelect);\n  const autoScrollTimerRef = React.useRef(null);\n  const getItems = useCollection(__scopeSelect);\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    const activeItem = getItems().find(item => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({\n      block: \"nearest\"\n    });\n  }, [getItems]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"aria-hidden\": true,\n    ...scrollIndicatorProps,\n    ref: forwardedRef,\n    style: {\n      flexShrink: 0,\n      ...scrollIndicatorProps.style\n    },\n    onPointerDown: (0, import_primitive.composeEventHandlers)(scrollIndicatorProps.onPointerDown, () => {\n      if (autoScrollTimerRef.current === null) {\n        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n      }\n    }),\n    onPointerMove: (0, import_primitive.composeEventHandlers)(scrollIndicatorProps.onPointerMove, () => {\n      contentContext.onItemLeave?.();\n      if (autoScrollTimerRef.current === null) {\n        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n      }\n    }),\n    onPointerLeave: (0, import_primitive.composeEventHandlers)(scrollIndicatorProps.onPointerLeave, () => {\n      clearAutoScrollTimer();\n    })\n  });\n});\nvar SEPARATOR_NAME = \"SelectSeparator\";\nvar SelectSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...separatorProps\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"aria-hidden\": true,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nSelectSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"SelectArrow\";\nvar SelectArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const context = useSelectContext(ARROW_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n  return context.open && contentContext.position === \"popper\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Arrow, {\n    ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  }) : null;\n});\nSelectArrow.displayName = ARROW_NAME;\nfunction shouldShowPlaceholder(value) {\n  return value === \"\" || value === void 0;\n}\nvar BubbleSelect = React.forwardRef((props, forwardedRef) => {\n  const {\n    value,\n    ...selectProps\n  } = props;\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const prevValue = (0, import_react_use_previous.usePrevious)(value);\n  React.useEffect(() => {\n    const select = ref.current;\n    const selectProto = window.HTMLSelectElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(selectProto, \"value\");\n    const setValue = descriptor.set;\n    if (prevValue !== value && setValue) {\n      const event = new Event(\"change\", {\n        bubbles: true\n      });\n      setValue.call(select, value);\n      select.dispatchEvent(event);\n    }\n  }, [prevValue, value]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_visually_hidden.VisuallyHidden, {\n    asChild: true,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"select\", {\n      ...selectProps,\n      ref: composedRefs,\n      defaultValue: value\n    })\n  });\n});\nBubbleSelect.displayName = \"BubbleSelect\";\nfunction useTypeaheadSearch(onSearchChange) {\n  const handleSearchChange = (0, import_react_use_callback_ref.useCallbackRef)(onSearchChange);\n  const searchRef = React.useRef(\"\");\n  const timerRef = React.useRef(0);\n  const handleTypeaheadSearch = React.useCallback(key => {\n    const search = searchRef.current + key;\n    handleSearchChange(search);\n    (function updateSearch(value) {\n      searchRef.current = value;\n      window.clearTimeout(timerRef.current);\n      if (value !== \"\") timerRef.current = window.setTimeout(() => updateSearch(\"\"), 1e3);\n    })(search);\n  }, [handleSearchChange]);\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = \"\";\n    window.clearTimeout(timerRef.current);\n  }, []);\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n  return [searchRef, handleTypeaheadSearch, resetTypeahead];\n}\nfunction findNextItem(items, search, currentItem) {\n  const isRepeated = search.length > 1 && Array.from(search).every(char => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter(v => v !== currentItem);\n  const nextItem = wrappedItems.find(item => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\n  return nextItem !== currentItem ? nextItem : void 0;\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root2 = Select;\nvar Trigger = SelectTrigger;\nvar Value = SelectValue;\nvar Icon = SelectIcon;\nvar Portal = SelectPortal;\nvar Content2 = SelectContent;\nvar Viewport = SelectViewport;\nvar Group = SelectGroup;\nvar Label = SelectLabel;\nvar Item = SelectItem;\nvar ItemText = SelectItemText;\nvar ItemIndicator = SelectItemIndicator;\nvar ScrollUpButton = SelectScrollUpButton;\nvar ScrollDownButton = SelectScrollDownButton;\nvar Separator = SelectSeparator;\nvar Arrow2 = SelectArrow;","map":{"version":3,"names":["src_exports","__export","Arrow","Arrow2","Content","Content2","Group","Icon","Item","ItemIndicator","ItemText","Label","Portal","Root","Root2","ScrollDownButton","ScrollUpButton","Select","SelectArrow","SelectContent","SelectGroup","SelectIcon","SelectItem","SelectItemIndicator","SelectItemText","SelectLabel","SelectPortal","SelectScrollDownButton","SelectScrollUpButton","SelectSeparator","SelectTrigger","SelectValue","SelectViewport","Separator","Trigger","Value","Viewport","createSelectScope","module","exports","__toCommonJS","React","__toESM","require","ReactDOM","import_number","import_primitive","import_react_collection","import_react_compose_refs","import_react_context","import_react_direction","import_react_dismissable_layer","import_react_focus_guards","import_react_focus_scope","import_react_id","PopperPrimitive","import_react_popper","import_react_portal","import_react_primitive","import_react_slot","import_react_use_callback_ref","import_react_use_controllable_state","import_react_use_layout_effect","import_react_use_previous","import_react_visually_hidden","import_aria_hidden","import_react_remove_scroll","import_jsx_runtime","OPEN_KEYS","SELECTION_KEYS","SELECT_NAME","Collection","useCollection","createCollectionScope","createCollection","createSelectContext","createContextScope","createPopperScope","usePopperScope","SelectProvider","useSelectContext","SelectNativeOptionsProvider","useSelectNativeOptionsContext","props","__scopeSelect","children","open","openProp","defaultOpen","onOpenChange","value","valueProp","defaultValue","onValueChange","dir","name","autoComplete","disabled","required","form","popperScope","trigger","setTrigger","useState","valueNode","setValueNode","valueNodeHasChildren","setValueNodeHasChildren","direction","useDirection","setOpen","useControllableState","prop","defaultProp","onChange","setValue","triggerPointerDownPosRef","useRef","isFormControl","closest","nativeOptionsSet","setNativeOptionsSet","Set","nativeSelectKey","Array","from","map","option","join","jsx","jsxs","scope","onTriggerChange","onValueNodeChange","onValueNodeHasChildrenChange","contentId","useId","Provider","onNativeOptionAdd","useCallback","prev","add","onNativeOptionRemove","optionsSet","delete","BubbleSelect","tabIndex","event","target","displayName","TRIGGER_NAME","forwardRef","forwardedRef","triggerProps","context","isDisabled","composedRefs","useComposedRefs","getItems","pointerTypeRef","searchRef","handleTypeaheadSearch","resetTypeahead","useTypeaheadSearch","search","enabledItems","filter","item","currentItem","find","nextItem","findNextItem","handleOpen","pointerEvent","current","x","Math","round","pageX","y","pageY","Anchor","asChild","Primitive","button","type","role","shouldShowPlaceholder","ref","onClick","composeEventHandlers","currentTarget","focus","onPointerDown","pointerType","hasPointerCapture","pointerId","releasePointerCapture","ctrlKey","preventDefault","onKeyDown","isTypingAhead","isModifierKey","altKey","metaKey","key","length","includes","VALUE_NAME","className","style","placeholder","valueProps","hasChildren","useLayoutEffect","span","pointerEvents","Fragment","ICON_NAME","iconProps","PORTAL_NAME","CONTENT_NAME","fragment","setFragment","DocumentFragment","frag","createPortal","SelectContentProvider","Slot","SelectContentImpl","CONTENT_MARGIN","useSelectContentContext","CONTENT_IMPL_NAME","position","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","side","sideOffset","align","alignOffset","arrowPadding","collisionBoundary","collisionPadding","sticky","hideWhenDetached","avoidCollisions","contentProps","content","setContent","viewport","setViewport","node","selectedItem","setSelectedItem","selectedItemText","setSelectedItemText","isPositioned","setIsPositioned","firstValidItemFoundRef","useEffect","hideOthers","useFocusGuards","focusFirst","candidates","firstItem","restItems","lastItem","slice","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","scrollIntoView","block","scrollTop","scrollHeight","focusSelectedItem","pointerMoveDelta","handlePointerMove","abs","handlePointerUp","contains","removeEventListener","addEventListener","capture","once","close","window","setTimeout","itemRefCallback","isFirstValidItem","isSelectedItem","handleItemLeave","itemTextRefCallback","SelectPosition","SelectPopperPosition","SelectItemAlignedPosition","popperContentProps","onViewportChange","onItemLeave","RemoveScroll","as","allowPinchZoom","FocusScope","trapped","onMountAutoFocus","onUnmountAutoFocus","preventScroll","DismissableLayer","disableOutsidePointerEvents","onFocusOutside","onDismiss","id","onContextMenu","onPlaced","display","flexDirection","outline","items","candidateNodes","reverse","currentElement","currentIndex","indexOf","ITEM_ALIGNED_POSITION_NAME","popperProps","contentContext","contentWrapper","setContentWrapper","shouldExpandOnScrollRef","shouldRepositionRef","triggerRect","getBoundingClientRect","contentRect","valueNodeRect","itemTextRect","itemTextOffset","left","leftDelta","minContentWidth","width","contentWidth","max","rightEdge","innerWidth","clampedLeft","clamp","minWidth","right","rightDelta","leftEdge","clampedRight","availableHeight","innerHeight","itemsHeight","contentStyles","getComputedStyle","contentBorderTopWidth","parseInt","borderTopWidth","contentPaddingTop","paddingTop","contentBorderBottomWidth","borderBottomWidth","contentPaddingBottom","paddingBottom","fullContentHeight","minContentHeight","min","offsetHeight","viewportStyles","viewportPaddingTop","viewportPaddingBottom","topEdgeToTriggerMiddle","top","height","triggerMiddleToBottomEdge","selectedItemHalfHeight","itemOffsetMiddle","offsetTop","contentTopToItemMiddle","itemMiddleToContentBottom","willAlignWithoutTopOverflow","isLastItem","bottom","viewportOffsetBottom","clientHeight","clampedTriggerMiddleToBottomEdge","isFirstItem","clampedTopEdgeToTriggerMiddle","margin","minHeight","maxHeight","requestAnimationFrame","contentZIndex","setContentZIndex","zIndex","handleScrollButtonChange","SelectViewportProvider","onScrollButtonChange","div","boxSizing","POPPER_POSITION_NAME","useSelectViewportContext","VIEWPORT_NAME","nonce","viewportProps","viewportContext","prevScrollTopRef","dangerouslySetInnerHTML","__html","flex","overflow","onScroll","scrolledBy","cssMinHeight","parseFloat","cssHeight","prevHeight","nextHeight","clampedNextHeight","heightDiff","justifyContent","GROUP_NAME","SelectGroupContextProvider","useSelectGroupContext","groupProps","groupId","LABEL_NAME","labelProps","groupContext","ITEM_NAME","SelectItemContextProvider","useSelectItemContext","textValue","textValueProp","itemProps","isSelected","setTextValue","isFocused","setIsFocused","textId","handleSelect","Error","onItemTextChange","prevTextValue","textContent","trim","ItemSlot","onFocus","onBlur","onPointerUp","onPointerMove","onPointerLeave","ITEM_TEXT_NAME","itemTextProps","itemContext","nativeOptionsContext","itemTextNode","setItemTextNode","nativeOption","useMemo","ITEM_INDICATOR_NAME","itemIndicatorProps","SCROLL_UP_BUTTON_NAME","canScrollUp","setCanScrollUp","handleScroll2","handleScroll","canScrollUp2","SelectScrollButtonImpl","onAutoScroll","SCROLL_DOWN_BUTTON_NAME","canScrollDown","setCanScrollDown","maxScroll","canScrollDown2","ceil","scrollIndicatorProps","autoScrollTimerRef","clearAutoScrollTimer","clearInterval","activeItem","flexShrink","setInterval","SEPARATOR_NAME","separatorProps","ARROW_NAME","arrowProps","selectProps","prevValue","usePrevious","select","selectProto","HTMLSelectElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","bubbles","call","dispatchEvent","VisuallyHidden","onSearchChange","handleSearchChange","useCallbackRef","timerRef","updateSearch","clearTimeout","isRepeated","every","char","normalizedSearch","currentItemIndex","wrappedItems","wrapArray","excludeCurrentItem","v","toLowerCase","startsWith","array","startIndex","_","index"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-select/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-select/src/select.tsx"],"sourcesContent":["'use client';\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n} from './select';\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n} from './select';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value?: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n  form?: string;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n    form,\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? form || !!trigger.closest('form') : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <SelectProvider\n        required={required}\n        scope={__scopeSelect}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        valueNode={valueNode}\n        onValueNodeChange={setValueNode}\n        valueNodeHasChildren={valueNodeHasChildren}\n        onValueNodeHasChildrenChange={setValueNodeHasChildren}\n        contentId={useId()}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        dir={direction}\n        triggerPointerDownPosRef={triggerPointerDownPosRef}\n        disabled={disabled}\n      >\n        <Collection.Provider scope={__scopeSelect}>\n          <SelectNativeOptionsProvider\n            scope={props.__scopeSelect}\n            onNativeOptionAdd={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, [])}\n            onNativeOptionRemove={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, [])}\n          >\n            {children}\n          </SelectNativeOptionsProvider>\n        </Collection.Provider>\n\n        {isFormControl ? (\n          <BubbleSelect\n            key={nativeSelectKey}\n            aria-hidden\n            required={required}\n            tabIndex={-1}\n            name={name}\n            autoComplete={autoComplete}\n            value={value}\n            // enable form autofill\n            onChange={(event) => setValue(event.target.value)}\n            disabled={disabled}\n            form={form}\n          >\n            {value === undefined ? <option value=\"\" /> : null}\n            {Array.from(nativeOptionsSet)}\n          </BubbleSelect>\n        ) : null}\n      </SelectProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n    const pointerTypeRef = React.useRef<React.PointerEvent['pointerType']>('touch');\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = (pointerEvent?: React.MouseEvent | React.PointerEvent) => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n\n      if (pointerEvent) {\n        context.triggerPointerDownPosRef.current = {\n          x: Math.round(pointerEvent.pageX),\n          y: Math.round(pointerEvent.pageY),\n        };\n      }\n    };\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          type=\"button\"\n          role=\"combobox\"\n          aria-controls={context.contentId}\n          aria-expanded={context.open}\n          aria-required={context.required}\n          aria-autocomplete=\"none\"\n          dir={context.dir}\n          data-state={context.open ? 'open' : 'closed'}\n          disabled={isDisabled}\n          data-disabled={isDisabled ? '' : undefined}\n          data-placeholder={shouldShowPlaceholder(context.value) ? '' : undefined}\n          {...triggerProps}\n          ref={composedRefs}\n          // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n          onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n            // Whilst browsers generally have no issue focusing the trigger when clicking\n            // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n            // We force `focus` in this case. Note: this doesn't create any other side-effect\n            // because we are preventing default in `onPointerDown` so effectively\n            // this only runs for a label \"click\"\n            event.currentTarget.focus();\n\n            // Open on click when using a touch or pen device\n            if (pointerTypeRef.current !== 'mouse') {\n              handleOpen(event);\n            }\n          })}\n          onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n            pointerTypeRef.current = event.pointerType;\n\n            // prevent implicit pointer capture\n            // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n            const target = event.target as HTMLElement;\n            if (target.hasPointerCapture(event.pointerId)) {\n              target.releasePointerCapture(event.pointerId);\n            }\n\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click); also not for touch\n            // devices because that would open the menu on scroll. (pen devices behave as touch on iOS).\n            if (event.button === 0 && event.ctrlKey === false && event.pointerType === 'mouse') {\n              handleOpen(event);\n              // prevent trigger from stealing focus from the active item after opening.\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n            const isTypingAhead = searchRef.current !== '';\n            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n            if (isTypingAhead && event.key === ' ') return;\n            if (OPEN_KEYS.includes(event.key)) {\n              handleOpen();\n              event.preventDefault();\n            }\n          })}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder = '', ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {shouldShowPlaceholder(context.value) ? <>{placeholder}</> : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    if (!context.open) {\n      const frag = fragment as Element | undefined;\n      return frag\n        ? ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            frag\n          )\n        : null;\n    }\n\n    return <SelectContentImpl {...props} ref={forwardedRef} />;\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContentImpl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  focusSelectedItem?: () => void;\n  selectedItemText?: SelectItemTextElement | null;\n  position?: SelectContentProps['position'];\n  isPositioned?: boolean;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\nconst CONTENT_IMPL_NAME = 'SelectContentImpl';\n\ntype SelectContentImplElement = SelectPopperPositionElement | SelectItemAlignedPositionElement;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\n\ntype SelectPopperPrivateProps = { onPlaced?: PopperContentProps['onPlaced'] };\n\ninterface SelectContentImplProps\n  extends Omit<SelectPopperPositionProps, keyof SelectPopperPrivateProps>,\n    Omit<SelectItemAlignedPositionProps, keyof SelectPopperPrivateProps> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n\n  position?: 'item-aligned' | 'popper';\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = 'item-aligned',\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    const SelectPosition = position === 'popper' ? SelectPopperPosition : SelectItemAlignedPosition;\n\n    // Silently ignore props that are not supported by `SelectItemAlignedPosition`\n    const popperContentProps =\n      SelectPosition === SelectPopperPosition\n        ? {\n            side,\n            sideOffset,\n            align,\n            alignOffset,\n            arrowPadding,\n            collisionBoundary,\n            collisionPadding,\n            sticky,\n            hideWhenDetached,\n            avoidCollisions,\n          }\n        : {};\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        focusSelectedItem={focusSelectedItem}\n        selectedItemText={selectedItemText}\n        position={position}\n        isPositioned={isPositioned}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <FocusScope\n            asChild\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={(event) => {\n              // we prevent open autofocus because we manually focus the selected item\n              event.preventDefault();\n            }}\n            onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n              context.trigger?.focus({ preventScroll: true });\n              event.preventDefault();\n            })}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              <SelectPosition\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                {...popperContentProps}\n                onPlaced={() => setIsPositioned(true)}\n                ref={composedRefs}\n                style={{\n                  // flex layout so we can place the scroll buttons properly\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // reset the outline by default as the content MAY get focused\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </DismissableLayer>\n          </FocusScope>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemAlignedPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_ALIGNED_POSITION_NAME = 'SelectItemAlignedPosition';\n\ntype SelectItemAlignedPositionElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemAlignedPositionProps extends PrimitiveDivProps, SelectPopperPrivateProps {}\n\nconst SelectItemAlignedPosition = React.forwardRef<\n  SelectItemAlignedPositionElement,\n  SelectItemAlignedPositionProps\n>((props: ScopedProps<SelectItemAlignedPositionProps>, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n  const [content, setContent] = React.useState<SelectItemAlignedPositionElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React.useCallback(() => {\n    if (\n      context.trigger &&\n      context.valueNode &&\n      contentWrapper &&\n      content &&\n      viewport &&\n      selectedItem &&\n      selectedItemText\n    ) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n\n      // -----------------------------------------------------------------------------------------\n      //  Horizontal positioning\n      // -----------------------------------------------------------------------------------------\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n\n      if (context.dir !== 'rtl') {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [\n          CONTENT_MARGIN,\n          // Prevents the content from going off the starting edge of the\n          // viewport. It may still go off the ending edge, but this can be\n          // controlled by the user since they may want to manage overflow in a\n          // specific way.\n          // https://github.com/radix-ui/primitives/issues/2049\n          Math.max(CONTENT_MARGIN, rightEdge - contentWidth),\n        ]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.left = clampedLeft + 'px';\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [\n          CONTENT_MARGIN,\n          Math.max(CONTENT_MARGIN, leftEdge - contentWidth),\n        ]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.right = clampedRight + 'px';\n      }\n\n      // -----------------------------------------------------------------------------------------\n      // Vertical positioning\n      // -----------------------------------------------------------------------------------------\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = 0 + 'px';\n        const viewportOffsetBottom =\n          content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight +\n            // viewport might have padding bottom, include it to avoid a scrollable viewport\n            (isLastItem ? viewportPaddingBottom : 0) +\n            viewportOffsetBottom +\n            contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + 'px';\n      } else {\n        const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;\n        contentWrapper.style.top = 0 + 'px';\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth +\n            viewport.offsetTop +\n            // viewport might have padding top, include it to avoid a scrollable viewport\n            (isFirstItem ? viewportPaddingTop : 0) +\n            selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + 'px';\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + 'px';\n      contentWrapper.style.maxHeight = availableHeight + 'px';\n      // -----------------------------------------------------------------------------------------\n\n      onPlaced?.();\n\n      // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n      // so we explicitly turn it on only after they've registered.\n      requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced,\n  ]);\n\n  useLayoutEffect(() => position(), [position]);\n\n  // copy z-index from content to wrapper\n  const [contentZIndex, setContentZIndex] = React.useState<string>();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n\n  // When the viewport becomes scrollable at the top, the scroll up button will mount.\n  // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n  // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n  // We wait for this to happen and then re-run the positining logic one more time to account for it.\n  const handleScrollButtonChange = React.useCallback(\n    (node: SelectScrollButtonImplElement | null) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem?.();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n\n  return (\n    <SelectViewportProvider\n      scope={__scopeSelect}\n      contentWrapper={contentWrapper}\n      shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n      onScrollButtonChange={handleScrollButtonChange}\n    >\n      <div\n        ref={setContentWrapper}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'fixed',\n          zIndex: contentZIndex,\n        }}\n      >\n        <Primitive.div\n          {...popperProps}\n          ref={composedRefs}\n          style={{\n            // When we get the height of the content, it includes borders. If we were to set\n            // the height without having `boxSizing: 'border-box'` it would be too big.\n            boxSizing: 'border-box',\n            // We need to ensure the content doesn't get taller than the wrapper\n            maxHeight: '100%',\n            ...popperProps.style,\n          }}\n        />\n      </div>\n    </SelectViewportProvider>\n  );\n});\n\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPopperPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\n\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps {}\n\nconst SelectPopperPosition = React.forwardRef<\n  SelectPopperPositionElement,\n  SelectPopperPositionProps\n>((props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = 'start',\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n\n  return (\n    <PopperPrimitive.Content\n      {...popperScope}\n      {...popperProps}\n      ref={forwardedRef}\n      align={align}\n      collisionPadding={collisionPadding}\n      style={{\n        // Ensure border-box for floating-ui calculations\n        boxSizing: 'border-box',\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\ntype SelectViewportContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n};\n\nconst [SelectViewportProvider, useSelectViewportContext] =\n  createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, nonce, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              // Viewport should only be scrollable in the vertical direction.\n              // This won't work in vertical writing modes, so we'll need to\n              // revisit this if/when that is supported\n              // https://developer.chrome.com/blog/vertical-form-controls\n              overflow: 'hidden auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n    const pointerTypeRef = React.useRef<React.PointerEvent['pointerType']>('touch');\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    if (value === '') {\n      throw new Error(\n        'A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.'\n      );\n    }\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onClick={composeEventHandlers(itemProps.onClick, () => {\n              // Open on click when using a touch or pen device\n              if (pointerTypeRef.current !== 'mouse') handleSelect();\n            })}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, () => {\n              // Using a mouse you should be able to do pointer down, move through\n              // the list, and release the pointer over the item to select it.\n              if (pointerTypeRef.current === 'mouse') handleSelect();\n            })}\n            onPointerDown={composeEventHandlers(itemProps.onPointerDown, (event) => {\n              pointerTypeRef.current = event.pointerType;\n            })}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              // Remember pointer type when sliding over to this item from another one\n              pointerTypeRef.current = event.pointerType;\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else if (pointerTypeRef.current === 'mouse') {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'SelectArrow';\n\ntype SelectArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface SelectArrowProps extends PopperArrowProps {}\n\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\n  (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === 'popper' ? (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction shouldShowPlaceholder(value?: string) {\n  return value === '' || value === undefined;\n}\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programmatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programmatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nBubbleSelect.displayName = 'BubbleSelect';\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\nconst Arrow = SelectArrow;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}