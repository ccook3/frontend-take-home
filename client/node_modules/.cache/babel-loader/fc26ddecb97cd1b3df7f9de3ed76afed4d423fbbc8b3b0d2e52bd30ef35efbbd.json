{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/accordion/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Accordion: () => Accordion,\n  AccordionContent: () => AccordionContent,\n  AccordionHeader: () => AccordionHeader,\n  AccordionItem: () => AccordionItem,\n  AccordionTrigger: () => AccordionTrigger,\n  Content: () => Content2,\n  Header: () => Header,\n  Item: () => Item,\n  Root: () => Root2,\n  Trigger: () => Trigger2,\n  createAccordionScope: () => createAccordionScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/accordion/src/accordion.tsx\nvar import_react = __toESM(require(\"react\"));\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_collection = require(\"@radix-ui/react-collection\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar CollapsiblePrimitive = __toESM(require(\"@radix-ui/react-collapsible\"));\nvar import_react_collapsible = require(\"@radix-ui/react-collapsible\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar ACCORDION_NAME = \"Accordion\";\nvar ACCORDION_KEYS = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\"];\nvar [Collection, useCollection, createCollectionScope] = (0, import_react_collection.createCollection)(ACCORDION_NAME);\nvar [createAccordionContext, createAccordionScope] = (0, import_react_context.createContextScope)(ACCORDION_NAME, [createCollectionScope, import_react_collapsible.createCollapsibleScope]);\nvar useCollapsibleScope = (0, import_react_collapsible.createCollapsibleScope)();\nvar Accordion = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    type,\n    ...accordionProps\n  } = props;\n  const singleProps = accordionProps;\n  const multipleProps = accordionProps;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Provider, {\n    scope: props.__scopeAccordion,\n    children: type === \"multiple\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionImplMultiple, {\n      ...multipleProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionImplSingle, {\n      ...singleProps,\n      ref: forwardedRef\n    })\n  });\n});\nAccordion.displayName = ACCORDION_NAME;\nvar [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);\nvar [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, {\n  collapsible: false\n});\nvar AccordionImplSingle = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    collapsible = false,\n    ...accordionSingleProps\n  } = props;\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value: value ? [value] : [],\n    onItemOpen: setValue,\n    onItemClose: import_react.default.useCallback(() => collapsible && setValue(\"\"), [collapsible, setValue]),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionImpl, {\n        ...accordionSingleProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar AccordionImplMultiple = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n  const [value = [], setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const handleItemOpen = import_react.default.useCallback(itemValue => setValue((prevValue = []) => [...prevValue, itemValue]), [setValue]);\n  const handleItemClose = import_react.default.useCallback(itemValue => setValue((prevValue = []) => prevValue.filter(value2 => value2 !== itemValue)), [setValue]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value,\n    onItemOpen: handleItemOpen,\n    onItemClose: handleItemClose,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible: true,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionImpl, {\n        ...accordionMultipleProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);\nvar AccordionImpl = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    disabled,\n    dir,\n    orientation = \"vertical\",\n    ...accordionProps\n  } = props;\n  const accordionRef = import_react.default.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(accordionRef, forwardedRef);\n  const getItems = useCollection(__scopeAccordion);\n  const direction = (0, import_react_direction.useDirection)(dir);\n  const isDirectionLTR = direction === \"ltr\";\n  const handleKeyDown = (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n    if (!ACCORDION_KEYS.includes(event.key)) return;\n    const target = event.target;\n    const triggerCollection = getItems().filter(item => !item.ref.current?.disabled);\n    const triggerIndex = triggerCollection.findIndex(item => item.ref.current === target);\n    const triggerCount = triggerCollection.length;\n    if (triggerIndex === -1) return;\n    event.preventDefault();\n    let nextIndex = triggerIndex;\n    const homeIndex = 0;\n    const endIndex = triggerCount - 1;\n    const moveNext = () => {\n      nextIndex = triggerIndex + 1;\n      if (nextIndex > endIndex) {\n        nextIndex = homeIndex;\n      }\n    };\n    const movePrev = () => {\n      nextIndex = triggerIndex - 1;\n      if (nextIndex < homeIndex) {\n        nextIndex = endIndex;\n      }\n    };\n    switch (event.key) {\n      case \"Home\":\n        nextIndex = homeIndex;\n        break;\n      case \"End\":\n        nextIndex = endIndex;\n        break;\n      case \"ArrowRight\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            moveNext();\n          } else {\n            movePrev();\n          }\n        }\n        break;\n      case \"ArrowDown\":\n        if (orientation === \"vertical\") {\n          moveNext();\n        }\n        break;\n      case \"ArrowLeft\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            movePrev();\n          } else {\n            moveNext();\n          }\n        }\n        break;\n      case \"ArrowUp\":\n        if (orientation === \"vertical\") {\n          movePrev();\n        }\n        break;\n    }\n    const clampedIndex = nextIndex % triggerCount;\n    triggerCollection[clampedIndex].ref.current?.focus();\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionImplProvider, {\n    scope: __scopeAccordion,\n    disabled,\n    direction: dir,\n    orientation,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Slot, {\n      scope: __scopeAccordion,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        ...accordionProps,\n        \"data-orientation\": orientation,\n        ref: composedRefs,\n        onKeyDown: disabled ? void 0 : handleKeyDown\n      })\n    })\n  });\n});\nvar ITEM_NAME = \"AccordionItem\";\nvar [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);\nvar AccordionItem = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    value,\n    ...accordionItemProps\n  } = props;\n  const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n  const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  const triggerId = (0, import_react_id.useId)();\n  const open = value && valueContext.value.includes(value) || false;\n  const disabled = accordionContext.disabled || props.disabled;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionItemProvider, {\n    scope: __scopeAccordion,\n    open,\n    disabled,\n    triggerId,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(CollapsiblePrimitive.Root, {\n      \"data-orientation\": accordionContext.orientation,\n      \"data-state\": getState(open),\n      ...collapsibleScope,\n      ...accordionItemProps,\n      ref: forwardedRef,\n      disabled,\n      open,\n      onOpenChange: open2 => {\n        if (open2) {\n          valueContext.onItemOpen(value);\n        } else {\n          valueContext.onItemClose(value);\n        }\n      }\n    })\n  });\n});\nAccordionItem.displayName = ITEM_NAME;\nvar HEADER_NAME = \"AccordionHeader\";\nvar AccordionHeader = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...headerProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.h3, {\n    \"data-orientation\": accordionContext.orientation,\n    \"data-state\": getState(itemContext.open),\n    \"data-disabled\": itemContext.disabled ? \"\" : void 0,\n    ...headerProps,\n    ref: forwardedRef\n  });\n});\nAccordionHeader.displayName = HEADER_NAME;\nvar TRIGGER_NAME = \"AccordionTrigger\";\nvar AccordionTrigger = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...triggerProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.ItemSlot, {\n    scope: __scopeAccordion,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(CollapsiblePrimitive.Trigger, {\n      \"aria-disabled\": itemContext.open && !collapsibleContext.collapsible || void 0,\n      \"data-orientation\": accordionContext.orientation,\n      id: itemContext.triggerId,\n      ...collapsibleScope,\n      ...triggerProps,\n      ref: forwardedRef\n    })\n  });\n});\nAccordionTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"AccordionContent\";\nvar AccordionContent = import_react.default.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion,\n    ...contentProps\n  } = props;\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(CollapsiblePrimitive.Content, {\n    role: \"region\",\n    \"aria-labelledby\": itemContext.triggerId,\n    \"data-orientation\": accordionContext.orientation,\n    ...collapsibleScope,\n    ...contentProps,\n    ref: forwardedRef,\n    style: {\n      [\"--radix-accordion-content-height\"]: \"var(--radix-collapsible-content-height)\",\n      [\"--radix-accordion-content-width\"]: \"var(--radix-collapsible-content-width)\",\n      ...props.style\n    }\n  });\n});\nAccordionContent.displayName = CONTENT_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root2 = Accordion;\nvar Item = AccordionItem;\nvar Header = AccordionHeader;\nvar Trigger2 = AccordionTrigger;\nvar Content2 = AccordionContent;","map":{"version":3,"names":["src_exports","__export","Accordion","AccordionContent","AccordionHeader","AccordionItem","AccordionTrigger","Content","Content2","Header","Item","Root","Root2","Trigger","Trigger2","createAccordionScope","module","exports","__toCommonJS","import_react","__toESM","require","import_react_context","import_react_collection","import_react_compose_refs","import_primitive","import_react_use_controllable_state","import_react_primitive","CollapsiblePrimitive","import_react_collapsible","import_react_id","import_react_direction","import_jsx_runtime","ACCORDION_NAME","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createCollection","createAccordionContext","createContextScope","createCollapsibleScope","useCollapsibleScope","default","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","jsx","Provider","scope","__scopeAccordion","children","AccordionImplMultiple","ref","AccordionImplSingle","displayName","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","value","valueProp","defaultValue","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","onItemOpen","onItemClose","useCallback","AccordionImpl","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","value2","AccordionImplProvider","useAccordionContext","disabled","dir","orientation","accordionRef","useRef","composedRefs","useComposedRefs","getItems","direction","useDirection","isDirectionLTR","handleKeyDown","composeEventHandlers","onKeyDown","event","includes","key","target","triggerCollection","item","current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","homeIndex","endIndex","moveNext","movePrev","clampedIndex","focus","Slot","Primitive","div","ITEM_NAME","AccordionItemProvider","useAccordionItemContext","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","getState","onOpenChange","open2","HEADER_NAME","headerProps","itemContext","h3","TRIGGER_NAME","triggerProps","collapsibleContext","ItemSlot","id","CONTENT_NAME","contentProps","role","style"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-accordion/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-accordion/src/accordion.tsx"],"sourcesContent":["'use client';\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n} from './accordion';\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n} from './accordion';\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n  direction: AccordionImplProps['dir'];\n  orientation: AccordionImplProps['orientation'];\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * The layout in which the Accordion operates.\n   * @default vertical\n   */\n  orientation?: React.AriaAttributes['aria-orientation'];\n  /**\n   * The language read direction.\n   */\n  dir?: Direction;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, dir, orientation = 'vertical', ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      const homeIndex = 0;\n      const endIndex = triggerCount - 1;\n\n      const moveNext = () => {\n        nextIndex = triggerIndex + 1;\n        if (nextIndex > endIndex) {\n          nextIndex = homeIndex;\n        }\n      };\n\n      const movePrev = () => {\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < homeIndex) {\n          nextIndex = endIndex;\n        }\n      };\n\n      switch (event.key) {\n        case 'Home':\n          nextIndex = homeIndex;\n          break;\n        case 'End':\n          nextIndex = endIndex;\n          break;\n        case 'ArrowRight':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              moveNext();\n            } else {\n              movePrev();\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (orientation === 'vertical') {\n            moveNext();\n          }\n          break;\n        case 'ArrowLeft':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              movePrev();\n            } else {\n              moveNext();\n            }\n          }\n          break;\n        case 'ArrowUp':\n          if (orientation === 'vertical') {\n            movePrev();\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        disabled={disabled}\n        direction={dir}\n        orientation={orientation}\n      >\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            data-orientation={orientation}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-orientation={accordionContext.orientation}\n          data-state={getState(open)}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = React.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-orientation={accordionContext.orientation}\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          data-orientation={accordionContext.orientation}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        data-orientation={accordionContext.orientation}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}