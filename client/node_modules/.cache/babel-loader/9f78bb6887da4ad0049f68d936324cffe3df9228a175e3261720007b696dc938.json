{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/compose-refs/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  composeRefs: () => composeRefs,\n  useComposedRefs: () => useComposedRefs\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/compose-refs/src/composeRefs.tsx\nvar React = __toESM(require(\"react\"));\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  } else if (ref !== null && ref !== void 0) {\n    ref.current = value;\n  }\n}\nfunction composeRefs(...refs) {\n  return node => {\n    let hasCleanup = false;\n    const cleanups = refs.map(ref => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup == \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup == \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\nfunction useComposedRefs(...refs) {\n  return React.useCallback(composeRefs(...refs), refs);\n}","map":{"version":3,"names":["src_exports","__export","composeRefs","useComposedRefs","module","exports","__toCommonJS","React","__toESM","require","setRef","ref","value","current","refs","node","hasCleanup","cleanups","map","cleanup","i","length","useCallback"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-compose-refs/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-compose-refs/src/composeRefs.tsx"],"sourcesContent":["export { composeRefs, useComposedRefs } from './composeRefs';\n","import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    return ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup == 'function') {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup == 'function') {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAN,WAAA;;;ACAA,IAAAO,KAAA,GAAuBC,OAAA,CAAAC,OAAA;AAQvB,SAASC,OAAUC,GAAA,EAAqBC,KAAA,EAAU;EAChD,IAAI,OAAOD,GAAA,KAAQ,YAAY;IAC7B,OAAOA,GAAA,CAAIC,KAAK;EAClB,WAAWD,GAAA,KAAQ,QAAQA,GAAA,KAAQ,QAAW;IAC5CA,GAAA,CAAIE,OAAA,GAAUD,KAAA;EAChB;AACF;AAMA,SAASV,YAAA,GAAkBY,IAAA,EAA8C;EACvE,OAAQC,IAAA,IAAS;IACf,IAAIC,UAAA,GAAa;IACjB,MAAMC,QAAA,GAAWH,IAAA,CAAKI,GAAA,CAAKP,GAAA,IAAQ;MACjC,MAAMQ,OAAA,GAAUT,MAAA,CAAOC,GAAA,EAAKI,IAAI;MAChC,IAAI,CAACC,UAAA,IAAc,OAAOG,OAAA,IAAW,YAAY;QAC/CH,UAAA,GAAa;MACf;MACA,OAAOG,OAAA;IACT,CAAC;IAMD,IAAIH,UAAA,EAAY;MACd,OAAO,MAAM;QACX,SAASI,CAAA,GAAI,GAAGA,CAAA,GAAIH,QAAA,CAASI,MAAA,EAAQD,CAAA,IAAK;UACxC,MAAMD,OAAA,GAAUF,QAAA,CAASG,CAAC;UAC1B,IAAI,OAAOD,OAAA,IAAW,YAAY;YAChCA,OAAA,CAAQ;UACV,OAAO;YACLT,MAAA,CAAOI,IAAA,CAAKM,CAAC,GAAG,IAAI;UACtB;QACF;MACF;IACF;EACF;AACF;AAMA,SAASjB,gBAAA,GAAsBW,IAAA,EAA8C;EAE3E,OAAaP,KAAA,CAAAe,WAAA,CAAYpB,WAAA,CAAY,GAAGY,IAAI,GAAGA,IAAI;AACrD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}