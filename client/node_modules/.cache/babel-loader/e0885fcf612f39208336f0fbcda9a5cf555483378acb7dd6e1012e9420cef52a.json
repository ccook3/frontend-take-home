{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/checkbox/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Checkbox: () => Checkbox,\n  CheckboxIndicator: () => CheckboxIndicator,\n  Indicator: () => Indicator,\n  Root: () => Root,\n  createCheckboxScope: () => createCheckboxScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/checkbox/src/checkbox.tsx\nvar React = __toESM(require(\"react\"));\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_use_previous = require(\"@radix-ui/react-use-previous\");\nvar import_react_use_size = require(\"@radix-ui/react-use-size\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar CHECKBOX_NAME = \"Checkbox\";\nvar [createCheckboxContext, createCheckboxScope] = (0, import_react_context.createContextScope)(CHECKBOX_NAME);\nvar [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);\nvar Checkbox = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCheckbox,\n    name,\n    checked: checkedProp,\n    defaultChecked,\n    required,\n    disabled,\n    value = \"on\",\n    onCheckedChange,\n    form,\n    ...checkboxProps\n  } = props;\n  const [button, setButton] = React.useState(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  const [checked = false, setChecked] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: checkedProp,\n    defaultProp: defaultChecked,\n    onChange: onCheckedChange\n  });\n  const initialCheckedStateRef = React.useRef(checked);\n  React.useEffect(() => {\n    const form2 = button?.form;\n    if (form2) {\n      const reset = () => setChecked(initialCheckedStateRef.current);\n      form2.addEventListener(\"reset\", reset);\n      return () => form2.removeEventListener(\"reset\", reset);\n    }\n  }, [button, setChecked]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(CheckboxProvider, {\n    scope: __scopeCheckbox,\n    state: checked,\n    disabled,\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n      type: \"button\",\n      role: \"checkbox\",\n      \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked,\n      \"aria-required\": required,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value,\n      ...checkboxProps,\n      ref: composedRefs,\n      onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n        if (event.key === \"Enter\") event.preventDefault();\n      }),\n      onClick: (0, import_primitive.composeEventHandlers)(props.onClick, event => {\n        setChecked(prevChecked => isIndeterminate(prevChecked) ? true : !prevChecked);\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    }), isFormControl && /* @__PURE__ */(0, import_jsx_runtime.jsx)(BubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      },\n      defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked\n    })]\n  });\n});\nCheckbox.displayName = CHECKBOX_NAME;\nvar INDICATOR_NAME = \"CheckboxIndicator\";\nvar CheckboxIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCheckbox,\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || isIndeterminate(context.state) || context.state === true,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n      \"data-state\": getState(context.state),\n      \"data-disabled\": context.disabled ? \"\" : void 0,\n      ...indicatorProps,\n      ref: forwardedRef,\n      style: {\n        pointerEvents: \"none\",\n        ...props.style\n      }\n    })\n  });\n});\nCheckboxIndicator.displayName = INDICATOR_NAME;\nvar BubbleInput = props => {\n  const {\n    control,\n    checked,\n    bubbles = true,\n    defaultChecked,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevChecked = (0, import_react_use_previous.usePrevious)(checked);\n  const controlSize = (0, import_react_use_size.useSize)(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"input\", {\n    type: \"checkbox\",\n    \"aria-hidden\": true,\n    defaultChecked: defaultChecked ?? defaultCheckedRef.current,\n    ...inputProps,\n    tabIndex: -1,\n    ref,\n    style: {\n      ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    }\n  });\n};\nfunction isIndeterminate(checked) {\n  return checked === \"indeterminate\";\n}\nfunction getState(checked) {\n  return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Checkbox;\nvar Indicator = CheckboxIndicator;","map":{"version":3,"names":["src_exports","__export","Checkbox","CheckboxIndicator","Indicator","Root","createCheckboxScope","module","exports","__toCommonJS","React","__toESM","require","import_react_compose_refs","import_react_context","import_primitive","import_react_use_controllable_state","import_react_use_previous","import_react_use_size","import_react_presence","import_react_primitive","import_jsx_runtime","CHECKBOX_NAME","createCheckboxContext","createContextScope","CheckboxProvider","useCheckboxContext","forwardRef","props","forwardedRef","__scopeCheckbox","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","form","checkboxProps","button","setButton","useState","composedRefs","useComposedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","setChecked","useControllableState","prop","defaultProp","onChange","initialCheckedStateRef","useEffect","form2","reset","current","addEventListener","removeEventListener","jsxs","scope","state","children","jsx","Primitive","type","role","isIndeterminate","getState","ref","onKeyDown","composeEventHandlers","event","key","preventDefault","onClick","prevChecked","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","forceMount","indicatorProps","context","Presence","present","span","pointerEvents","inputProps","usePrevious","controlSize","useSize","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","defaultCheckedRef","tabIndex","position","opacity","margin"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-checkbox/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-checkbox/src/checkbox.tsx"],"sourcesContent":["'use client';\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n} from './checkbox';\nexport type { CheckboxProps, CheckboxIndicatorProps, CheckedState } from './checkbox';\n","import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      form,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = button?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [button, setChecked]);\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n            defaultChecked={isIndeterminate(defaultChecked) ? false : defaultChecked}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, defaultChecked, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={defaultChecked ?? defaultCheckedRef.current}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps, CheckedState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}