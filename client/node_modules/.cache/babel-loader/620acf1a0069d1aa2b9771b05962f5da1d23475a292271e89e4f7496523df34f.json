{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/id/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  useId: () => useId\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/id/src/id.tsx\nvar React = __toESM(require(\"react\"));\nvar import_react_use_layout_effect = require(\"@radix-ui/react-use-layout-effect\");\nvar useReactId = React[\"useId\".toString()] || (() => void 0);\nvar count = 0;\nfunction useId(deterministicId) {\n  const [id, setId] = React.useState(useReactId());\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    if (!deterministicId) setId(reactId => reactId ?? String(count++));\n  }, [deterministicId]);\n  return deterministicId || (id ? `radix-${id}` : \"\");\n}","map":{"version":3,"names":["src_exports","__export","useId","module","exports","__toCommonJS","React","__toESM","require","import_react_use_layout_effect","useReactId","toString","count","deterministicId","id","setId","useState","useLayoutEffect","reactId","String"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-id/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-id/src/id.tsx"],"sourcesContent":["export { useId } from './id';\n","import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\n// We `toString()` to prevent bundlers from trying to `import { useId } from 'react';`\nconst useReactId = (React as any)['useId'.toString()] || (() => undefined);\nlet count = 0;\n\nfunction useId(deterministicId?: string): string {\n  const [id, setId] = React.useState<string | undefined>(useReactId());\n  // React versions older than 18 will have client-side ids only.\n  useLayoutEffect(() => {\n    if (!deterministicId) setId((reactId) => reactId ?? String(count++));\n  }, [deterministicId]);\n  return deterministicId || (id ? `radix-${id}` : '');\n}\n\nexport { useId };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,KAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;;;ACAA,IAAAM,KAAA,GAAuBC,OAAA,CAAAC,OAAA;AACvB,IAAAC,8BAAA,GAAgCD,OAAA;AAGhC,IAAME,UAAA,GAAcJ,KAAA,CAAc,QAAQK,QAAA,CAAS,CAAC,MAAM,MAAM;AAChE,IAAIC,KAAA,GAAQ;AAEZ,SAASV,MAAMW,eAAA,EAAkC;EAC/C,MAAM,CAACC,EAAA,EAAIC,KAAK,IAAUT,KAAA,CAAAU,QAAA,CAA6BN,UAAA,CAAW,CAAC;EAEnE,IAAAD,8BAAA,CAAAQ,eAAA,EAAgB,MAAM;IACpB,IAAI,CAACJ,eAAA,EAAiBE,KAAA,CAAOG,OAAA,IAAYA,OAAA,IAAWC,MAAA,CAAOP,KAAA,EAAO,CAAC;EACrE,GAAG,CAACC,eAAe,CAAC;EACpB,OAAOA,eAAA,KAAoBC,EAAA,GAAK,SAASA,EAAE,KAAK;AAClD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}