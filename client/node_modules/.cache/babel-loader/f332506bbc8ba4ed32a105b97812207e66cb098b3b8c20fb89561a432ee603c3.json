{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/radio-group/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Indicator: () => Indicator,\n  Item: () => Item2,\n  RadioGroup: () => RadioGroup,\n  RadioGroupIndicator: () => RadioGroupIndicator,\n  RadioGroupItem: () => RadioGroupItem,\n  Root: () => Root2,\n  createRadioGroupScope: () => createRadioGroupScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/radio-group/src/radio-group.tsx\nvar React2 = __toESM(require(\"react\"));\nvar import_primitive2 = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs2 = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context2 = require(\"@radix-ui/react-context\");\nvar import_react_primitive2 = require(\"@radix-ui/react-primitive\");\nvar RovingFocusGroup = __toESM(require(\"@radix-ui/react-roving-focus\"));\nvar import_react_roving_focus = require(\"@radix-ui/react-roving-focus\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\n\n// packages/react/radio-group/src/radio.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_use_size = require(\"@radix-ui/react-use-size\");\nvar import_react_use_previous = require(\"@radix-ui/react-use-previous\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar RADIO_NAME = \"Radio\";\nvar [createRadioContext, createRadioScope] = (0, import_react_context.createContextScope)(RADIO_NAME);\nvar [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);\nvar Radio = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    name,\n    checked = false,\n    required,\n    disabled,\n    value = \"on\",\n    onCheck,\n    form,\n    ...radioProps\n  } = props;\n  const [button, setButton] = React.useState(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(RadioProvider, {\n    scope: __scopeRadio,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n      type: \"button\",\n      role: \"radio\",\n      \"aria-checked\": checked,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value,\n      ...radioProps,\n      ref: composedRefs,\n      onClick: (0, import_primitive.composeEventHandlers)(props.onClick, event => {\n        if (!checked) onCheck?.();\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    }), isFormControl && /* @__PURE__ */(0, import_jsx_runtime.jsx)(BubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nRadio.displayName = RADIO_NAME;\nvar INDICATOR_NAME = \"RadioIndicator\";\nvar RadioIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.checked,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n      \"data-state\": getState(context.checked),\n      \"data-disabled\": context.disabled ? \"\" : void 0,\n      ...indicatorProps,\n      ref: forwardedRef\n    })\n  });\n});\nRadioIndicator.displayName = INDICATOR_NAME;\nvar BubbleInput = props => {\n  const {\n    control,\n    checked,\n    bubbles = true,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevChecked = (0, import_react_use_previous.usePrevious)(checked);\n  const controlSize = (0, import_react_use_size.useSize)(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"input\", {\n    type: \"radio\",\n    \"aria-hidden\": true,\n    defaultChecked: checked,\n    ...inputProps,\n    tabIndex: -1,\n    ref,\n    style: {\n      ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    }\n  });\n};\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\n\n// packages/react/radio-group/src/radio-group.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar ARROW_KEYS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar RADIO_GROUP_NAME = \"RadioGroup\";\nvar [createRadioGroupContext, createRadioGroupScope] = (0, import_react_context2.createContextScope)(RADIO_GROUP_NAME, [import_react_roving_focus.createRovingFocusGroupScope, createRadioScope]);\nvar useRovingFocusGroupScope = (0, import_react_roving_focus.createRovingFocusGroupScope)();\nvar useRadioScope = createRadioScope();\nvar [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);\nvar RadioGroup = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    name,\n    defaultValue,\n    value: valueProp,\n    required = false,\n    disabled = false,\n    orientation,\n    dir,\n    loop = true,\n    onValueChange,\n    ...groupProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const direction = (0, import_react_direction.useDirection)(dir);\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(RadioGroupProvider, {\n    scope: __scopeRadioGroup,\n    name,\n    required,\n    disabled,\n    value,\n    onValueChange: setValue,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(RovingFocusGroup.Root, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_react_primitive2.Primitive.div, {\n        role: \"radiogroup\",\n        \"aria-required\": required,\n        \"aria-orientation\": orientation,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        dir: direction,\n        ...groupProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nRadioGroup.displayName = RADIO_GROUP_NAME;\nvar ITEM_NAME = \"RadioGroupItem\";\nvar RadioGroupItem = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    disabled,\n    ...itemProps\n  } = props;\n  const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n  const isDisabled = context.disabled || disabled;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  const ref = React2.useRef(null);\n  const composedRefs = (0, import_react_compose_refs2.useComposedRefs)(forwardedRef, ref);\n  const checked = context.value === itemProps.value;\n  const isArrowKeyPressedRef = React2.useRef(false);\n  React2.useEffect(() => {\n    const handleKeyDown = event => {\n      if (ARROW_KEYS.includes(event.key)) {\n        isArrowKeyPressedRef.current = true;\n      }\n    };\n    const handleKeyUp = () => isArrowKeyPressedRef.current = false;\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !isDisabled,\n    active: checked,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Radio, {\n      disabled: isDisabled,\n      required: context.required,\n      checked,\n      ...radioScope,\n      ...itemProps,\n      name: context.name,\n      ref: composedRefs,\n      onCheck: () => context.onValueChange(itemProps.value),\n      onKeyDown: (0, import_primitive2.composeEventHandlers)(event => {\n        if (event.key === \"Enter\") event.preventDefault();\n      }),\n      onFocus: (0, import_primitive2.composeEventHandlers)(itemProps.onFocus, () => {\n        if (isArrowKeyPressedRef.current) ref.current?.click();\n      })\n    })\n  });\n});\nRadioGroupItem.displayName = ITEM_NAME;\nvar INDICATOR_NAME2 = \"RadioGroupIndicator\";\nvar RadioGroupIndicator = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    ...indicatorProps\n  } = props;\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(RadioIndicator, {\n    ...radioScope,\n    ...indicatorProps,\n    ref: forwardedRef\n  });\n});\nRadioGroupIndicator.displayName = INDICATOR_NAME2;\nvar Root2 = RadioGroup;\nvar Item2 = RadioGroupItem;\nvar Indicator = RadioGroupIndicator;","map":{"version":3,"names":["src_exports","__export","Indicator","Item","Item2","RadioGroup","RadioGroupIndicator","RadioGroupItem","Root","Root2","createRadioGroupScope","module","exports","__toCommonJS","React2","__toESM","require","import_primitive2","import_react_compose_refs2","import_react_context2","import_react_primitive2","RovingFocusGroup","import_react_roving_focus","import_react_use_controllable_state","import_react_direction","React","import_primitive","import_react_compose_refs","import_react_context","import_react_use_size","import_react_use_previous","import_react_presence","import_react_primitive","import_jsx_runtime","RADIO_NAME","createRadioContext","createRadioScope","createContextScope","RadioProvider","useRadioContext","Radio","forwardRef","props","forwardedRef","__scopeRadio","name","checked","required","disabled","value","onCheck","form","radioProps","button","setButton","useState","composedRefs","useComposedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","jsxs","scope","children","jsx","Primitive","type","role","getState","ref","onClick","composeEventHandlers","event","current","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","RadioIndicator","forceMount","indicatorProps","context","Presence","present","span","inputProps","prevChecked","usePrevious","controlSize","useSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setChecked","set","Event","call","dispatchEvent","defaultChecked","tabIndex","position","pointerEvents","opacity","margin","import_jsx_runtime2","ARROW_KEYS","RADIO_GROUP_NAME","createRadioGroupContext","createRovingFocusGroupScope","useRovingFocusGroupScope","useRadioScope","RadioGroupProvider","useRadioGroupContext","__scopeRadioGroup","defaultValue","valueProp","orientation","dir","loop","onValueChange","groupProps","rovingFocusGroupScope","direction","useDirection","setValue","useControllableState","prop","defaultProp","onChange","asChild","div","ITEM_NAME","itemProps","isDisabled","radioScope","isArrowKeyPressedRef","handleKeyDown","includes","key","handleKeyUp","document","addEventListener","removeEventListener","focusable","active","onKeyDown","preventDefault","onFocus","click","INDICATOR_NAME2"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-radio-group/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-radio-group/src/radio-group.tsx","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-radio-group/src/radio.tsx"],"sourcesContent":["'use client';\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n} from './radio-group';\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps } from './radio-group';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './radio';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: RadioGroupContextValue['value'];\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ElementRef<typeof Radio>;\ntype RadioProps = React.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ElementRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ElementRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = React.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      form,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"radio\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}