{"ast":null,"code":"\"use strict\";\n\nvar r = Object.defineProperty;\nvar y = Object.getOwnPropertyDescriptor;\nvar s = Object.getOwnPropertyNames;\nvar u = Object.prototype.hasOwnProperty;\nvar d = (n, e) => {\n    for (var t in e) r(n, t, {\n      get: e[t],\n      enumerable: !0\n    });\n  },\n  f = (n, e, t, i) => {\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let l of s(e)) !u.call(n, l) && l !== t && r(n, l, {\n      get: () => e[l],\n      enumerable: !(i = y(e, l)) || i.enumerable\n    });\n    return n;\n  };\nvar o = n => f(r({}, \"__esModule\", {\n  value: !0\n}), n);\nvar c = {};\nd(c, {\n  mergeStyles: () => S\n});\nmodule.exports = o(c);\nfunction S(...n) {\n  let e = {};\n  for (const t of n) t && (e = {\n    ...e,\n    ...t\n  });\n  return Object.keys(e).length ? e : void 0;\n}","map":{"version":3,"names":["c","d","mergeStyles","S","module","exports","o","n","e","t","Object","keys","length"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/themes/src/helpers/merge-styles.ts"],"sourcesContent":["type InlineStyle =\n  | React.CSSProperties\n  | Record<string, string | number | null | undefined>\n  | undefined;\n\n// Merges CSS styles like `classNames` merges CSS classes\nexport function mergeStyles(...styles: Array<InlineStyle>): InlineStyle {\n  let result: InlineStyle = {};\n\n  for (const style of styles) {\n    if (style) {\n      result = { ...result, ...style };\n    }\n  }\n\n  return Object.keys(result).length ? result : undefined;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,CAAA;AAAAC,CAAA,CAAAD,CAAA;EAAAE,WAAA,EAAAA,CAAA,KAAAC;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,CAAA,CAAAN,CAAA;AAMO,SAASG,EAAA,GAAeI,CAAA,EAAyC;EACtE,IAAIC,CAAA,GAAsB,CAAC;EAE3B,WAAWC,CAAA,IAASF,CAAA,EACdE,CAAA,KACFD,CAAA,GAAS;IAAE,GAAGA,CAAA;IAAQ,GAAGC;EAAM;EAInC,OAAOC,MAAA,CAAOC,IAAA,CAAKH,CAAM,EAAEI,MAAA,GAASJ,CAAA,GAAS,MAC/C;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}