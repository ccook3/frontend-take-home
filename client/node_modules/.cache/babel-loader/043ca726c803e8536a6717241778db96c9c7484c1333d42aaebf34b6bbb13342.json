{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/tooltip/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Arrow: () => Arrow2,\n  Content: () => Content2,\n  Portal: () => Portal,\n  Provider: () => Provider,\n  Root: () => Root3,\n  Tooltip: () => Tooltip,\n  TooltipArrow: () => TooltipArrow,\n  TooltipContent: () => TooltipContent,\n  TooltipPortal: () => TooltipPortal,\n  TooltipProvider: () => TooltipProvider,\n  TooltipTrigger: () => TooltipTrigger,\n  Trigger: () => Trigger,\n  createTooltipScope: () => createTooltipScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/tooltip/src/tooltip.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_dismissable_layer = require(\"@radix-ui/react-dismissable-layer\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar PopperPrimitive = __toESM(require(\"@radix-ui/react-popper\"));\nvar import_react_popper = require(\"@radix-ui/react-popper\");\nvar import_react_portal = require(\"@radix-ui/react-portal\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_slot = require(\"@radix-ui/react-slot\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar VisuallyHiddenPrimitive = __toESM(require(\"@radix-ui/react-visually-hidden\"));\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [createTooltipContext, createTooltipScope] = (0, import_react_context.createContextScope)(\"Tooltip\", [import_react_popper.createPopperScope]);\nvar usePopperScope = (0, import_react_popper.createPopperScope)();\nvar PROVIDER_NAME = \"TooltipProvider\";\nvar DEFAULT_DELAY_DURATION = 700;\nvar TOOLTIP_OPEN = \"tooltip.open\";\nvar [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME);\nvar TooltipProvider = props => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    disableHoverableContent = false,\n    children\n  } = props;\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const isPointerInTransitRef = React.useRef(false);\n  const skipDelayTimerRef = React.useRef(0);\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipProviderContextProvider, {\n    scope: __scopeTooltip,\n    isOpenDelayed,\n    delayDuration,\n    onOpen: React.useCallback(() => {\n      window.clearTimeout(skipDelayTimerRef.current);\n      setIsOpenDelayed(false);\n    }, []),\n    onClose: React.useCallback(() => {\n      window.clearTimeout(skipDelayTimerRef.current);\n      skipDelayTimerRef.current = window.setTimeout(() => setIsOpenDelayed(true), skipDelayDuration);\n    }, [skipDelayDuration]),\n    isPointerInTransitRef,\n    onPointerInTransitChange: React.useCallback(inTransit => {\n      isPointerInTransitRef.current = inTransit;\n    }, []),\n    disableHoverableContent,\n    children\n  });\n};\nTooltipProvider.displayName = PROVIDER_NAME;\nvar TOOLTIP_NAME = \"Tooltip\";\nvar [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);\nvar Tooltip = props => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    disableHoverableContent: disableHoverableContentProp,\n    delayDuration: delayDurationProp\n  } = props;\n  const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState(null);\n  const contentId = (0, import_react_id.useId)();\n  const openTimerRef = React.useRef(0);\n  const disableHoverableContent = disableHoverableContentProp ?? providerContext.disableHoverableContent;\n  const delayDuration = delayDurationProp ?? providerContext.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: open2 => {\n      if (open2) {\n        providerContext.onOpen();\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n      } else {\n        providerContext.onClose();\n      }\n      onOpenChange?.(open2);\n    }\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? wasOpenDelayedRef.current ? \"delayed-open\" : \"instant-open\" : \"closed\";\n  }, [open]);\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n  const handleClose = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    setOpen(false);\n  }, [setOpen]);\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n      openTimerRef.current = 0;\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n  React.useEffect(() => {\n    return () => {\n      if (openTimerRef.current) {\n        window.clearTimeout(openTimerRef.current);\n        openTimerRef.current = 0;\n      }\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Root, {\n    ...popperScope,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipContextProvider, {\n      scope: __scopeTooltip,\n      contentId,\n      open,\n      stateAttribute,\n      trigger,\n      onTriggerChange: setTrigger,\n      onTriggerEnter: React.useCallback(() => {\n        if (providerContext.isOpenDelayed) handleDelayedOpen();else handleOpen();\n      }, [providerContext.isOpenDelayed, handleDelayedOpen, handleOpen]),\n      onTriggerLeave: React.useCallback(() => {\n        if (disableHoverableContent) {\n          handleClose();\n        } else {\n          window.clearTimeout(openTimerRef.current);\n          openTimerRef.current = 0;\n        }\n      }, [handleClose, disableHoverableContent]),\n      onOpen: handleOpen,\n      onClose: handleClose,\n      disableHoverableContent,\n      children\n    })\n  });\n};\nTooltip.displayName = TOOLTIP_NAME;\nvar TRIGGER_NAME = \"TooltipTrigger\";\nvar TooltipTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTooltip,\n    ...triggerProps\n  } = props;\n  const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n  const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref, context.onTriggerChange);\n  const isPointerDownRef = React.useRef(false);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const handlePointerUp = React.useCallback(() => isPointerDownRef.current = false, []);\n  React.useEffect(() => {\n    return () => document.removeEventListener(\"pointerup\", handlePointerUp);\n  }, [handlePointerUp]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n      \"aria-describedby\": context.open ? context.contentId : void 0,\n      \"data-state\": context.stateAttribute,\n      ...triggerProps,\n      ref: composedRefs,\n      onPointerMove: (0, import_primitive.composeEventHandlers)(props.onPointerMove, event => {\n        if (event.pointerType === \"touch\") return;\n        if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {\n          context.onTriggerEnter();\n          hasPointerMoveOpenedRef.current = true;\n        }\n      }),\n      onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, () => {\n        context.onTriggerLeave();\n        hasPointerMoveOpenedRef.current = false;\n      }),\n      onPointerDown: (0, import_primitive.composeEventHandlers)(props.onPointerDown, () => {\n        isPointerDownRef.current = true;\n        document.addEventListener(\"pointerup\", handlePointerUp, {\n          once: true\n        });\n      }),\n      onFocus: (0, import_primitive.composeEventHandlers)(props.onFocus, () => {\n        if (!isPointerDownRef.current) context.onOpen();\n      }),\n      onBlur: (0, import_primitive.composeEventHandlers)(props.onBlur, context.onClose),\n      onClick: (0, import_primitive.composeEventHandlers)(props.onClick, context.onClose)\n    })\n  });\n});\nTooltipTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"TooltipPortal\";\nvar [PortalProvider, usePortalContext] = createTooltipContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar TooltipPortal = props => {\n  const {\n    __scopeTooltip,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PortalProvider, {\n    scope: __scopeTooltip,\n    forceMount,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_portal.Portal, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\nTooltipPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"TooltipContent\";\nvar TooltipContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeTooltip);\n  const {\n    forceMount = portalContext.forceMount,\n    side = \"top\",\n    ...contentProps\n  } = props;\n  const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.open,\n    children: context.disableHoverableContent ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipContentImpl, {\n      side,\n      ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipContentHoverable, {\n      side,\n      ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar TooltipContentHoverable = React.forwardRef((props, forwardedRef) => {\n  const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n  const providerContext = useTooltipProviderContext(CONTENT_NAME, props.__scopeTooltip);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const [pointerGraceArea, setPointerGraceArea] = React.useState(null);\n  const {\n    trigger,\n    onClose\n  } = context;\n  const content = ref.current;\n  const {\n    onPointerInTransitChange\n  } = providerContext;\n  const handleRemoveGraceArea = React.useCallback(() => {\n    setPointerGraceArea(null);\n    onPointerInTransitChange(false);\n  }, [onPointerInTransitChange]);\n  const handleCreateGraceArea = React.useCallback((event, hoverTarget) => {\n    const currentTarget = event.currentTarget;\n    const exitPoint = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());\n    const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);\n    const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());\n    const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);\n    setPointerGraceArea(graceArea);\n    onPointerInTransitChange(true);\n  }, [onPointerInTransitChange]);\n  React.useEffect(() => {\n    return () => handleRemoveGraceArea();\n  }, [handleRemoveGraceArea]);\n  React.useEffect(() => {\n    if (trigger && content) {\n      const handleTriggerLeave = event => handleCreateGraceArea(event, content);\n      const handleContentLeave = event => handleCreateGraceArea(event, trigger);\n      trigger.addEventListener(\"pointerleave\", handleTriggerLeave);\n      content.addEventListener(\"pointerleave\", handleContentLeave);\n      return () => {\n        trigger.removeEventListener(\"pointerleave\", handleTriggerLeave);\n        content.removeEventListener(\"pointerleave\", handleContentLeave);\n      };\n    }\n  }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);\n  React.useEffect(() => {\n    if (pointerGraceArea) {\n      const handleTrackPointerGrace = event => {\n        const target = event.target;\n        const pointerPosition = {\n          x: event.clientX,\n          y: event.clientY\n        };\n        const hasEnteredTarget = trigger?.contains(target) || content?.contains(target);\n        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);\n        if (hasEnteredTarget) {\n          handleRemoveGraceArea();\n        } else if (isPointerOutsideGraceArea) {\n          handleRemoveGraceArea();\n          onClose();\n        }\n      };\n      document.addEventListener(\"pointermove\", handleTrackPointerGrace);\n      return () => document.removeEventListener(\"pointermove\", handleTrackPointerGrace);\n    }\n  }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipContentImpl, {\n    ...props,\n    ref: composedRefs\n  });\n});\nvar [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, {\n  isInside: false\n});\nvar TooltipContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTooltip,\n    children,\n    \"aria-label\": ariaLabel,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    ...contentProps\n  } = props;\n  const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const {\n    onClose\n  } = context;\n  React.useEffect(() => {\n    document.addEventListener(TOOLTIP_OPEN, onClose);\n    return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n  }, [onClose]);\n  React.useEffect(() => {\n    if (context.trigger) {\n      const handleScroll = event => {\n        const target = event.target;\n        if (target?.contains(context.trigger)) onClose();\n      };\n      window.addEventListener(\"scroll\", handleScroll, {\n        capture: true\n      });\n      return () => window.removeEventListener(\"scroll\", handleScroll, {\n        capture: true\n      });\n    }\n  }, [context.trigger, onClose]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_dismissable_layer.DismissableLayer, {\n    asChild: true,\n    disableOutsidePointerEvents: false,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside: event => event.preventDefault(),\n    onDismiss: onClose,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsxs)(PopperPrimitive.Content, {\n      \"data-state\": context.stateAttribute,\n      ...popperScope,\n      ...contentProps,\n      ref: forwardedRef,\n      style: {\n        ...contentProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          \"--radix-tooltip-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n          \"--radix-tooltip-content-available-width\": \"var(--radix-popper-available-width)\",\n          \"--radix-tooltip-content-available-height\": \"var(--radix-popper-available-height)\",\n          \"--radix-tooltip-trigger-width\": \"var(--radix-popper-anchor-width)\",\n          \"--radix-tooltip-trigger-height\": \"var(--radix-popper-anchor-height)\"\n        }\n      },\n      children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_slot.Slottable, {\n        children\n      }), /* @__PURE__ */(0, import_jsx_runtime.jsx)(VisuallyHiddenContentContextProvider, {\n        scope: __scopeTooltip,\n        isInside: true,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(VisuallyHiddenPrimitive.Root, {\n          id: context.contentId,\n          role: \"tooltip\",\n          children: ariaLabel || children\n        })\n      })]\n    })\n  });\n});\nTooltipContent.displayName = CONTENT_NAME;\nvar ARROW_NAME = \"TooltipArrow\";\nvar TooltipArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTooltip,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopeTooltip);\n  const visuallyHiddenContentContext = useVisuallyHiddenContentContext(ARROW_NAME, __scopeTooltip);\n  return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Arrow, {\n    ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nTooltipArrow.displayName = ARROW_NAME;\nfunction getExitSideFromRect(point, rect) {\n  const top = Math.abs(rect.top - point.y);\n  const bottom = Math.abs(rect.bottom - point.y);\n  const right = Math.abs(rect.right - point.x);\n  const left = Math.abs(rect.left - point.x);\n  switch (Math.min(top, bottom, right, left)) {\n    case left:\n      return \"left\";\n    case right:\n      return \"right\";\n    case top:\n      return \"top\";\n    case bottom:\n      return \"bottom\";\n    default:\n      throw new Error(\"unreachable\");\n  }\n}\nfunction getPaddedExitPoints(exitPoint, exitSide, padding = 5) {\n  const paddedExitPoints = [];\n  switch (exitSide) {\n    case \"top\":\n      paddedExitPoints.push({\n        x: exitPoint.x - padding,\n        y: exitPoint.y + padding\n      }, {\n        x: exitPoint.x + padding,\n        y: exitPoint.y + padding\n      });\n      break;\n    case \"bottom\":\n      paddedExitPoints.push({\n        x: exitPoint.x - padding,\n        y: exitPoint.y - padding\n      }, {\n        x: exitPoint.x + padding,\n        y: exitPoint.y - padding\n      });\n      break;\n    case \"left\":\n      paddedExitPoints.push({\n        x: exitPoint.x + padding,\n        y: exitPoint.y - padding\n      }, {\n        x: exitPoint.x + padding,\n        y: exitPoint.y + padding\n      });\n      break;\n    case \"right\":\n      paddedExitPoints.push({\n        x: exitPoint.x - padding,\n        y: exitPoint.y - padding\n      }, {\n        x: exitPoint.x - padding,\n        y: exitPoint.y + padding\n      });\n      break;\n  }\n  return paddedExitPoints;\n}\nfunction getPointsFromRect(rect) {\n  const {\n    top,\n    right,\n    bottom,\n    left\n  } = rect;\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: right,\n    y: top\n  }, {\n    x: right,\n    y: bottom\n  }, {\n    x: left,\n    y: bottom\n  }];\n}\nfunction isPointInPolygon(point, polygon) {\n  const {\n    x,\n    y\n  } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\nfunction getHull(points) {\n  const newPoints = points.slice();\n  newPoints.sort((a, b) => {\n    if (a.x < b.x) return -1;else if (a.x > b.x) return 1;else if (a.y < b.y) return -1;else if (a.y > b.y) return 1;else return 0;\n  });\n  return getHullPresorted(newPoints);\n}\nfunction getHullPresorted(points) {\n  if (points.length <= 1) return points.slice();\n  const upperHull = [];\n  for (let i = 0; i < points.length; i++) {\n    const p = points[i];\n    while (upperHull.length >= 2) {\n      const q = upperHull[upperHull.length - 1];\n      const r = upperHull[upperHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) upperHull.pop();else break;\n    }\n    upperHull.push(p);\n  }\n  upperHull.pop();\n  const lowerHull = [];\n  for (let i = points.length - 1; i >= 0; i--) {\n    const p = points[i];\n    while (lowerHull.length >= 2) {\n      const q = lowerHull[lowerHull.length - 1];\n      const r = lowerHull[lowerHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) lowerHull.pop();else break;\n    }\n    lowerHull.push(p);\n  }\n  lowerHull.pop();\n  if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {\n    return upperHull;\n  } else {\n    return upperHull.concat(lowerHull);\n  }\n}\nvar Provider = TooltipProvider;\nvar Root3 = Tooltip;\nvar Trigger = TooltipTrigger;\nvar Portal = TooltipPortal;\nvar Content2 = TooltipContent;\nvar Arrow2 = TooltipArrow;","map":{"version":3,"names":["src_exports","__export","Arrow","Arrow2","Content","Content2","Portal","Provider","Root","Root3","Tooltip","TooltipArrow","TooltipContent","TooltipPortal","TooltipProvider","TooltipTrigger","Trigger","createTooltipScope","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_compose_refs","import_react_context","import_react_dismissable_layer","import_react_id","PopperPrimitive","import_react_popper","import_react_portal","import_react_presence","import_react_primitive","import_react_slot","import_react_use_controllable_state","VisuallyHiddenPrimitive","import_jsx_runtime","createTooltipContext","createContextScope","createPopperScope","usePopperScope","PROVIDER_NAME","DEFAULT_DELAY_DURATION","TOOLTIP_OPEN","TooltipProviderContextProvider","useTooltipProviderContext","props","__scopeTooltip","delayDuration","skipDelayDuration","disableHoverableContent","children","isOpenDelayed","setIsOpenDelayed","useState","isPointerInTransitRef","useRef","skipDelayTimerRef","useEffect","skipDelayTimer","current","window","clearTimeout","jsx","scope","onOpen","useCallback","onClose","setTimeout","onPointerInTransitChange","inTransit","displayName","TOOLTIP_NAME","TooltipContextProvider","useTooltipContext","open","openProp","defaultOpen","onOpenChange","disableHoverableContentProp","delayDurationProp","providerContext","popperScope","trigger","setTrigger","contentId","useId","openTimerRef","wasOpenDelayedRef","setOpen","useControllableState","prop","defaultProp","onChange","open2","document","dispatchEvent","CustomEvent","stateAttribute","useMemo","handleOpen","handleClose","handleDelayedOpen","onTriggerChange","onTriggerEnter","onTriggerLeave","TRIGGER_NAME","forwardRef","forwardedRef","triggerProps","context","ref","composedRefs","useComposedRefs","isPointerDownRef","hasPointerMoveOpenedRef","handlePointerUp","removeEventListener","Anchor","asChild","Primitive","button","onPointerMove","composeEventHandlers","event","pointerType","onPointerLeave","onPointerDown","addEventListener","once","onFocus","onBlur","onClick","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","container","Presence","present","CONTENT_NAME","portalContext","side","contentProps","TooltipContentImpl","TooltipContentHoverable","pointerGraceArea","setPointerGraceArea","content","handleRemoveGraceArea","handleCreateGraceArea","hoverTarget","currentTarget","exitPoint","x","clientX","y","clientY","exitSide","getExitSideFromRect","getBoundingClientRect","paddedExitPoints","getPaddedExitPoints","hoverTargetPoints","getPointsFromRect","graceArea","getHull","handleTriggerLeave","handleContentLeave","handleTrackPointerGrace","target","pointerPosition","hasEnteredTarget","contains","isPointerOutsideGraceArea","isPointInPolygon","VisuallyHiddenContentContextProvider","useVisuallyHiddenContentContext","isInside","ariaLabel","onEscapeKeyDown","onPointerDownOutside","handleScroll","capture","DismissableLayer","disableOutsidePointerEvents","onFocusOutside","preventDefault","onDismiss","jsxs","style","Slottable","id","role","ARROW_NAME","arrowProps","visuallyHiddenContentContext","point","rect","top","Math","abs","bottom","right","left","min","Error","padding","push","polygon","inside","i","j","length","xi","yi","xj","yj","intersect","points","newPoints","slice","sort","a","b","getHullPresorted","upperHull","p","q","r","pop","lowerHull","concat"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-tooltip/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-tooltip/src/tooltip.tsx"],"sourcesContent":["'use client';\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n} from './tooltip';\nexport type {\n  TooltipProviderProps,\n  TooltipProps,\n  TooltipTriggerProps,\n  TooltipPortalProps,\n  TooltipContentProps,\n  TooltipArrowProps,\n} from './tooltip';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slottable } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'TooltipProvider';\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\n\ntype TooltipProviderContextValue = {\n  isOpenDelayed: boolean;\n  delayDuration: number;\n  onOpen(): void;\n  onClose(): void;\n  onPointerInTransitChange(inTransit: boolean): void;\n  isPointerInTransitRef: React.MutableRefObject<boolean>;\n  disableHoverableContent: boolean;\n};\n\nconst [TooltipProviderContextProvider, useTooltipProviderContext] =\n  createTooltipContext<TooltipProviderContextValue>(PROVIDER_NAME);\n\ninterface TooltipProviderProps {\n  children: React.ReactNode;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n}\n\nconst TooltipProvider: React.FC<TooltipProviderProps> = (\n  props: ScopedProps<TooltipProviderProps>\n) => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    disableHoverableContent = false,\n    children,\n  } = props;\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const isPointerInTransitRef = React.useRef(false);\n  const skipDelayTimerRef = React.useRef(0);\n\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  return (\n    <TooltipProviderContextProvider\n      scope={__scopeTooltip}\n      isOpenDelayed={isOpenDelayed}\n      delayDuration={delayDuration}\n      onOpen={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        setIsOpenDelayed(false);\n      }, [])}\n      onClose={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(\n          () => setIsOpenDelayed(true),\n          skipDelayDuration\n        );\n      }, [skipDelayDuration])}\n      isPointerInTransitRef={isPointerInTransitRef}\n      onPointerInTransitChange={React.useCallback((inTransit: boolean) => {\n        isPointerInTransitRef.current = inTransit;\n      }, [])}\n      disableHoverableContent={disableHoverableContent}\n    >\n      {children}\n    </TooltipProviderContextProvider>\n  );\n};\n\nTooltipProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onTriggerLeave(): void;\n  onOpen(): void;\n  onClose(): void;\n  disableHoverableContent: boolean;\n};\n\nconst [TooltipContextProvider, useTooltipContext] =\n  createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n}\n\nconst Tooltip: React.FC<TooltipProps> = (props: ScopedProps<TooltipProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    disableHoverableContent: disableHoverableContentProp,\n    delayDuration: delayDurationProp,\n  } = props;\n  const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState<HTMLButtonElement | null>(null);\n  const contentId = useId();\n  const openTimerRef = React.useRef(0);\n  const disableHoverableContent =\n    disableHoverableContentProp ?? providerContext.disableHoverableContent;\n  const delayDuration = delayDurationProp ?? providerContext.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: (open) => {\n      if (open) {\n        providerContext.onOpen();\n\n        // as `onChange` is called within a lifecycle method we\n        // avoid dispatching via `dispatchDiscreteCustomEvent`.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n      } else {\n        providerContext.onClose();\n      }\n      onOpenChange?.(open);\n    },\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    setOpen(false);\n  }, [setOpen]);\n\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n      openTimerRef.current = 0;\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  React.useEffect(() => {\n    return () => {\n      if (openTimerRef.current) {\n        window.clearTimeout(openTimerRef.current);\n        openTimerRef.current = 0;\n      }\n    };\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        onTriggerEnter={React.useCallback(() => {\n          if (providerContext.isOpenDelayed) handleDelayedOpen();\n          else handleOpen();\n        }, [providerContext.isOpenDelayed, handleDelayedOpen, handleOpen])}\n        onTriggerLeave={React.useCallback(() => {\n          if (disableHoverableContent) {\n            handleClose();\n          } else {\n            // Clear the timer in case the pointer leaves the trigger before the tooltip is opened.\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = 0;\n          }\n        }, [handleClose, disableHoverableContent])}\n        onOpen={handleOpen}\n        onClose={handleClose}\n        disableHoverableContent={disableHoverableContent}\n      >\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltip.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TooltipTriggerProps extends PrimitiveButtonProps {}\n\nconst TooltipTrigger = React.forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: ScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const { __scopeTooltip, ...triggerProps } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const ref = React.useRef<TooltipTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);\n    const isPointerDownRef = React.useRef(false);\n    const hasPointerMoveOpenedRef = React.useRef(false);\n    const handlePointerUp = React.useCallback(() => (isPointerDownRef.current = false), []);\n\n    React.useEffect(() => {\n      return () => document.removeEventListener('pointerup', handlePointerUp);\n    }, [handlePointerUp]);\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          // We purposefully avoid adding `type=button` here because tooltip triggers are also\n          // commonly anchors and the anchor `type` attribute signifies MIME type.\n          aria-describedby={context.open ? context.contentId : undefined}\n          data-state={context.stateAttribute}\n          {...triggerProps}\n          ref={composedRefs}\n          onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n            if (event.pointerType === 'touch') return;\n            if (\n              !hasPointerMoveOpenedRef.current &&\n              !providerContext.isPointerInTransitRef.current\n            ) {\n              context.onTriggerEnter();\n              hasPointerMoveOpenedRef.current = true;\n            }\n          })}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, () => {\n            context.onTriggerLeave();\n            hasPointerMoveOpenedRef.current = false;\n          })}\n          onPointerDown={composeEventHandlers(props.onPointerDown, () => {\n            isPointerDownRef.current = true;\n            document.addEventListener('pointerup', handlePointerUp, { once: true });\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            if (!isPointerDownRef.current) context.onOpen();\n          })}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          onClick={composeEventHandlers(props.onClick, context.onClose)}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'TooltipPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createTooltipContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface TooltipPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipPortal: React.FC<TooltipPortalProps> = (props: ScopedProps<TooltipPortalProps>) => {\n  const { __scopeTooltip, forceMount, children, container } = props;\n  const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);\n  return (\n    <PortalProvider scope={__scopeTooltip} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nTooltipPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = React.forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: ScopedProps<TooltipContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeTooltip);\n    const { forceMount = portalContext.forceMount, side = 'top', ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.disableHoverableContent ? (\n          <TooltipContentImpl side={side} {...contentProps} ref={forwardedRef} />\n        ) : (\n          <TooltipContentHoverable side={side} {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\ntype Point = { x: number; y: number };\ntype Polygon = Point[];\n\ntype TooltipContentHoverableElement = TooltipContentImplElement;\ninterface TooltipContentHoverableProps extends TooltipContentImplProps {}\n\nconst TooltipContentHoverable = React.forwardRef<\n  TooltipContentHoverableElement,\n  TooltipContentHoverableProps\n>((props: ScopedProps<TooltipContentHoverableProps>, forwardedRef) => {\n  const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n  const providerContext = useTooltipProviderContext(CONTENT_NAME, props.__scopeTooltip);\n  const ref = React.useRef<TooltipContentHoverableElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [pointerGraceArea, setPointerGraceArea] = React.useState<Polygon | null>(null);\n\n  const { trigger, onClose } = context;\n  const content = ref.current;\n\n  const { onPointerInTransitChange } = providerContext;\n\n  const handleRemoveGraceArea = React.useCallback(() => {\n    setPointerGraceArea(null);\n    onPointerInTransitChange(false);\n  }, [onPointerInTransitChange]);\n\n  const handleCreateGraceArea = React.useCallback(\n    (event: PointerEvent, hoverTarget: HTMLElement) => {\n      const currentTarget = event.currentTarget as HTMLElement;\n      const exitPoint = { x: event.clientX, y: event.clientY };\n      const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());\n      const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);\n      const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());\n      const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);\n      setPointerGraceArea(graceArea);\n      onPointerInTransitChange(true);\n    },\n    [onPointerInTransitChange]\n  );\n\n  React.useEffect(() => {\n    return () => handleRemoveGraceArea();\n  }, [handleRemoveGraceArea]);\n\n  React.useEffect(() => {\n    if (trigger && content) {\n      const handleTriggerLeave = (event: PointerEvent) => handleCreateGraceArea(event, content);\n      const handleContentLeave = (event: PointerEvent) => handleCreateGraceArea(event, trigger);\n\n      trigger.addEventListener('pointerleave', handleTriggerLeave);\n      content.addEventListener('pointerleave', handleContentLeave);\n      return () => {\n        trigger.removeEventListener('pointerleave', handleTriggerLeave);\n        content.removeEventListener('pointerleave', handleContentLeave);\n      };\n    }\n  }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);\n\n  React.useEffect(() => {\n    if (pointerGraceArea) {\n      const handleTrackPointerGrace = (event: PointerEvent) => {\n        const target = event.target as HTMLElement;\n        const pointerPosition = { x: event.clientX, y: event.clientY };\n        const hasEnteredTarget = trigger?.contains(target) || content?.contains(target);\n        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);\n\n        if (hasEnteredTarget) {\n          handleRemoveGraceArea();\n        } else if (isPointerOutsideGraceArea) {\n          handleRemoveGraceArea();\n          onClose();\n        }\n      };\n      document.addEventListener('pointermove', handleTrackPointerGrace);\n      return () => document.removeEventListener('pointermove', handleTrackPointerGrace);\n    }\n  }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);\n\n  return <TooltipContentImpl {...props} ref={composedRefs} />;\n});\n\nconst [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] =\n  createTooltipContext(TOOLTIP_NAME, { isInside: false });\n\ntype TooltipContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `Tooltip`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n}\n\nconst TooltipContentImpl = React.forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: ScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const { onClose } = context;\n\n    // Close this tooltip if another one opens\n    React.useEffect(() => {\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    // Close the tooltip if the trigger is scrolled\n    React.useEffect(() => {\n      if (context.trigger) {\n        const handleScroll = (event: Event) => {\n          const target = event.target as HTMLElement;\n          if (target?.contains(context.trigger)) onClose();\n        };\n        window.addEventListener('scroll', handleScroll, { capture: true });\n        return () => window.removeEventListener('scroll', handleScroll, { capture: true });\n      }\n    }, [context.trigger, onClose]);\n\n    return (\n      <DismissableLayer\n        asChild\n        disableOutsidePointerEvents={false}\n        onEscapeKeyDown={onEscapeKeyDown}\n        onPointerDownOutside={onPointerDownOutside}\n        onFocusOutside={(event) => event.preventDefault()}\n        onDismiss={onClose}\n      >\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom properties\n            ...{\n              '--radix-tooltip-content-transform-origin': 'var(--radix-popper-transform-origin)',\n              '--radix-tooltip-content-available-width': 'var(--radix-popper-available-width)',\n              '--radix-tooltip-content-available-height': 'var(--radix-popper-available-height)',\n              '--radix-tooltip-trigger-width': 'var(--radix-popper-anchor-width)',\n              '--radix-tooltip-trigger-height': 'var(--radix-popper-anchor-height)',\n            },\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenContentContextProvider scope={__scopeTooltip} isInside={true}>\n            <VisuallyHiddenPrimitive.Root id={context.contentId} role=\"tooltip\">\n              {ariaLabel || children}\n            </VisuallyHiddenPrimitive.Root>\n          </VisuallyHiddenContentContextProvider>\n        </PopperPrimitive.Content>\n      </DismissableLayer>\n    );\n  }\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = React.forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: ScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(\n      ARROW_NAME,\n      __scopeTooltip\n    );\n    // if the arrow is inside the `VisuallyHidden`, we don't want to render it all to\n    // prevent issues in positioning the arrow due to the duplicate\n    return visuallyHiddenContentContext.isInside ? null : (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    );\n  }\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype Side = NonNullable<TooltipContentProps['side']>;\n\nfunction getExitSideFromRect(point: Point, rect: DOMRect): Side {\n  const top = Math.abs(rect.top - point.y);\n  const bottom = Math.abs(rect.bottom - point.y);\n  const right = Math.abs(rect.right - point.x);\n  const left = Math.abs(rect.left - point.x);\n\n  switch (Math.min(top, bottom, right, left)) {\n    case left:\n      return 'left';\n    case right:\n      return 'right';\n    case top:\n      return 'top';\n    case bottom:\n      return 'bottom';\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nfunction getPaddedExitPoints(exitPoint: Point, exitSide: Side, padding = 5) {\n  const paddedExitPoints: Point[] = [];\n  switch (exitSide) {\n    case 'top':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y + padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding }\n      );\n      break;\n    case 'bottom':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y - padding }\n      );\n      break;\n    case 'left':\n      paddedExitPoints.push(\n        { x: exitPoint.x + padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding }\n      );\n      break;\n    case 'right':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x - padding, y: exitPoint.y + padding }\n      );\n      break;\n  }\n  return paddedExitPoints;\n}\n\nfunction getPointsFromRect(rect: DOMRect) {\n  const { top, right, bottom, left } = rect;\n  return [\n    { x: left, y: top },\n    { x: right, y: top },\n    { x: right, y: bottom },\n    { x: left, y: bottom },\n  ];\n}\n\n// Determine if a point is inside of a polygon.\n// Based on https://github.com/substack/point-in-polygon\nfunction isPointInPolygon(point: Point, polygon: Polygon) {\n  const { x, y } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    // prettier-ignore\n    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n}\n\n// Returns a new array of points representing the convex hull of the given set of points.\n// https://www.nayuki.io/page/convex-hull-algorithm\nfunction getHull<P extends Point>(points: Readonly<Array<P>>): Array<P> {\n  const newPoints: Array<P> = points.slice();\n  newPoints.sort((a: Point, b: Point) => {\n    if (a.x < b.x) return -1;\n    else if (a.x > b.x) return +1;\n    else if (a.y < b.y) return -1;\n    else if (a.y > b.y) return +1;\n    else return 0;\n  });\n  return getHullPresorted(newPoints);\n}\n\n// Returns the convex hull, assuming that each points[i] <= points[i + 1]. Runs in O(n) time.\nfunction getHullPresorted<P extends Point>(points: Readonly<Array<P>>): Array<P> {\n  if (points.length <= 1) return points.slice();\n\n  const upperHull: Array<P> = [];\n  for (let i = 0; i < points.length; i++) {\n    const p = points[i];\n    while (upperHull.length >= 2) {\n      const q = upperHull[upperHull.length - 1];\n      const r = upperHull[upperHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) upperHull.pop();\n      else break;\n    }\n    upperHull.push(p);\n  }\n  upperHull.pop();\n\n  const lowerHull: Array<P> = [];\n  for (let i = points.length - 1; i >= 0; i--) {\n    const p = points[i];\n    while (lowerHull.length >= 2) {\n      const q = lowerHull[lowerHull.length - 1];\n      const r = lowerHull[lowerHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) lowerHull.pop();\n      else break;\n    }\n    lowerHull.push(p);\n  }\n  lowerHull.pop();\n\n  if (\n    upperHull.length === 1 &&\n    lowerHull.length === 1 &&\n    upperHull[0].x === lowerHull[0].x &&\n    upperHull[0].y === lowerHull[0].y\n  ) {\n    return upperHull;\n  } else {\n    return upperHull.concat(lowerHull);\n  }\n}\n\nconst Provider = TooltipProvider;\nconst Root = Tooltip;\nconst Trigger = TooltipTrigger;\nconst Portal = TooltipPortal;\nconst Content = TooltipContent;\nconst Arrow = TooltipArrow;\n\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  TooltipProviderProps,\n  TooltipProps,\n  TooltipTriggerProps,\n  TooltipPortalProps,\n  TooltipContentProps,\n  TooltipArrowProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}