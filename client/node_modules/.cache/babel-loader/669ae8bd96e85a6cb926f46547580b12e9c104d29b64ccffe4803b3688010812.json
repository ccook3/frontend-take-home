{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/slot/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Root: () => Root,\n  Slot: () => Slot,\n  Slottable: () => Slottable\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/slot/src/slot.tsx\nvar React = __toESM(require(\"react\"));\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Slot = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    ...slotProps\n  } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n  if (slottable) {\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map(child => {\n      if (child === slottable) {\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement) ? newElement.props.children : null;\n      } else {\n        return child;\n      }\n    });\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SlotClone, {\n      ...slotProps,\n      ref: forwardedRef,\n      children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null\n    });\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SlotClone, {\n    ...slotProps,\n    ref: forwardedRef,\n    children\n  });\n});\nSlot.displayName = \"Slot\";\nvar SlotClone = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    ...slotProps\n  } = props;\n  if (React.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    const props2 = mergeProps(slotProps, children.props);\n    if (children.type !== React.Fragment) {\n      props2.ref = forwardedRef ? (0, import_react_compose_refs.composeRefs)(forwardedRef, childrenRef) : childrenRef;\n    }\n    return React.cloneElement(children, props2);\n  }\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nvar Slottable = ({\n  children\n}) => {\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {\n    children\n  });\n};\nfunction isSlottable(child) {\n  return React.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = {\n    ...childProps\n  };\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = {\n        ...slotPropValue,\n        ...childPropValue\n      };\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return {\n    ...slotProps,\n    ...overrideProps\n  };\n}\nfunction getElementRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nvar Root = Slot;","map":{"version":3,"names":["src_exports","__export","Root","Slot","Slottable","module","exports","__toCommonJS","React","__toESM","require","import_react_compose_refs","import_jsx_runtime","forwardRef","props","forwardedRef","children","slotProps","childrenArray","Children","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","isValidElement","jsx","SlotClone","ref","cloneElement","displayName","childrenRef","getElementRef","props2","mergeProps","type","Fragment","composeRefs","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","filter","Boolean","join","element","getter","Object","getOwnPropertyDescriptor","get","mayWarn","isReactWarning"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-slot/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-slot/src/slot.tsx"],"sourcesContent":["export {\n  Slot,\n  Slottable,\n  //\n  Root,\n} from './slot';\nexport type { SlotProps } from './slot';\n","import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children;\n\n    const newChildren = childrenArray.map((child) => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement)\n          ? (newElement.props as { children: React.ReactNode }).children\n          : null;\n      } else {\n        return child;\n      }\n    });\n\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {React.isValidElement(newElement)\n          ? React.cloneElement(newElement, undefined, newChildren)\n          : null}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    const props = mergeProps(slotProps, children.props as AnyProps);\n    // do not pass ref to React.Fragment for React 19 compatibility\n    if (children.type !== React.Fragment) {\n      props.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n    }\n    return React.cloneElement(children, props);\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(\n  child: React.ReactNode\n): child is React.ReactElement<React.ComponentProps<typeof Slottable>, typeof Slottable> {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      // if the handler exists on both, we compose them\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args: unknown[]) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      }\n      // but if it exists only on the slot, we use only this one\n      else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\n// Before React 19 accessing `element.props.ref` will throw a warning and suggest using `element.ref`\n// After React 19 accessing `element.ref` does the opposite.\n// https://github.com/facebook/react/pull/28348\n//\n// Access the ref using the method that doesn't yield a warning.\nfunction getElementRef(element: React.ReactElement) {\n  // React <=18 in DEV\n  let getter = Object.getOwnPropertyDescriptor(element.props, 'ref')?.get;\n  let mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element as any).ref;\n  }\n\n  // React 19 in DEV\n  getter = Object.getOwnPropertyDescriptor(element, 'ref')?.get;\n  mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element.props as { ref?: React.Ref<unknown> }).ref;\n  }\n\n  // Not DEV\n  return (element.props as { ref?: React.Ref<unknown> }).ref || (element as any).ref;\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}