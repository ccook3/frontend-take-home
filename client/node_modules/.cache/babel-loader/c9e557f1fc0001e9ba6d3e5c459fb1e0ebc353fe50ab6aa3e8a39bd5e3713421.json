{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/dialog/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Close: () => Close,\n  Content: () => Content,\n  Description: () => Description,\n  Dialog: () => Dialog,\n  DialogClose: () => DialogClose,\n  DialogContent: () => DialogContent,\n  DialogDescription: () => DialogDescription,\n  DialogOverlay: () => DialogOverlay,\n  DialogPortal: () => DialogPortal,\n  DialogTitle: () => DialogTitle,\n  DialogTrigger: () => DialogTrigger,\n  Overlay: () => Overlay,\n  Portal: () => Portal,\n  Root: () => Root,\n  Title: () => Title,\n  Trigger: () => Trigger,\n  WarningProvider: () => WarningProvider,\n  createDialogScope: () => createDialogScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/dialog/src/dialog.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_dismissable_layer = require(\"@radix-ui/react-dismissable-layer\");\nvar import_react_focus_scope = require(\"@radix-ui/react-focus-scope\");\nvar import_react_portal = require(\"@radix-ui/react-portal\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_focus_guards = require(\"@radix-ui/react-focus-guards\");\nvar import_react_remove_scroll = require(\"react-remove-scroll\");\nvar import_aria_hidden = require(\"aria-hidden\");\nvar import_react_slot = require(\"@radix-ui/react-slot\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = (0, import_react_context.createContextScope)(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = props => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogProvider, {\n    scope: __scopeDialog,\n    triggerRef,\n    contentRef,\n    contentId: (0, import_react_id.useId)(),\n    titleId: (0, import_react_id.useId)(),\n    descriptionId: (0, import_react_id.useId)(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children\n  });\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...triggerProps\n  } = props;\n  const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n  const composedTriggerRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, context.triggerRef);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: (0, import_primitive.composeEventHandlers)(props.onClick, context.onOpenToggle)\n  });\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = props => {\n  const {\n    __scopeDialog,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PortalProvider, {\n    scope: __scopeDialog,\n    forceMount,\n    children: React.Children.map(children, child => /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_portal.Portal, {\n        asChild: true,\n        container,\n        children: child\n      })\n    }))\n  });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n  return context.modal ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogOverlayImpl, {\n      ...overlayProps,\n      ref: forwardedRef\n    })\n  }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n  return (\n    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n    /* @__PURE__ */\n    (0, import_jsx_runtime.jsx)(import_react_remove_scroll.RemoveScroll, {\n      as: import_react_slot.Slot,\n      allowPinchZoom: true,\n      shards: [context.contentRef],\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        \"data-state\": getState(context.open),\n        ...overlayProps,\n        ref: forwardedRef,\n        style: {\n          pointerEvents: \"auto\",\n          ...overlayProps.style\n        }\n      })\n    })\n  );\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogContentModal, {\n      ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogContentNonModal, {\n      ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, context.contentRef, contentRef);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return (0, import_aria_hidden.hideOthers)(content);\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogContentImpl, {\n    ...props,\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: true,\n    onCloseAutoFocus: (0, import_primitive.composeEventHandlers)(props.onCloseAutoFocus, event => {\n      event.preventDefault();\n      context.triggerRef.current?.focus();\n    }),\n    onPointerDownOutside: (0, import_primitive.composeEventHandlers)(props.onPointerDownOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (isRightClick) event.preventDefault();\n    }),\n    onFocusOutside: (0, import_primitive.composeEventHandlers)(props.onFocusOutside, event => event.preventDefault())\n  });\n});\nvar DialogContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(DialogContentImpl, {\n    ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n      if (!event.defaultPrevented) {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n      const target = event.target;\n      const targetIsTrigger = context.triggerRef.current?.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, contentRef);\n  (0, import_react_focus_guards.useFocusGuards)();\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_focus_scope.FocusScope, {\n      asChild: true,\n      loop: true,\n      trapped: trapFocus,\n      onMountAutoFocus: onOpenAutoFocus,\n      onUnmountAutoFocus: onCloseAutoFocus,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_dismissable_layer.DismissableLayer, {\n        role: \"dialog\",\n        id: context.contentId,\n        \"aria-describedby\": context.descriptionId,\n        \"aria-labelledby\": context.titleId,\n        \"data-state\": getState(context.open),\n        ...contentProps,\n        ref: composedRefs,\n        onDismiss: () => context.onOpenChange(false)\n      })\n    }), /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n      children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(TitleWarning, {\n        titleId: context.titleId\n      }), /* @__PURE__ */(0, import_jsx_runtime.jsx)(DescriptionWarning, {\n        contentRef,\n        descriptionId: context.descriptionId\n      })]\n    })]\n  });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...titleProps\n  } = props;\n  const context = useDialogContext(TITLE_NAME, __scopeDialog);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.h2, {\n    id: context.titleId,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...descriptionProps\n  } = props;\n  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.p, {\n    id: context.descriptionId,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...closeProps\n  } = props;\n  const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: (0, import_primitive.composeEventHandlers)(props.onClick, () => context.onOpenChange(false))\n  });\n});\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = (0, import_react_context.createContext)(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = ({\n  titleId\n}) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = ({\n  contentRef,\n  descriptionId\n}) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;","map":{"version":3,"names":["src_exports","__export","Close","Content","Description","Dialog","DialogClose","DialogContent","DialogDescription","DialogOverlay","DialogPortal","DialogTitle","DialogTrigger","Overlay","Portal","Root","Title","Trigger","WarningProvider","createDialogScope","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_compose_refs","import_react_context","import_react_id","import_react_use_controllable_state","import_react_dismissable_layer","import_react_focus_scope","import_react_portal","import_react_presence","import_react_primitive","import_react_focus_guards","import_react_remove_scroll","import_aria_hidden","import_react_slot","import_jsx_runtime","DIALOG_NAME","createDialogContext","createContextScope","DialogProvider","useDialogContext","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","useRef","contentRef","setOpen","useControllableState","prop","defaultProp","onChange","jsx","scope","contentId","useId","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","displayName","TRIGGER_NAME","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","button","type","getState","ref","onClick","composeEventHandlers","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","container","Children","map","child","Presence","present","asChild","OVERLAY_NAME","portalContext","overlayProps","DialogOverlayImpl","RemoveScroll","as","Slot","allowPinchZoom","shards","div","style","pointerEvents","CONTENT_NAME","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","useEffect","content","current","hideOthers","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","useFocusGuards","jsxs","Fragment","FocusScope","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","role","id","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","titleProps","h2","DESCRIPTION_NAME","descriptionProps","p","CLOSE_NAME","closeProps","TITLE_WARNING_NAME","useWarningContext","createContext","contentName","titleName","docsSlug","titleWarningContext","MESSAGE","hasTitle","document","getElementById","console","error","DESCRIPTION_WARNING_NAME","descriptionWarningContext","describedById","getAttribute","hasDescription","warn"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-dialog/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-dialog/src/dialog.tsx"],"sourcesContent":["'use client';\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n} from './dialog';\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n} from './dialog';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentRef: React.RefObject<DialogContentElement | null>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = React.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = React.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement | null>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}