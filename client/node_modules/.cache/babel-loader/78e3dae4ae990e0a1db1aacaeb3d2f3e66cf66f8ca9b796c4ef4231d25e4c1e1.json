{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/navigation-menu/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Content: () => Content,\n  Indicator: () => Indicator,\n  Item: () => Item,\n  Link: () => Link,\n  List: () => List,\n  NavigationMenu: () => NavigationMenu,\n  NavigationMenuContent: () => NavigationMenuContent,\n  NavigationMenuIndicator: () => NavigationMenuIndicator,\n  NavigationMenuItem: () => NavigationMenuItem,\n  NavigationMenuLink: () => NavigationMenuLink,\n  NavigationMenuList: () => NavigationMenuList,\n  NavigationMenuSub: () => NavigationMenuSub,\n  NavigationMenuTrigger: () => NavigationMenuTrigger,\n  NavigationMenuViewport: () => NavigationMenuViewport,\n  Root: () => Root2,\n  Sub: () => Sub,\n  Trigger: () => Trigger,\n  Viewport: () => Viewport,\n  createNavigationMenuScope: () => createNavigationMenuScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/navigation-menu/src/navigation-menu.tsx\nvar React = __toESM(require(\"react\"));\nvar import_react_dom = __toESM(require(\"react-dom\"));\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar import_react_collection = require(\"@radix-ui/react-collection\");\nvar import_react_dismissable_layer = require(\"@radix-ui/react-dismissable-layer\");\nvar import_react_use_previous = require(\"@radix-ui/react-use-previous\");\nvar import_react_use_layout_effect = require(\"@radix-ui/react-use-layout-effect\");\nvar import_react_use_callback_ref = require(\"@radix-ui/react-use-callback-ref\");\nvar VisuallyHiddenPrimitive = __toESM(require(\"@radix-ui/react-visually-hidden\"));\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar NAVIGATION_MENU_NAME = \"NavigationMenu\";\nvar [Collection, useCollection, createCollectionScope] = (0, import_react_collection.createCollection)(NAVIGATION_MENU_NAME);\nvar [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] = (0, import_react_collection.createCollection)(NAVIGATION_MENU_NAME);\nvar [createNavigationMenuContext, createNavigationMenuScope] = (0, import_react_context.createContextScope)(NAVIGATION_MENU_NAME, [createCollectionScope, createFocusGroupCollectionScope]);\nvar [NavigationMenuProviderImpl, useNavigationMenuContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);\nvar [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);\nvar NavigationMenu = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    delayDuration = 200,\n    skipDelayDuration = 300,\n    orientation = \"horizontal\",\n    dir,\n    ...NavigationMenuProps\n  } = props;\n  const [navigationMenu, setNavigationMenu] = React.useState(null);\n  const composedRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setNavigationMenu(node));\n  const direction = (0, import_react_direction.useDirection)(dir);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const skipDelayTimerRef = React.useRef(0);\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const [value = \"\", setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    onChange: value2 => {\n      const isOpen = value2 !== \"\";\n      const hasSkipDelayDuration = skipDelayDuration > 0;\n      if (isOpen) {\n        window.clearTimeout(skipDelayTimerRef.current);\n        if (hasSkipDelayDuration) setIsOpenDelayed(false);\n      } else {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(() => setIsOpenDelayed(true), skipDelayDuration);\n      }\n      onValueChange?.(value2);\n    },\n    defaultProp: defaultValue\n  });\n  const startCloseTimer = React.useCallback(() => {\n    window.clearTimeout(closeTimerRef.current);\n    closeTimerRef.current = window.setTimeout(() => setValue(\"\"), 150);\n  }, [setValue]);\n  const handleOpen = React.useCallback(itemValue => {\n    window.clearTimeout(closeTimerRef.current);\n    setValue(itemValue);\n  }, [setValue]);\n  const handleDelayedOpen = React.useCallback(itemValue => {\n    const isOpenItem = value === itemValue;\n    if (isOpenItem) {\n      window.clearTimeout(closeTimerRef.current);\n    } else {\n      openTimerRef.current = window.setTimeout(() => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      }, delayDuration);\n    }\n  }, [value, setValue, delayDuration]);\n  React.useEffect(() => {\n    return () => {\n      window.clearTimeout(openTimerRef.current);\n      window.clearTimeout(closeTimerRef.current);\n      window.clearTimeout(skipDelayTimerRef.current);\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuProvider, {\n    scope: __scopeNavigationMenu,\n    isRootMenu: true,\n    value,\n    dir: direction,\n    orientation,\n    rootNavigationMenu: navigationMenu,\n    onTriggerEnter: itemValue => {\n      window.clearTimeout(openTimerRef.current);\n      if (isOpenDelayed) handleDelayedOpen(itemValue);else handleOpen(itemValue);\n    },\n    onTriggerLeave: () => {\n      window.clearTimeout(openTimerRef.current);\n      startCloseTimer();\n    },\n    onContentEnter: () => window.clearTimeout(closeTimerRef.current),\n    onContentLeave: startCloseTimer,\n    onItemSelect: itemValue => {\n      setValue(prevValue => prevValue === itemValue ? \"\" : itemValue);\n    },\n    onItemDismiss: () => setValue(\"\"),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.nav, {\n      \"aria-label\": \"Main\",\n      \"data-orientation\": orientation,\n      dir: direction,\n      ...NavigationMenuProps,\n      ref: composedRef\n    })\n  });\n});\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\nvar SUB_NAME = \"NavigationMenuSub\";\nvar NavigationMenuSub = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    orientation = \"horizontal\",\n    ...subProps\n  } = props;\n  const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n  const [value = \"\", setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuProvider, {\n    scope: __scopeNavigationMenu,\n    isRootMenu: false,\n    value,\n    dir: context.dir,\n    orientation,\n    rootNavigationMenu: context.rootNavigationMenu,\n    onTriggerEnter: itemValue => setValue(itemValue),\n    onItemSelect: itemValue => setValue(itemValue),\n    onItemDismiss: () => setValue(\"\"),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      \"data-orientation\": orientation,\n      ...subProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuSub.displayName = SUB_NAME;\nvar NavigationMenuProvider = props => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave\n  } = props;\n  const [viewport, setViewport] = React.useState(null);\n  const [viewportContent, setViewportContent] = React.useState(/* @__PURE__ */new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState(null);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuProviderImpl, {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    value,\n    previousValue: (0, import_react_use_previous.usePrevious)(value),\n    baseId: (0, import_react_id.useId)(),\n    dir,\n    orientation,\n    viewport,\n    onViewportChange: setViewport,\n    indicatorTrack,\n    onIndicatorTrackChange: setIndicatorTrack,\n    onTriggerEnter: (0, import_react_use_callback_ref.useCallbackRef)(onTriggerEnter),\n    onTriggerLeave: (0, import_react_use_callback_ref.useCallbackRef)(onTriggerLeave),\n    onContentEnter: (0, import_react_use_callback_ref.useCallbackRef)(onContentEnter),\n    onContentLeave: (0, import_react_use_callback_ref.useCallbackRef)(onContentLeave),\n    onItemSelect: (0, import_react_use_callback_ref.useCallbackRef)(onItemSelect),\n    onItemDismiss: (0, import_react_use_callback_ref.useCallbackRef)(onItemDismiss),\n    onViewportContentChange: React.useCallback((contentValue, contentData) => {\n      setViewportContent(prevContent => {\n        prevContent.set(contentValue, contentData);\n        return new Map(prevContent);\n      });\n    }, []),\n    onViewportContentRemove: React.useCallback(contentValue => {\n      setViewportContent(prevContent => {\n        if (!prevContent.has(contentValue)) return prevContent;\n        prevContent.delete(contentValue);\n        return new Map(prevContent);\n      });\n    }, []),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Provider, {\n      scope,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ViewportContentProvider, {\n        scope,\n        items: viewportContent,\n        children\n      })\n    })\n  });\n};\nvar LIST_NAME = \"NavigationMenuList\";\nvar NavigationMenuList = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...listProps\n  } = props;\n  const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n  const list = /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.ul, {\n    \"data-orientation\": context.orientation,\n    ...listProps,\n    ref: forwardedRef\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    style: {\n      position: \"relative\"\n    },\n    ref: context.onIndicatorTrackChange,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Slot, {\n      scope: __scopeNavigationMenu,\n      children: context.isRootMenu ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroup, {\n        asChild: true,\n        children: list\n      }) : list\n    })\n  });\n});\nNavigationMenuList.displayName = LIST_NAME;\nvar ITEM_NAME = \"NavigationMenuItem\";\nvar [NavigationMenuItemContextProvider, useNavigationMenuItemContext] = createNavigationMenuContext(ITEM_NAME);\nvar NavigationMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    ...itemProps\n  } = props;\n  const autoValue = (0, import_react_id.useId)();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const contentRef = React.useRef(null);\n  const triggerRef = React.useRef(null);\n  const focusProxyRef = React.useRef(null);\n  const restoreContentTabOrderRef = React.useRef(() => {});\n  const wasEscapeCloseRef = React.useRef(false);\n  const handleContentEntry = React.useCallback((side = \"start\") => {\n    if (contentRef.current) {\n      restoreContentTabOrderRef.current();\n      const candidates = getTabbableCandidates(contentRef.current);\n      if (candidates.length) focusFirst(side === \"start\" ? candidates : candidates.reverse());\n    }\n  }, []);\n  const handleContentExit = React.useCallback(() => {\n    if (contentRef.current) {\n      const candidates = getTabbableCandidates(contentRef.current);\n      if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n    }\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuItemContextProvider, {\n    scope: __scopeNavigationMenu,\n    value,\n    triggerRef,\n    contentRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onEntryKeyDown: handleContentEntry,\n    onFocusProxyEnter: handleContentEntry,\n    onRootContentClose: handleContentExit,\n    onContentFocusOutside: handleContentExit,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.li, {\n      ...itemProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuItem.displayName = ITEM_NAME;\nvar TRIGGER_NAME = \"NavigationMenuTrigger\";\nvar NavigationMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    disabled,\n    ...triggerProps\n  } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.ItemSlot, {\n      scope: __scopeNavigationMenu,\n      value: itemContext.value,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroupItem, {\n        asChild: true,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n          id: triggerId,\n          disabled,\n          \"data-disabled\": disabled ? \"\" : void 0,\n          \"data-state\": getOpenState(open),\n          \"aria-expanded\": open,\n          \"aria-controls\": contentId,\n          ...triggerProps,\n          ref: composedRefs,\n          onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, () => {\n            wasClickCloseRef.current = false;\n            itemContext.wasEscapeCloseRef.current = false;\n          }),\n          onPointerMove: (0, import_primitive.composeEventHandlers)(props.onPointerMove, whenMouse(() => {\n            if (disabled || wasClickCloseRef.current || itemContext.wasEscapeCloseRef.current || hasPointerMoveOpenedRef.current) return;\n            context.onTriggerEnter(itemContext.value);\n            hasPointerMoveOpenedRef.current = true;\n          })),\n          onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, whenMouse(() => {\n            if (disabled) return;\n            context.onTriggerLeave();\n            hasPointerMoveOpenedRef.current = false;\n          })),\n          onClick: (0, import_primitive.composeEventHandlers)(props.onClick, () => {\n            context.onItemSelect(itemContext.value);\n            wasClickCloseRef.current = open;\n          }),\n          onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n            const verticalEntryKey = context.dir === \"rtl\" ? \"ArrowLeft\" : \"ArrowRight\";\n            const entryKey = {\n              horizontal: \"ArrowDown\",\n              vertical: verticalEntryKey\n            }[context.orientation];\n            if (open && event.key === entryKey) {\n              itemContext.onEntryKeyDown();\n              event.preventDefault();\n            }\n          })\n        })\n      })\n    }), open && /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n      children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(VisuallyHiddenPrimitive.Root, {\n        \"aria-hidden\": true,\n        tabIndex: 0,\n        ref: itemContext.focusProxyRef,\n        onFocus: event => {\n          const content = itemContext.contentRef.current;\n          const prevFocusedElement = event.relatedTarget;\n          const wasTriggerFocused = prevFocusedElement === ref.current;\n          const wasFocusFromContent = content?.contains(prevFocusedElement);\n          if (wasTriggerFocused || !wasFocusFromContent) {\n            itemContext.onFocusProxyEnter(wasTriggerFocused ? \"start\" : \"end\");\n          }\n        }\n      }), context.viewport && /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"span\", {\n        \"aria-owns\": contentId\n      })]\n    })]\n  });\n});\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\nvar LINK_NAME = \"NavigationMenuLink\";\nvar LINK_SELECT = \"navigationMenu.linkSelect\";\nvar NavigationMenuLink = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    active,\n    onSelect,\n    ...linkProps\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroupItem, {\n    asChild: true,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.a, {\n      \"data-active\": active ? \"\" : void 0,\n      \"aria-current\": active ? \"page\" : void 0,\n      ...linkProps,\n      ref: forwardedRef,\n      onClick: (0, import_primitive.composeEventHandlers)(props.onClick, event => {\n        const target = event.target;\n        const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n          bubbles: true,\n          cancelable: true\n        });\n        target.addEventListener(LINK_SELECT, event2 => onSelect?.(event2), {\n          once: true\n        });\n        (0, import_react_primitive.dispatchDiscreteCustomEvent)(target, linkSelectEvent);\n        if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n          const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true\n          });\n          (0, import_react_primitive.dispatchDiscreteCustomEvent)(target, rootContentDismissEvent);\n        }\n      }, {\n        checkForDefaultPrevented: false\n      })\n    })\n  });\n});\nNavigationMenuLink.displayName = LINK_NAME;\nvar INDICATOR_NAME = \"NavigationMenuIndicator\";\nvar NavigationMenuIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n  return context.indicatorTrack ? import_react_dom.default.createPortal(/* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || isVisible,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuIndicatorImpl, {\n      ...indicatorProps,\n      ref: forwardedRef\n    })\n  }), context.indicatorTrack) : null;\n});\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\nvar NavigationMenuIndicatorImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...indicatorProps\n  } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState(null);\n  const [position, setPosition] = React.useState(null);\n  const isHorizontal = context.orientation === \"horizontal\";\n  const isVisible = Boolean(context.value);\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find(item => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n  return position ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"aria-hidden\": true,\n    \"data-state\": isVisible ? \"visible\" : \"hidden\",\n    \"data-orientation\": context.orientation,\n    ...indicatorProps,\n    ref: forwardedRef,\n    style: {\n      position: \"absolute\",\n      ...(isHorizontal ? {\n        left: 0,\n        width: position.size + \"px\",\n        transform: `translateX(${position.offset}px)`\n      } : {\n        top: 0,\n        height: position.size + \"px\",\n        transform: `translateY(${position.offset}px)`\n      }),\n      ...indicatorProps.style\n    }\n  }) : null;\n});\nvar CONTENT_NAME = \"NavigationMenuContent\";\nvar NavigationMenuContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps\n  };\n  return !context.viewport ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || open,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuContentImpl, {\n      \"data-state\": getOpenState(open),\n      ...commonProps,\n      ref: composedRefs,\n      onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, context.onContentEnter),\n      onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, whenMouse(context.onContentLeave)),\n      style: {\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? \"none\" : void 0,\n        ...commonProps.style\n      }\n    })\n  }) : /* @__PURE__ */(0, import_jsx_runtime.jsx)(ViewportContentMounter, {\n    forceMount,\n    ...commonProps,\n    ref: composedRefs\n  });\n});\nNavigationMenuContent.displayName = CONTENT_NAME;\nvar ViewportContentMounter = React.forwardRef((props, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const {\n    onViewportContentChange,\n    onViewportContentRemove\n  } = context;\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n  return null;\n});\nvar ROOT_CONTENT_DISMISS = \"navigationMenu.rootContentDismiss\";\nvar NavigationMenuContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef(null);\n  const {\n    onItemDismiss\n  } = context;\n  React.useEffect(() => {\n    const content = ref.current;\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map(item => item.value);\n    if (context.dir === \"rtl\") values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n    const attribute = (() => {\n      if (index !== prevIndex) {\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? \"from-end\" : \"from-start\";\n        if (wasSelected && index !== -1) return index > prevIndex ? \"to-start\" : \"to-end\";\n      }\n      return null;\n    })();\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroup, {\n    asChild: true,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_dismissable_layer.DismissableLayer, {\n      id: contentId,\n      \"aria-labelledby\": triggerId,\n      \"data-motion\": motionAttribute,\n      \"data-orientation\": context.orientation,\n      ...contentProps,\n      ref: composedRefs,\n      disableOutsidePointerEvents: false,\n      onDismiss: () => {\n        const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n          bubbles: true,\n          cancelable: true\n        });\n        ref.current?.dispatchEvent(rootContentDismissEvent);\n      },\n      onFocusOutside: (0, import_primitive.composeEventHandlers)(props.onFocusOutside, event => {\n        onContentFocusOutside();\n        const target = event.target;\n        if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n      }),\n      onPointerDownOutside: (0, import_primitive.composeEventHandlers)(props.onPointerDownOutside, event => {\n        const target = event.target;\n        const isTrigger = getItems().some(item => item.ref.current?.contains(target));\n        const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n        if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n      }),\n      onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n        const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n        const isTabKey = event.key === \"Tab\" && !isMetaKey;\n        if (isTabKey) {\n          const candidates = getTabbableCandidates(event.currentTarget);\n          const focusedElement = document.activeElement;\n          const index = candidates.findIndex(candidate => candidate === focusedElement);\n          const isMovingBackwards = event.shiftKey;\n          const nextCandidates = isMovingBackwards ? candidates.slice(0, index).reverse() : candidates.slice(index + 1, candidates.length);\n          if (focusFirst(nextCandidates)) {\n            event.preventDefault();\n          } else {\n            focusProxyRef.current?.focus();\n          }\n        }\n      }),\n      onEscapeKeyDown: (0, import_primitive.composeEventHandlers)(props.onEscapeKeyDown, _event => {\n        wasEscapeCloseRef.current = true;\n      })\n    })\n  });\n});\nvar VIEWPORT_NAME = \"NavigationMenuViewport\";\nvar NavigationMenuViewport = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...viewportProps\n  } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || open,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuViewportImpl, {\n      ...viewportProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\nvar NavigationMenuViewportImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    children,\n    ...viewportImplProps\n  } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const [size, setSize] = React.useState(null);\n  const [content, setContent] = React.useState(null);\n  const viewportWidth = size ? size?.width + \"px\" : void 0;\n  const viewportHeight = size ? size?.height + \"px\" : void 0;\n  const open = Boolean(context.value);\n  const activeContentValue = open ? context.value : context.previousValue;\n  const handleSizeChange = () => {\n    if (content) setSize({\n      width: content.offsetWidth,\n      height: content.offsetHeight\n    });\n  };\n  useResizeObserver(content, handleSizeChange);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"data-state\": getOpenState(open),\n    \"data-orientation\": context.orientation,\n    ...viewportImplProps,\n    ref: composedRefs,\n    style: {\n      // Prevent interaction when animating out\n      pointerEvents: !open && context.isRootMenu ? \"none\" : void 0,\n      [\"--radix-navigation-menu-viewport-width\"]: viewportWidth,\n      [\"--radix-navigation-menu-viewport-height\"]: viewportHeight,\n      ...viewportImplProps.style\n    },\n    onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, context.onContentEnter),\n    onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, whenMouse(context.onContentLeave)),\n    children: Array.from(viewportContentContext.items).map(([value, {\n      ref,\n      forceMount,\n      ...props2\n    }]) => {\n      const isActive = activeContentValue === value;\n      return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n        present: forceMount || isActive,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(NavigationMenuContentImpl, {\n          ...props2,\n          ref: (0, import_react_compose_refs.composeRefs)(ref, node => {\n            if (isActive && node) setContent(node);\n          })\n        })\n      }, value);\n    })\n  });\n});\nvar FOCUS_GROUP_NAME = \"FocusGroup\";\nvar FocusGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...groupProps\n  } = props;\n  const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroupCollection.Provider, {\n    scope: __scopeNavigationMenu,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroupCollection.Slot, {\n      scope: __scopeNavigationMenu,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n        dir: context.dir,\n        ...groupProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar ARROW_KEYS = [\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\"];\nvar FOCUS_GROUP_ITEM_NAME = \"FocusGroupItem\";\nvar FocusGroupItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...groupProps\n  } = props;\n  const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n  const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FocusGroupCollection.ItemSlot, {\n    scope: __scopeNavigationMenu,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n      ...groupProps,\n      ref: forwardedRef,\n      onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n        const isFocusNavigationKey = [\"Home\", \"End\", ...ARROW_KEYS].includes(event.key);\n        if (isFocusNavigationKey) {\n          let candidateNodes = getItems().map(item => item.ref.current);\n          const prevItemKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n          const prevKeys = [prevItemKey, \"ArrowUp\", \"End\"];\n          if (prevKeys.includes(event.key)) candidateNodes.reverse();\n          if (ARROW_KEYS.includes(event.key)) {\n            const currentIndex = candidateNodes.indexOf(event.currentTarget);\n            candidateNodes = candidateNodes.slice(currentIndex + 1);\n          }\n          setTimeout(() => focusFirst(candidateNodes));\n          event.preventDefault();\n        }\n      })\n    })\n  });\n});\nfunction getTabbableCandidates(container) {\n  const nodes = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n  return nodes;\n}\nfunction focusFirst(candidates) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some(candidate => {\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\nfunction removeFromTabOrder(candidates) {\n  candidates.forEach(candidate => {\n    candidate.dataset.tabindex = candidate.getAttribute(\"tabindex\") || \"\";\n    candidate.setAttribute(\"tabindex\", \"-1\");\n  });\n  return () => {\n    candidates.forEach(candidate => {\n      const prevTabIndex = candidate.dataset.tabindex;\n      candidate.setAttribute(\"tabindex\", prevTabIndex);\n    });\n  };\n}\nfunction useResizeObserver(element, onResize) {\n  const handleResize = (0, import_react_use_callback_ref.useCallbackRef)(onResize);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\nfunction getOpenState(open) {\n  return open ? \"open\" : \"closed\";\n}\nfunction makeTriggerId(baseId, value) {\n  return `${baseId}-trigger-${value}`;\n}\nfunction makeContentId(baseId, value) {\n  return `${baseId}-content-${value}`;\n}\nfunction whenMouse(handler) {\n  return event => event.pointerType === \"mouse\" ? handler(event) : void 0;\n}\nvar Root2 = NavigationMenu;\nvar Sub = NavigationMenuSub;\nvar List = NavigationMenuList;\nvar Item = NavigationMenuItem;\nvar Trigger = NavigationMenuTrigger;\nvar Link = NavigationMenuLink;\nvar Indicator = NavigationMenuIndicator;\nvar Content = NavigationMenuContent;\nvar Viewport = NavigationMenuViewport;","map":{"version":3,"names":["src_exports","__export","Content","Indicator","Item","Link","List","NavigationMenu","NavigationMenuContent","NavigationMenuIndicator","NavigationMenuItem","NavigationMenuLink","NavigationMenuList","NavigationMenuSub","NavigationMenuTrigger","NavigationMenuViewport","Root","Root2","Sub","Trigger","Viewport","createNavigationMenuScope","module","exports","__toCommonJS","React","__toESM","require","import_react_dom","import_react_context","import_primitive","import_react_primitive","import_react_use_controllable_state","import_react_compose_refs","import_react_direction","import_react_presence","import_react_id","import_react_collection","import_react_dismissable_layer","import_react_use_previous","import_react_use_layout_effect","import_react_use_callback_ref","VisuallyHiddenPrimitive","import_jsx_runtime","NAVIGATION_MENU_NAME","Collection","useCollection","createCollectionScope","createCollection","FocusGroupCollection","useFocusGroupCollection","createFocusGroupCollectionScope","createNavigationMenuContext","createContextScope","NavigationMenuProviderImpl","useNavigationMenuContext","ViewportContentProvider","useViewportContentContext","forwardRef","props","forwardedRef","__scopeNavigationMenu","value","valueProp","onValueChange","defaultValue","delayDuration","skipDelayDuration","orientation","dir","NavigationMenuProps","navigationMenu","setNavigationMenu","useState","composedRef","useComposedRefs","node","direction","useDirection","openTimerRef","useRef","closeTimerRef","skipDelayTimerRef","isOpenDelayed","setIsOpenDelayed","setValue","useControllableState","prop","onChange","value2","isOpen","hasSkipDelayDuration","window","clearTimeout","current","setTimeout","defaultProp","startCloseTimer","useCallback","handleOpen","itemValue","handleDelayedOpen","isOpenItem","useEffect","jsx","NavigationMenuProvider","scope","isRootMenu","rootNavigationMenu","onTriggerEnter","onTriggerLeave","onContentEnter","onContentLeave","onItemSelect","prevValue","onItemDismiss","children","Primitive","nav","ref","displayName","SUB_NAME","subProps","context","div","viewport","setViewport","viewportContent","setViewportContent","Map","indicatorTrack","setIndicatorTrack","previousValue","usePrevious","baseId","useId","onViewportChange","onIndicatorTrackChange","useCallbackRef","onViewportContentChange","contentValue","contentData","prevContent","set","onViewportContentRemove","has","delete","Provider","items","LIST_NAME","listProps","list","ul","style","position","Slot","FocusGroup","asChild","ITEM_NAME","NavigationMenuItemContextProvider","useNavigationMenuItemContext","itemProps","autoValue","contentRef","triggerRef","focusProxyRef","restoreContentTabOrderRef","wasEscapeCloseRef","handleContentEntry","side","candidates","getTabbableCandidates","length","focusFirst","reverse","handleContentExit","removeFromTabOrder","onEntryKeyDown","onFocusProxyEnter","onRootContentClose","onContentFocusOutside","li","TRIGGER_NAME","disabled","triggerProps","itemContext","composedRefs","triggerId","makeTriggerId","contentId","makeContentId","hasPointerMoveOpenedRef","wasClickCloseRef","open","jsxs","Fragment","ItemSlot","FocusGroupItem","button","id","getOpenState","onPointerEnter","composeEventHandlers","onPointerMove","whenMouse","onPointerLeave","onClick","onKeyDown","event","verticalEntryKey","entryKey","horizontal","vertical","key","preventDefault","tabIndex","onFocus","content","prevFocusedElement","relatedTarget","wasTriggerFocused","wasFocusFromContent","contains","LINK_NAME","LINK_SELECT","active","onSelect","linkProps","a","target","linkSelectEvent","CustomEvent","bubbles","cancelable","addEventListener","event2","once","dispatchDiscreteCustomEvent","defaultPrevented","metaKey","rootContentDismissEvent","ROOT_CONTENT_DISMISS","checkForDefaultPrevented","INDICATOR_NAME","forceMount","indicatorProps","isVisible","Boolean","default","createPortal","Presence","present","NavigationMenuIndicatorImpl","getItems","activeTrigger","setActiveTrigger","setPosition","isHorizontal","triggerNode","find","item","handlePositionChange","size","offsetWidth","offsetHeight","offset","offsetLeft","offsetTop","useResizeObserver","left","width","transform","top","height","CONTENT_NAME","contentProps","commonProps","NavigationMenuContentImpl","pointerEvents","ViewportContentMounter","useLayoutEffect","prevMotionAttributeRef","handleClose","document","activeElement","focus","removeEventListener","motionAttribute","useMemo","values","map","index","indexOf","prevIndex","isSelected","wasSelected","attribute","DismissableLayer","disableOutsidePointerEvents","onDismiss","Event","dispatchEvent","onFocusOutside","onPointerDownOutside","isTrigger","some","isRootViewport","isMetaKey","altKey","ctrlKey","isTabKey","currentTarget","focusedElement","findIndex","candidate","isMovingBackwards","shiftKey","nextCandidates","slice","onEscapeKeyDown","_event","VIEWPORT_NAME","viewportProps","NavigationMenuViewportImpl","viewportImplProps","viewportContentContext","setSize","setContent","viewportWidth","viewportHeight","activeContentValue","handleSizeChange","Array","from","props2","isActive","composeRefs","FOCUS_GROUP_NAME","groupProps","ARROW_KEYS","FOCUS_GROUP_ITEM_NAME","isFocusNavigationKey","includes","candidateNodes","prevItemKey","prevKeys","currentIndex","container","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","isHiddenInput","tagName","type","hidden","FILTER_SKIP","FILTER_ACCEPT","nextNode","push","currentNode","previouslyFocusedElement","forEach","dataset","tabindex","getAttribute","setAttribute","prevTabIndex","element","onResize","handleResize","rAF","resizeObserver","ResizeObserver","cancelAnimationFrame","requestAnimationFrame","observe","unobserve","handler","pointerType"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-navigation-menu/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-navigation-menu/src/navigation-menu.tsx"],"sourcesContent":["'use client';\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n} from './navigation-menu';\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n} from './navigation-menu';\n","/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeRefs, useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Orientation = 'vertical' | 'horizontal';\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAVIGATION_MENU_NAME = 'NavigationMenu';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  NavigationMenuTriggerElement,\n  { value: string }\n>(NAVIGATION_MENU_NAME);\n\nconst [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] =\n  createCollection<FocusGroupItemElement, {}>(NAVIGATION_MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeNavigationMenu?: Scope };\nconst [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(\n  NAVIGATION_MENU_NAME,\n  [createCollectionScope, createFocusGroupCollectionScope]\n);\n\ntype ContentData = {\n  ref?: React.Ref<ViewportContentMounterElement>;\n} & ViewportContentMounterProps;\n\ntype NavigationMenuContextValue = {\n  isRootMenu: boolean;\n  value: string;\n  previousValue: string;\n  baseId: string;\n  dir: Direction;\n  orientation: Orientation;\n  rootNavigationMenu: NavigationMenuElement | null;\n  indicatorTrack: HTMLDivElement | null;\n  onIndicatorTrackChange(indicatorTrack: HTMLDivElement | null): void;\n  viewport: NavigationMenuViewportElement | null;\n  onViewportChange(viewport: NavigationMenuViewportElement | null): void;\n  onViewportContentChange(contentValue: string, contentData: ContentData): void;\n  onViewportContentRemove(contentValue: string): void;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave(): void;\n  onContentEnter(): void;\n  onContentLeave(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n};\n\nconst [NavigationMenuProviderImpl, useNavigationMenuContext] =\n  createNavigationMenuContext<NavigationMenuContextValue>(NAVIGATION_MENU_NAME);\n\nconst [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext<{\n  items: Map<string, ContentData>;\n}>(NAVIGATION_MENU_NAME);\n\ntype NavigationMenuElement = React.ElementRef<typeof Primitive.nav>;\ntype PrimitiveNavProps = React.ComponentPropsWithoutRef<typeof Primitive.nav>;\ninterface NavigationMenuProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveNavProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  dir?: Direction;\n  orientation?: Orientation;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 200\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst NavigationMenu = React.forwardRef<NavigationMenuElement, NavigationMenuProps>(\n  (props: ScopedProps<NavigationMenuProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      delayDuration = 200,\n      skipDelayDuration = 300,\n      orientation = 'horizontal',\n      dir,\n      ...NavigationMenuProps\n    } = props;\n    const [navigationMenu, setNavigationMenu] = React.useState<NavigationMenuElement | null>(null);\n    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));\n    const direction = useDirection(dir);\n    const openTimerRef = React.useRef(0);\n    const closeTimerRef = React.useRef(0);\n    const skipDelayTimerRef = React.useRef(0);\n    const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: (value) => {\n        const isOpen = value !== '';\n        const hasSkipDelayDuration = skipDelayDuration > 0;\n\n        if (isOpen) {\n          window.clearTimeout(skipDelayTimerRef.current);\n          if (hasSkipDelayDuration) setIsOpenDelayed(false);\n        } else {\n          window.clearTimeout(skipDelayTimerRef.current);\n          skipDelayTimerRef.current = window.setTimeout(\n            () => setIsOpenDelayed(true),\n            skipDelayDuration\n          );\n        }\n\n        onValueChange?.(value);\n      },\n      defaultProp: defaultValue,\n    });\n\n    const startCloseTimer = React.useCallback(() => {\n      window.clearTimeout(closeTimerRef.current);\n      closeTimerRef.current = window.setTimeout(() => setValue(''), 150);\n    }, [setValue]);\n\n    const handleOpen = React.useCallback(\n      (itemValue: string) => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      },\n      [setValue]\n    );\n\n    const handleDelayedOpen = React.useCallback(\n      (itemValue: string) => {\n        const isOpenItem = value === itemValue;\n        if (isOpenItem) {\n          // If the item is already open (e.g. we're transitioning from the content to the trigger)\n          // then we want to clear the close timer immediately.\n          window.clearTimeout(closeTimerRef.current);\n        } else {\n          openTimerRef.current = window.setTimeout(() => {\n            window.clearTimeout(closeTimerRef.current);\n            setValue(itemValue);\n          }, delayDuration);\n        }\n      },\n      [value, setValue, delayDuration]\n    );\n\n    React.useEffect(() => {\n      return () => {\n        window.clearTimeout(openTimerRef.current);\n        window.clearTimeout(closeTimerRef.current);\n        window.clearTimeout(skipDelayTimerRef.current);\n      };\n    }, []);\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={true}\n        value={value}\n        dir={direction}\n        orientation={orientation}\n        rootNavigationMenu={navigationMenu}\n        onTriggerEnter={(itemValue) => {\n          window.clearTimeout(openTimerRef.current);\n          if (isOpenDelayed) handleDelayedOpen(itemValue);\n          else handleOpen(itemValue);\n        }}\n        onTriggerLeave={() => {\n          window.clearTimeout(openTimerRef.current);\n          startCloseTimer();\n        }}\n        onContentEnter={() => window.clearTimeout(closeTimerRef.current)}\n        onContentLeave={startCloseTimer}\n        onItemSelect={(itemValue) => {\n          setValue((prevValue) => (prevValue === itemValue ? '' : itemValue));\n        }}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.nav\n          aria-label=\"Main\"\n          data-orientation={orientation}\n          dir={direction}\n          {...NavigationMenuProps}\n          ref={composedRef}\n        />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'NavigationMenuSub';\n\ntype NavigationMenuSubElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface NavigationMenuSubProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  orientation?: Orientation;\n}\n\nconst NavigationMenuSub = React.forwardRef<NavigationMenuSubElement, NavigationMenuSubProps>(\n  (props: ScopedProps<NavigationMenuSubProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      ...subProps\n    } = props;\n    const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={false}\n        value={value}\n        dir={context.dir}\n        orientation={orientation}\n        rootNavigationMenu={context.rootNavigationMenu}\n        onTriggerEnter={(itemValue) => setValue(itemValue)}\n        onItemSelect={(itemValue) => setValue(itemValue)}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.div data-orientation={orientation} {...subProps} ref={forwardedRef} />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenuSub.displayName = SUB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface NavigationMenuProviderPrivateProps {\n  isRootMenu: boolean;\n  scope: Scope;\n  children: React.ReactNode;\n  orientation: Orientation;\n  dir: Direction;\n  rootNavigationMenu: NavigationMenuElement | null;\n  value: string;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave?(): void;\n  onContentEnter?(): void;\n  onContentLeave?(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n}\n\ninterface NavigationMenuProviderProps extends NavigationMenuProviderPrivateProps {}\n\nconst NavigationMenuProvider: React.FC<NavigationMenuProviderProps> = (\n  props: ScopedProps<NavigationMenuProviderProps>\n) => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave,\n  } = props;\n  const [viewport, setViewport] = React.useState<NavigationMenuViewportElement | null>(null);\n  const [viewportContent, setViewportContent] = React.useState<Map<string, ContentData>>(new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState<HTMLDivElement | null>(null);\n\n  return (\n    <NavigationMenuProviderImpl\n      scope={scope}\n      isRootMenu={isRootMenu}\n      rootNavigationMenu={rootNavigationMenu}\n      value={value}\n      previousValue={usePrevious(value)}\n      baseId={useId()}\n      dir={dir}\n      orientation={orientation}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      indicatorTrack={indicatorTrack}\n      onIndicatorTrackChange={setIndicatorTrack}\n      onTriggerEnter={useCallbackRef(onTriggerEnter)}\n      onTriggerLeave={useCallbackRef(onTriggerLeave)}\n      onContentEnter={useCallbackRef(onContentEnter)}\n      onContentLeave={useCallbackRef(onContentLeave)}\n      onItemSelect={useCallbackRef(onItemSelect)}\n      onItemDismiss={useCallbackRef(onItemDismiss)}\n      onViewportContentChange={React.useCallback((contentValue, contentData) => {\n        setViewportContent((prevContent) => {\n          prevContent.set(contentValue, contentData);\n          return new Map(prevContent);\n        });\n      }, [])}\n      onViewportContentRemove={React.useCallback((contentValue) => {\n        setViewportContent((prevContent) => {\n          if (!prevContent.has(contentValue)) return prevContent;\n          prevContent.delete(contentValue);\n          return new Map(prevContent);\n        });\n      }, [])}\n    >\n      <Collection.Provider scope={scope}>\n        <ViewportContentProvider scope={scope} items={viewportContent}>\n          {children}\n        </ViewportContentProvider>\n      </Collection.Provider>\n    </NavigationMenuProviderImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nconst LIST_NAME = 'NavigationMenuList';\n\ntype NavigationMenuListElement = React.ElementRef<typeof Primitive.ul>;\ntype PrimitiveUnorderedListProps = React.ComponentPropsWithoutRef<typeof Primitive.ul>;\ninterface NavigationMenuListProps extends PrimitiveUnorderedListProps {}\n\nconst NavigationMenuList = React.forwardRef<NavigationMenuListElement, NavigationMenuListProps>(\n  (props: ScopedProps<NavigationMenuListProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...listProps } = props;\n    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n\n    const list = (\n      <Primitive.ul data-orientation={context.orientation} {...listProps} ref={forwardedRef} />\n    );\n\n    return (\n      <Primitive.div style={{ position: 'relative' }} ref={context.onIndicatorTrackChange}>\n        <Collection.Slot scope={__scopeNavigationMenu}>\n          {context.isRootMenu ? <FocusGroup asChild>{list}</FocusGroup> : list}\n        </Collection.Slot>\n      </Primitive.div>\n    );\n  }\n);\n\nNavigationMenuList.displayName = LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'NavigationMenuItem';\n\ntype FocusProxyElement = React.ElementRef<typeof VisuallyHiddenPrimitive.Root>;\n\ntype NavigationMenuItemContextValue = {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement | null>;\n  contentRef: React.RefObject<NavigationMenuContentElement | null>;\n  focusProxyRef: React.RefObject<FocusProxyElement | null>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onEntryKeyDown(): void;\n  onFocusProxyEnter(side: 'start' | 'end'): void;\n  onRootContentClose(): void;\n  onContentFocusOutside(): void;\n};\n\nconst [NavigationMenuItemContextProvider, useNavigationMenuItemContext] =\n  createNavigationMenuContext<NavigationMenuItemContextValue>(ITEM_NAME);\n\ntype NavigationMenuItemElement = React.ElementRef<typeof Primitive.li>;\ntype PrimitiveListItemProps = React.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface NavigationMenuItemProps extends PrimitiveListItemProps {\n  value?: string;\n}\n\nconst NavigationMenuItem = React.forwardRef<NavigationMenuItemElement, NavigationMenuItemProps>(\n  (props: ScopedProps<NavigationMenuItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;\n    const autoValue = useId();\n    // We need to provide an initial deterministic value as `useId` will return\n    // empty string on the first render and we don't want to match our internal \"closed\" value.\n    const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n    const contentRef = React.useRef<NavigationMenuContentElement>(null);\n    const triggerRef = React.useRef<NavigationMenuTriggerElement>(null);\n    const focusProxyRef = React.useRef<FocusProxyElement>(null);\n    const restoreContentTabOrderRef = React.useRef(() => {});\n    const wasEscapeCloseRef = React.useRef(false);\n\n    const handleContentEntry = React.useCallback((side = 'start') => {\n      if (contentRef.current) {\n        restoreContentTabOrderRef.current();\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) focusFirst(side === 'start' ? candidates : candidates.reverse());\n      }\n    }, []);\n\n    const handleContentExit = React.useCallback(() => {\n      if (contentRef.current) {\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n      }\n    }, []);\n\n    return (\n      <NavigationMenuItemContextProvider\n        scope={__scopeNavigationMenu}\n        value={value}\n        triggerRef={triggerRef}\n        contentRef={contentRef}\n        focusProxyRef={focusProxyRef}\n        wasEscapeCloseRef={wasEscapeCloseRef}\n        onEntryKeyDown={handleContentEntry}\n        onFocusProxyEnter={handleContentEntry}\n        onRootContentClose={handleContentExit}\n        onContentFocusOutside={handleContentExit}\n      >\n        <Primitive.li {...itemProps} ref={forwardedRef} />\n      </NavigationMenuItemContextProvider>\n    );\n  }\n);\n\nNavigationMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'NavigationMenuTrigger';\n\ntype NavigationMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface NavigationMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst NavigationMenuTrigger = React.forwardRef<\n  NavigationMenuTriggerElement,\n  NavigationMenuTriggerProps\n>((props: ScopedProps<NavigationMenuTriggerProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuTriggerElement>(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n\n  return (\n    <>\n      <Collection.ItemSlot scope={__scopeNavigationMenu} value={itemContext.value}>\n        <FocusGroupItem asChild>\n          <Primitive.button\n            id={triggerId}\n            disabled={disabled}\n            data-disabled={disabled ? '' : undefined}\n            data-state={getOpenState(open)}\n            aria-expanded={open}\n            aria-controls={contentId}\n            {...triggerProps}\n            ref={composedRefs}\n            onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n              wasClickCloseRef.current = false;\n              itemContext.wasEscapeCloseRef.current = false;\n            })}\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse(() => {\n                if (\n                  disabled ||\n                  wasClickCloseRef.current ||\n                  itemContext.wasEscapeCloseRef.current ||\n                  hasPointerMoveOpenedRef.current\n                )\n                  return;\n                context.onTriggerEnter(itemContext.value);\n                hasPointerMoveOpenedRef.current = true;\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse(() => {\n                if (disabled) return;\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n              })\n            )}\n            onClick={composeEventHandlers(props.onClick, () => {\n              context.onItemSelect(itemContext.value);\n              wasClickCloseRef.current = open;\n            })}\n            onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n              const verticalEntryKey = context.dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n              const entryKey = { horizontal: 'ArrowDown', vertical: verticalEntryKey }[\n                context.orientation\n              ];\n              if (open && event.key === entryKey) {\n                itemContext.onEntryKeyDown();\n                // Prevent FocusGroupItem from handling the event\n                event.preventDefault();\n              }\n            })}\n          />\n        </FocusGroupItem>\n      </Collection.ItemSlot>\n\n      {/* Proxy tab order between trigger and content */}\n      {open && (\n        <>\n          <VisuallyHiddenPrimitive.Root\n            aria-hidden\n            tabIndex={0}\n            ref={itemContext.focusProxyRef}\n            onFocus={(event) => {\n              const content = itemContext.contentRef.current;\n              const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n              const wasTriggerFocused = prevFocusedElement === ref.current;\n              const wasFocusFromContent = content?.contains(prevFocusedElement);\n\n              if (wasTriggerFocused || !wasFocusFromContent) {\n                itemContext.onFocusProxyEnter(wasTriggerFocused ? 'start' : 'end');\n              }\n            }}\n          />\n\n          {/* Restructure a11y tree to make content accessible to screen reader when using the viewport */}\n          {context.viewport && <span aria-owns={contentId} />}\n        </>\n      )}\n    </>\n  );\n});\n\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'NavigationMenuLink';\nconst LINK_SELECT = 'navigationMenu.linkSelect';\n\ntype NavigationMenuLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface NavigationMenuLinkProps extends Omit<PrimitiveLinkProps, 'onSelect'> {\n  active?: boolean;\n  onSelect?: (event: Event) => void;\n}\n\nconst NavigationMenuLink = React.forwardRef<NavigationMenuLinkElement, NavigationMenuLinkProps>(\n  (props: ScopedProps<NavigationMenuLinkProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;\n\n    return (\n      <FocusGroupItem asChild>\n        <Primitive.a\n          data-active={active ? '' : undefined}\n          aria-current={active ? 'page' : undefined}\n          {...linkProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(\n            props.onClick,\n            (event) => {\n              const target = event.target as HTMLElement;\n              const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n                bubbles: true,\n                cancelable: true,\n              });\n              target.addEventListener(LINK_SELECT, (event) => onSelect?.(event), { once: true });\n              dispatchDiscreteCustomEvent(target, linkSelectEvent);\n\n              if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n                const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n                  bubbles: true,\n                  cancelable: true,\n                });\n                dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n              }\n            },\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </FocusGroupItem>\n    );\n  }\n);\n\nNavigationMenuLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'NavigationMenuIndicator';\n\ntype NavigationMenuIndicatorElement = NavigationMenuIndicatorImplElement;\ninterface NavigationMenuIndicatorProps extends NavigationMenuIndicatorImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuIndicator = React.forwardRef<\n  NavigationMenuIndicatorElement,\n  NavigationMenuIndicatorProps\n>((props: ScopedProps<NavigationMenuIndicatorProps>, forwardedRef) => {\n  const { forceMount, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n\n  return context.indicatorTrack\n    ? ReactDOM.createPortal(\n        <Presence present={forceMount || isVisible}>\n          <NavigationMenuIndicatorImpl {...indicatorProps} ref={forwardedRef} />\n        </Presence>,\n        context.indicatorTrack\n      )\n    : null;\n});\n\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\n\ntype NavigationMenuIndicatorImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuIndicatorImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuIndicatorImpl = React.forwardRef<\n  NavigationMenuIndicatorImplElement,\n  NavigationMenuIndicatorImplProps\n>((props: ScopedProps<NavigationMenuIndicatorImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState<NavigationMenuTriggerElement | null>(\n    null\n  );\n  const [position, setPosition] = React.useState<{ size: number; offset: number } | null>(null);\n  const isHorizontal = context.orientation === 'horizontal';\n  const isVisible = Boolean(context.value);\n\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n\n  /**\n   * Update position when the indicator or parent track size changes\n   */\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop,\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n\n  // We need to wait for the indicator position to be available before rendering to\n  // snap immediately into position rather than transitioning from initial\n  return position ? (\n    <Primitive.div\n      aria-hidden\n      data-state={isVisible ? 'visible' : 'hidden'}\n      data-orientation={context.orientation}\n      {...indicatorProps}\n      ref={forwardedRef}\n      style={{\n        position: 'absolute',\n        ...(isHorizontal\n          ? {\n              left: 0,\n              width: position.size + 'px',\n              transform: `translateX(${position.offset}px)`,\n            }\n          : {\n              top: 0,\n              height: position.size + 'px',\n              transform: `translateY(${position.offset}px)`,\n            }),\n        ...indicatorProps.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'NavigationMenuContent';\n\ntype NavigationMenuContentElement = NavigationMenuContentImplElement;\ninterface NavigationMenuContentProps\n  extends Omit<NavigationMenuContentImplProps, keyof NavigationMenuContentImplPrivateProps> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuContent = React.forwardRef<\n  NavigationMenuContentElement,\n  NavigationMenuContentProps\n>((props: ScopedProps<NavigationMenuContentProps>, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps,\n  };\n\n  return !context.viewport ? (\n    <Presence present={forceMount || open}>\n      <NavigationMenuContentImpl\n        data-state={getOpenState(open)}\n        {...commonProps}\n        ref={composedRefs}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n        onPointerLeave={composeEventHandlers(\n          props.onPointerLeave,\n          whenMouse(context.onContentLeave)\n        )}\n        style={{\n          // Prevent interaction when animating out\n          pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n          ...commonProps.style,\n        }}\n      />\n    </Presence>\n  ) : (\n    <ViewportContentMounter forceMount={forceMount} {...commonProps} ref={composedRefs} />\n  );\n});\n\nNavigationMenuContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ViewportContentMounterElement = NavigationMenuContentImplElement;\ninterface ViewportContentMounterProps extends NavigationMenuContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ViewportContentMounter = React.forwardRef<\n  ViewportContentMounterElement,\n  ViewportContentMounterProps\n>((props: ScopedProps<ViewportContentMounterProps>, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const { onViewportContentChange, onViewportContentRemove } = context;\n\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props,\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n\n  // Content is proxied into the viewport\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_CONTENT_DISMISS = 'navigationMenu.rootContentDismiss';\n\ntype MotionAttribute = 'to-start' | 'to-end' | 'from-start' | 'from-end';\ntype NavigationMenuContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\n\ninterface NavigationMenuContentImplPrivateProps {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement | null>;\n  focusProxyRef: React.RefObject<FocusProxyElement | null>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onContentFocusOutside(): void;\n  onRootContentClose(): void;\n}\ninterface NavigationMenuContentImplProps\n  extends Omit<DismissableLayerProps, 'onDismiss' | 'disableOutsidePointerEvents'>,\n    NavigationMenuContentImplPrivateProps {}\n\nconst NavigationMenuContentImpl = React.forwardRef<\n  NavigationMenuContentImplElement,\n  NavigationMenuContentImplProps\n>((props: ScopedProps<NavigationMenuContentImplProps>, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuContentImplElement>(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef<MotionAttribute | null>(null);\n\n  const { onItemDismiss } = context;\n\n  React.useEffect(() => {\n    const content = ref.current;\n\n    // Bubble dismiss to the root content node and focus its trigger\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map((item) => item.value);\n    if (context.dir === 'rtl') values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n\n    // We only want to update selected and the last selected content\n    // this avoids animations being interrupted outside of that range\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n\n    const attribute = (() => {\n      // Don't provide a direction on the initial open\n      if (index !== prevIndex) {\n        // If we're moving to this item from another\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? 'from-end' : 'from-start';\n        // If we're leaving this item for another\n        if (wasSelected && index !== -1) return index > prevIndex ? 'to-start' : 'to-end';\n      }\n      // Otherwise we're entering from closed or leaving the list\n      // entirely and should not animate in any direction\n      return null;\n    })();\n\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n\n  return (\n    <FocusGroup asChild>\n      <DismissableLayer\n        id={contentId}\n        aria-labelledby={triggerId}\n        data-motion={motionAttribute}\n        data-orientation={context.orientation}\n        {...contentProps}\n        ref={composedRefs}\n        disableOutsidePointerEvents={false}\n        onDismiss={() => {\n          const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true,\n          });\n          ref.current?.dispatchEvent(rootContentDismissEvent);\n        }}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          onContentFocusOutside();\n          const target = event.target as HTMLElement;\n          // Only dismiss content when focus moves outside of the menu\n          if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n          if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n          if (isTabKey) {\n            const candidates = getTabbableCandidates(event.currentTarget);\n            const focusedElement = document.activeElement;\n            const index = candidates.findIndex((candidate) => candidate === focusedElement);\n            const isMovingBackwards = event.shiftKey;\n            const nextCandidates = isMovingBackwards\n              ? candidates.slice(0, index).reverse()\n              : candidates.slice(index + 1, candidates.length);\n\n            if (focusFirst(nextCandidates)) {\n              // prevent browser tab keydown because we've handled focus\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges\n              // so focus the proxy and let browser handle\n              // tab/shift+tab keypress on the proxy instead\n              focusProxyRef.current?.focus();\n            }\n          }\n        })}\n        onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (_event) => {\n          // prevent the dropdown from reopening\n          // after the escape key has been pressed\n          wasEscapeCloseRef.current = true;\n        })}\n      />\n    </FocusGroup>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'NavigationMenuViewport';\n\ntype NavigationMenuViewportElement = NavigationMenuViewportImplElement;\ninterface NavigationMenuViewportProps\n  extends Omit<NavigationMenuViewportImplProps, 'activeContentValue'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuViewport = React.forwardRef<\n  NavigationMenuViewportElement,\n  NavigationMenuViewportProps\n>((props: ScopedProps<NavigationMenuViewportProps>, forwardedRef) => {\n  const { forceMount, ...viewportProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n\n  return (\n    <Presence present={forceMount || open}>\n      <NavigationMenuViewportImpl {...viewportProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype NavigationMenuViewportImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuViewportImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuViewportImpl = React.forwardRef<\n  NavigationMenuViewportImplElement,\n  NavigationMenuViewportImplProps\n>((props: ScopedProps<NavigationMenuViewportImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(\n    CONTENT_NAME,\n    props.__scopeNavigationMenu\n  );\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n  const [content, setContent] = React.useState<NavigationMenuContentElement | null>(null);\n  const viewportWidth = size ? size?.width + 'px' : undefined;\n  const viewportHeight = size ? size?.height + 'px' : undefined;\n  const open = Boolean(context.value);\n  // We persist the last active content value as the viewport may be animating out\n  // and we want the content to remain mounted for the lifecycle of the viewport.\n  const activeContentValue = open ? context.value : context.previousValue;\n\n  /**\n   * Update viewport size to match the active content node.\n   * We prefer offset dimensions over `getBoundingClientRect` as the latter respects CSS transform.\n   * For example, if content animates in from `scale(0.5)` the dimensions would be anything\n   * from `0.5` to `1` of the intended size.\n   */\n  const handleSizeChange = () => {\n    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });\n  };\n  useResizeObserver(content, handleSizeChange);\n\n  return (\n    <Primitive.div\n      data-state={getOpenState(open)}\n      data-orientation={context.orientation}\n      {...viewportImplProps}\n      ref={composedRefs}\n      style={{\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n        ['--radix-navigation-menu-viewport-width' as any]: viewportWidth,\n        ['--radix-navigation-menu-viewport-height' as any]: viewportHeight,\n        ...viewportImplProps.style,\n      }}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave))}\n    >\n      {Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props }]) => {\n        const isActive = activeContentValue === value;\n        return (\n          <Presence key={value} present={forceMount || isActive}>\n            <NavigationMenuContentImpl\n              {...props}\n              ref={composeRefs(ref, (node) => {\n                // We only want to update the stored node when another is available\n                // as we need to smoothly transition between them.\n                if (isActive && node) setContent(node);\n              })}\n            />\n          </Presence>\n        );\n      })}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_GROUP_NAME = 'FocusGroup';\n\ntype FocusGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface FocusGroupProps extends PrimitiveDivProps {}\n\nconst FocusGroup = React.forwardRef<FocusGroupElement, FocusGroupProps>(\n  (props: ScopedProps<FocusGroupProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.Provider scope={__scopeNavigationMenu}>\n        <FocusGroupCollection.Slot scope={__scopeNavigationMenu}>\n          <Primitive.div dir={context.dir} {...groupProps} ref={forwardedRef} />\n        </FocusGroupCollection.Slot>\n      </FocusGroupCollection.Provider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_KEYS = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\nconst FOCUS_GROUP_ITEM_NAME = 'FocusGroupItem';\n\ntype FocusGroupItemElement = React.ElementRef<typeof Primitive.button>;\ninterface FocusGroupItemProps extends PrimitiveButtonProps {}\n\nconst FocusGroupItem = React.forwardRef<FocusGroupItemElement, FocusGroupItemProps>(\n  (props: ScopedProps<FocusGroupItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.ItemSlot scope={__scopeNavigationMenu}>\n        <Primitive.button\n          {...groupProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isFocusNavigationKey = ['Home', 'End', ...ARROW_KEYS].includes(event.key);\n            if (isFocusNavigationKey) {\n              let candidateNodes = getItems().map((item) => item.ref.current!);\n              const prevItemKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const prevKeys = [prevItemKey, 'ArrowUp', 'End'];\n              if (prevKeys.includes(event.key)) candidateNodes.reverse();\n              if (ARROW_KEYS.includes(event.key)) {\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = candidateNodes.slice(currentIndex + 1);\n              }\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n\n              // Prevent page scroll while navigating\n              event.preventDefault();\n            }\n          })}\n        />\n      </FocusGroupCollection.ItemSlot>\n    );\n  }\n);\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nfunction removeFromTabOrder(candidates: HTMLElement[]) {\n  candidates.forEach((candidate) => {\n    candidate.dataset.tabindex = candidate.getAttribute('tabindex') || '';\n    candidate.setAttribute('tabindex', '-1');\n  });\n  return () => {\n    candidates.forEach((candidate) => {\n      const prevTabIndex = candidate.dataset.tabindex as string;\n      candidate.setAttribute('tabindex', prevTabIndex);\n    });\n  };\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = NavigationMenu;\nconst Sub = NavigationMenuSub;\nconst List = NavigationMenuList;\nconst Item = NavigationMenuItem;\nconst Trigger = NavigationMenuTrigger;\nconst Link = NavigationMenuLink;\nconst Indicator = NavigationMenuIndicator;\nconst Content = NavigationMenuContent;\nconst Viewport = NavigationMenuViewport;\n\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n};\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}