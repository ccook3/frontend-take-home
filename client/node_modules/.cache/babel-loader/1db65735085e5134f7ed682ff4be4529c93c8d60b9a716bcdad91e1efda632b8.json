{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/form/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Control: () => Control,\n  Field: () => Field,\n  Form: () => Form,\n  FormControl: () => FormControl,\n  FormField: () => FormField,\n  FormLabel: () => FormLabel,\n  FormMessage: () => FormMessage,\n  FormSubmit: () => FormSubmit,\n  FormValidityState: () => FormValidityState,\n  Label: () => Label,\n  Message: () => Message,\n  Root: () => Root,\n  Submit: () => Submit,\n  ValidityState: () => ValidityState,\n  createFormScope: () => createFormScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/form/src/form.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar import_react_label = require(\"@radix-ui/react-label\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [createFormContext, createFormScope] = (0, import_react_context.createContextScope)(\"Form\");\nvar FORM_NAME = \"Form\";\nvar [ValidationProvider, useValidationContext] = createFormContext(FORM_NAME);\nvar [AriaDescriptionProvider, useAriaDescriptionContext] = createFormContext(FORM_NAME);\nvar Form = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    onClearServerErrors = () => {},\n    ...rootProps\n  } = props;\n  const formRef = React.useRef(null);\n  const composedFormRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, formRef);\n  const [validityMap, setValidityMap] = React.useState({});\n  const getFieldValidity = React.useCallback(fieldName => validityMap[fieldName], [validityMap]);\n  const handleFieldValidityChange = React.useCallback((fieldName, validity) => setValidityMap(prevValidityMap => ({\n    ...prevValidityMap,\n    [fieldName]: {\n      ...(prevValidityMap[fieldName] ?? {}),\n      ...validity\n    }\n  })), []);\n  const handleFieldValiditionClear = React.useCallback(fieldName => {\n    setValidityMap(prevValidityMap => ({\n      ...prevValidityMap,\n      [fieldName]: void 0\n    }));\n    setCustomErrorsMap(prevCustomErrorsMap => ({\n      ...prevCustomErrorsMap,\n      [fieldName]: {}\n    }));\n  }, []);\n  const [customMatcherEntriesMap, setCustomMatcherEntriesMap] = React.useState({});\n  const getFieldCustomMatcherEntries = React.useCallback(fieldName => customMatcherEntriesMap[fieldName] ?? [], [customMatcherEntriesMap]);\n  const handleFieldCustomMatcherAdd = React.useCallback((fieldName, matcherEntry) => {\n    setCustomMatcherEntriesMap(prevCustomMatcherEntriesMap => ({\n      ...prevCustomMatcherEntriesMap,\n      [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry]\n    }));\n  }, []);\n  const handleFieldCustomMatcherRemove = React.useCallback((fieldName, matcherEntryId) => {\n    setCustomMatcherEntriesMap(prevCustomMatcherEntriesMap => ({\n      ...prevCustomMatcherEntriesMap,\n      [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(matcherEntry => matcherEntry.id !== matcherEntryId)\n    }));\n  }, []);\n  const [customErrorsMap, setCustomErrorsMap] = React.useState({});\n  const getFieldCustomErrors = React.useCallback(fieldName => customErrorsMap[fieldName] ?? {}, [customErrorsMap]);\n  const handleFieldCustomErrorsChange = React.useCallback((fieldName, customErrors) => {\n    setCustomErrorsMap(prevCustomErrorsMap => ({\n      ...prevCustomErrorsMap,\n      [fieldName]: {\n        ...(prevCustomErrorsMap[fieldName] ?? {}),\n        ...customErrors\n      }\n    }));\n  }, []);\n  const [messageIdsMap, setMessageIdsMap] = React.useState({});\n  const handleFieldMessageIdAdd = React.useCallback((fieldName, id) => {\n    setMessageIdsMap(prevMessageIdsMap => {\n      const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n      return {\n        ...prevMessageIdsMap,\n        [fieldName]: fieldDescriptionIds\n      };\n    });\n  }, []);\n  const handleFieldMessageIdRemove = React.useCallback((fieldName, id) => {\n    setMessageIdsMap(prevMessageIdsMap => {\n      const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n      fieldDescriptionIds.delete(id);\n      return {\n        ...prevMessageIdsMap,\n        [fieldName]: fieldDescriptionIds\n      };\n    });\n  }, []);\n  const getFieldDescription = React.useCallback(fieldName => Array.from(messageIdsMap[fieldName] ?? []).join(\" \") || void 0, [messageIdsMap]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ValidationProvider, {\n    scope: __scopeForm,\n    getFieldValidity,\n    onFieldValidityChange: handleFieldValidityChange,\n    getFieldCustomMatcherEntries,\n    onFieldCustomMatcherEntryAdd: handleFieldCustomMatcherAdd,\n    onFieldCustomMatcherEntryRemove: handleFieldCustomMatcherRemove,\n    getFieldCustomErrors,\n    onFieldCustomErrorsChange: handleFieldCustomErrorsChange,\n    onFieldValiditionClear: handleFieldValiditionClear,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AriaDescriptionProvider, {\n      scope: __scopeForm,\n      onFieldMessageIdAdd: handleFieldMessageIdAdd,\n      onFieldMessageIdRemove: handleFieldMessageIdRemove,\n      getFieldDescription,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.form, {\n        ...rootProps,\n        ref: composedFormRef,\n        onInvalid: (0, import_primitive.composeEventHandlers)(props.onInvalid, event => {\n          const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n          if (firstInvalidControl === event.target) firstInvalidControl.focus();\n          event.preventDefault();\n        }),\n        onSubmit: (0, import_primitive.composeEventHandlers)(props.onSubmit, onClearServerErrors, {\n          checkForDefaultPrevented: false\n        }),\n        onReset: (0, import_primitive.composeEventHandlers)(props.onReset, onClearServerErrors)\n      })\n    })\n  });\n});\nForm.displayName = FORM_NAME;\nvar FIELD_NAME = \"FormField\";\nvar [FormFieldProvider, useFormFieldContext] = createFormContext(FIELD_NAME);\nvar FormField = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    name,\n    serverInvalid = false,\n    ...fieldProps\n  } = props;\n  const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n  const validity = validationContext.getFieldValidity(name);\n  const id = (0, import_react_id.useId)();\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormFieldProvider, {\n    scope: __scopeForm,\n    id,\n    name,\n    serverInvalid,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      \"data-valid\": getValidAttribute(validity, serverInvalid),\n      \"data-invalid\": getInvalidAttribute(validity, serverInvalid),\n      ...fieldProps,\n      ref: forwardedRef\n    })\n  });\n});\nFormField.displayName = FIELD_NAME;\nvar LABEL_NAME = \"FormLabel\";\nvar FormLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...labelProps\n  } = props;\n  const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n  const htmlFor = labelProps.htmlFor || fieldContext.id;\n  const validity = validationContext.getFieldValidity(fieldContext.name);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_label.Label, {\n    \"data-valid\": getValidAttribute(validity, fieldContext.serverInvalid),\n    \"data-invalid\": getInvalidAttribute(validity, fieldContext.serverInvalid),\n    ...labelProps,\n    ref: forwardedRef,\n    htmlFor\n  });\n});\nFormLabel.displayName = LABEL_NAME;\nvar CONTROL_NAME = \"FormControl\";\nvar FormControl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...controlProps\n  } = props;\n  const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n  const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n  const ref = React.useRef(null);\n  const composedRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const name = controlProps.name || fieldContext.name;\n  const id = controlProps.id || fieldContext.id;\n  const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n  const {\n    onFieldValidityChange,\n    onFieldCustomErrorsChange,\n    onFieldValiditionClear\n  } = validationContext;\n  const updateControlValidity = React.useCallback(async control => {\n    if (hasBuiltInError(control.validity)) {\n      const controlValidity2 = validityStateToObject(control.validity);\n      onFieldValidityChange(name, controlValidity2);\n      return;\n    }\n    const formData = control.form ? new FormData(control.form) : new FormData();\n    const matcherArgs = [control.value, formData];\n    const syncCustomMatcherEntries = [];\n    const ayncCustomMatcherEntries = [];\n    customMatcherEntries.forEach(customMatcherEntry => {\n      if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n        ayncCustomMatcherEntries.push(customMatcherEntry);\n      } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n        syncCustomMatcherEntries.push(customMatcherEntry);\n      }\n    });\n    const syncCustomErrors = syncCustomMatcherEntries.map(({\n      id: id2,\n      match\n    }) => {\n      return [id2, match(...matcherArgs)];\n    });\n    const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n    const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n    const hasCustomError = hasSyncCustomErrors;\n    control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : \"\");\n    const controlValidity = validityStateToObject(control.validity);\n    onFieldValidityChange(name, controlValidity);\n    onFieldCustomErrorsChange(name, syncCustomErrorsById);\n    if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n      const promisedCustomErrors = ayncCustomMatcherEntries.map(({\n        id: id2,\n        match\n      }) => match(...matcherArgs).then(matches => [id2, matches]));\n      const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n      const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n      const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n      const hasCustomError2 = hasAsyncCustomErrors;\n      control.setCustomValidity(hasCustomError2 ? DEFAULT_INVALID_MESSAGE : \"\");\n      const controlValidity2 = validityStateToObject(control.validity);\n      onFieldValidityChange(name, controlValidity2);\n      onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n    }\n  }, [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]);\n  React.useEffect(() => {\n    const control = ref.current;\n    if (control) {\n      const handleChange = () => updateControlValidity(control);\n      control.addEventListener(\"change\", handleChange);\n      return () => control.removeEventListener(\"change\", handleChange);\n    }\n  }, [updateControlValidity]);\n  const resetControlValidity = React.useCallback(() => {\n    const control = ref.current;\n    if (control) {\n      control.setCustomValidity(\"\");\n      onFieldValiditionClear(name);\n    }\n  }, [name, onFieldValiditionClear]);\n  React.useEffect(() => {\n    const form = ref.current?.form;\n    if (form) {\n      form.addEventListener(\"reset\", resetControlValidity);\n      return () => form.removeEventListener(\"reset\", resetControlValidity);\n    }\n  }, [resetControlValidity]);\n  React.useEffect(() => {\n    const control = ref.current;\n    const form = control?.closest(\"form\");\n    if (form && fieldContext.serverInvalid) {\n      const firstInvalidControl = getFirstInvalidControl(form);\n      if (firstInvalidControl === control) firstInvalidControl.focus();\n    }\n  }, [fieldContext.serverInvalid]);\n  const validity = validationContext.getFieldValidity(name);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.input, {\n    \"data-valid\": getValidAttribute(validity, fieldContext.serverInvalid),\n    \"data-invalid\": getInvalidAttribute(validity, fieldContext.serverInvalid),\n    \"aria-invalid\": fieldContext.serverInvalid ? true : void 0,\n    \"aria-describedby\": ariaDescriptionContext.getFieldDescription(name),\n    title: \"\",\n    ...controlProps,\n    ref: composedRef,\n    id,\n    name,\n    onInvalid: (0, import_primitive.composeEventHandlers)(props.onInvalid, event => {\n      const control = event.currentTarget;\n      updateControlValidity(control);\n    }),\n    onChange: (0, import_primitive.composeEventHandlers)(props.onChange, _event => {\n      resetControlValidity();\n    })\n  });\n});\nFormControl.displayName = CONTROL_NAME;\nvar DEFAULT_INVALID_MESSAGE = \"This value is not valid\";\nvar DEFAULT_BUILT_IN_MESSAGES = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: \"This value does not match the required pattern\",\n  rangeOverflow: \"This value is too large\",\n  rangeUnderflow: \"This value is too small\",\n  stepMismatch: \"This value does not match the required step\",\n  tooLong: \"This value is too long\",\n  tooShort: \"This value is too short\",\n  typeMismatch: \"This value does not match the required type\",\n  valid: void 0,\n  valueMissing: \"This value is missing\"\n};\nvar MESSAGE_NAME = \"FormMessage\";\nvar FormMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    name: nameProp,\n    ...messageProps\n  } = props;\n  const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  if (match === void 0) {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormMessageImpl, {\n      ...messageProps,\n      ref: forwardedRef,\n      name,\n      children: props.children || DEFAULT_INVALID_MESSAGE\n    });\n  } else if (typeof match === \"function\") {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormCustomMessage, {\n      match,\n      ...messageProps,\n      ref: forwardedRef,\n      name\n    });\n  } else {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormBuiltInMessage, {\n      match,\n      ...messageProps,\n      ref: forwardedRef,\n      name\n    });\n  }\n});\nFormMessage.displayName = MESSAGE_NAME;\nvar FormBuiltInMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    forceMatch = false,\n    name,\n    children,\n    ...messageProps\n  } = props;\n  const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n  const validity = validationContext.getFieldValidity(name);\n  const matches = forceMatch || validity?.[match];\n  if (matches) {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormMessageImpl, {\n      ref: forwardedRef,\n      ...messageProps,\n      name,\n      children: children ?? DEFAULT_BUILT_IN_MESSAGES[match]\n    });\n  }\n  return null;\n});\nvar FormCustomMessage = React.forwardRef((props, forwardedRef) => {\n  const {\n    match,\n    forceMatch = false,\n    name,\n    id: idProp,\n    children,\n    ...messageProps\n  } = props;\n  const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n  const ref = React.useRef(null);\n  const composedRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const _id = (0, import_react_id.useId)();\n  const id = idProp ?? _id;\n  const customMatcherEntry = React.useMemo(() => ({\n    id,\n    match\n  }), [id, match]);\n  const {\n    onFieldCustomMatcherEntryAdd,\n    onFieldCustomMatcherEntryRemove\n  } = validationContext;\n  React.useEffect(() => {\n    onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n    return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n  }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n  const validity = validationContext.getFieldValidity(name);\n  const customErrors = validationContext.getFieldCustomErrors(name);\n  const hasMatchingCustomError = customErrors[id];\n  const matches = forceMatch || validity && !hasBuiltInError(validity) && hasMatchingCustomError;\n  if (matches) {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormMessageImpl, {\n      id,\n      ref: composedRef,\n      ...messageProps,\n      name,\n      children: children ?? DEFAULT_INVALID_MESSAGE\n    });\n  }\n  return null;\n});\nvar FormMessageImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    id: idProp,\n    name,\n    ...messageProps\n  } = props;\n  const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n  const _id = (0, import_react_id.useId)();\n  const id = idProp ?? _id;\n  const {\n    onFieldMessageIdAdd,\n    onFieldMessageIdRemove\n  } = ariaDescriptionContext;\n  React.useEffect(() => {\n    onFieldMessageIdAdd(name, id);\n    return () => onFieldMessageIdRemove(name, id);\n  }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.span, {\n    id,\n    ...messageProps,\n    ref: forwardedRef\n  });\n});\nvar VALIDITY_STATE_NAME = \"FormValidityState\";\nvar FormValidityState = props => {\n  const {\n    __scopeForm,\n    name: nameProp,\n    children\n  } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {\n    children: children(validity)\n  });\n};\nFormValidityState.displayName = VALIDITY_STATE_NAME;\nvar SUBMIT_NAME = \"FormSubmit\";\nvar FormSubmit = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeForm,\n    ...submitProps\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n    type: \"submit\",\n    ...submitProps,\n    ref: forwardedRef\n  });\n});\nFormSubmit.displayName = SUBMIT_NAME;\nfunction validityStateToObject(validity) {\n  const object = {};\n  for (const key in validity) {\n    object[key] = validity[key];\n  }\n  return object;\n}\nfunction isHTMLElement(element) {\n  return element instanceof HTMLElement;\n}\nfunction isFormControl(element) {\n  return \"validity\" in element;\n}\nfunction isInvalid(control) {\n  return isFormControl(control) && (control.validity.valid === false || control.getAttribute(\"aria-invalid\") === \"true\");\n}\nfunction getFirstInvalidControl(form) {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\nfunction isAsyncCustomMatcherEntry(entry, args) {\n  return entry.match.constructor.name === \"AsyncFunction\" || returnsPromise(entry.match, args);\n}\nfunction isSyncCustomMatcherEntry(entry) {\n  return entry.match.constructor.name === \"Function\";\n}\nfunction returnsPromise(func, args) {\n  return func(...args) instanceof Promise;\n}\nfunction hasBuiltInError(validity) {\n  let error = false;\n  for (const validityKey in validity) {\n    const key = validityKey;\n    if (key !== \"valid\" && key !== \"customError\" && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n  return error;\n}\nfunction getValidAttribute(validity, serverInvalid) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return void 0;\n}\nfunction getInvalidAttribute(validity, serverInvalid) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return void 0;\n}\nvar Root = Form;\nvar Field = FormField;\nvar Label = FormLabel;\nvar Control = FormControl;\nvar Message = FormMessage;\nvar ValidityState = FormValidityState;\nvar Submit = FormSubmit;","map":{"version":3,"names":["src_exports","__export","Control","Field","Form","FormControl","FormField","FormLabel","FormMessage","FormSubmit","FormValidityState","Label","Message","Root","Submit","ValidityState","createFormScope","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_compose_refs","import_react_context","import_react_id","import_react_label","import_react_primitive","import_jsx_runtime","createFormContext","createContextScope","FORM_NAME","ValidationProvider","useValidationContext","AriaDescriptionProvider","useAriaDescriptionContext","forwardRef","props","forwardedRef","__scopeForm","onClearServerErrors","rootProps","formRef","useRef","composedFormRef","useComposedRefs","validityMap","setValidityMap","useState","getFieldValidity","useCallback","fieldName","handleFieldValidityChange","validity","prevValidityMap","handleFieldValiditionClear","setCustomErrorsMap","prevCustomErrorsMap","customMatcherEntriesMap","setCustomMatcherEntriesMap","getFieldCustomMatcherEntries","handleFieldCustomMatcherAdd","matcherEntry","prevCustomMatcherEntriesMap","handleFieldCustomMatcherRemove","matcherEntryId","filter","id","customErrorsMap","getFieldCustomErrors","handleFieldCustomErrorsChange","customErrors","messageIdsMap","setMessageIdsMap","handleFieldMessageIdAdd","prevMessageIdsMap","fieldDescriptionIds","Set","add","handleFieldMessageIdRemove","delete","getFieldDescription","Array","from","join","jsx","scope","onFieldValidityChange","onFieldCustomMatcherEntryAdd","onFieldCustomMatcherEntryRemove","onFieldCustomErrorsChange","onFieldValiditionClear","children","onFieldMessageIdAdd","onFieldMessageIdRemove","Primitive","form","ref","onInvalid","composeEventHandlers","event","firstInvalidControl","getFirstInvalidControl","currentTarget","target","focus","preventDefault","onSubmit","checkForDefaultPrevented","onReset","displayName","FIELD_NAME","FormFieldProvider","useFormFieldContext","name","serverInvalid","fieldProps","validationContext","useId","div","getValidAttribute","getInvalidAttribute","LABEL_NAME","labelProps","fieldContext","htmlFor","CONTROL_NAME","controlProps","ariaDescriptionContext","composedRef","customMatcherEntries","updateControlValidity","control","hasBuiltInError","controlValidity2","validityStateToObject","formData","FormData","matcherArgs","value","syncCustomMatcherEntries","ayncCustomMatcherEntries","forEach","customMatcherEntry","isAsyncCustomMatcherEntry","push","isSyncCustomMatcherEntry","syncCustomErrors","map","id2","match","syncCustomErrorsById","Object","fromEntries","hasSyncCustomErrors","values","some","Boolean","hasCustomError","setCustomValidity","DEFAULT_INVALID_MESSAGE","controlValidity","length","promisedCustomErrors","then","matches","asyncCustomErrors","Promise","all","asyncCustomErrorsById","hasAsyncCustomErrors","hasCustomError2","useEffect","current","handleChange","addEventListener","removeEventListener","resetControlValidity","closest","input","title","onChange","_event","DEFAULT_BUILT_IN_MESSAGES","badInput","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valid","valueMissing","MESSAGE_NAME","nameProp","messageProps","FormMessageImpl","FormCustomMessage","FormBuiltInMessage","forceMatch","idProp","_id","useMemo","hasMatchingCustomError","span","VALIDITY_STATE_NAME","Fragment","SUBMIT_NAME","submitProps","button","type","object","key","isHTMLElement","element","HTMLElement","isFormControl","isInvalid","getAttribute","elements","entry","args","constructor","returnsPromise","func","error","validityKey"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-form/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-form/src/form.tsx"],"sourcesContent":["'use client';\nexport {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n} from './form';\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n} from './form';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Label as LabelPrimitive } from '@radix-ui/react-label';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P> = P & { __scopeForm?: Scope };\nconst [createFormContext, createFormScope] = createContextScope('Form');\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'Form';\n\ntype ValidityMap = { [fieldName: string]: ValidityState | undefined };\ntype CustomMatcherEntriesMap = { [fieldName: string]: CustomMatcherEntry[] };\ntype CustomErrorsMap = { [fieldName: string]: Record<string, boolean> };\n\ntype ValidationContextValue = {\n  getFieldValidity(fieldName: string): ValidityState | undefined;\n  onFieldValidityChange(fieldName: string, validity: ValidityState): void;\n\n  getFieldCustomMatcherEntries(fieldName: string): CustomMatcherEntry[];\n  onFieldCustomMatcherEntryAdd(fieldName: string, matcherEntry: CustomMatcherEntry): void;\n  onFieldCustomMatcherEntryRemove(fieldName: string, matcherEntryId: string): void;\n\n  getFieldCustomErrors(fieldName: string): Record<string, boolean>;\n  onFieldCustomErrorsChange(fieldName: string, errors: Record<string, boolean>): void;\n\n  onFieldValiditionClear(fieldName: string): void;\n};\nconst [ValidationProvider, useValidationContext] =\n  createFormContext<ValidationContextValue>(FORM_NAME);\n\ntype MessageIdsMap = { [fieldName: string]: Set<string> };\n\ntype AriaDescriptionContextValue = {\n  onFieldMessageIdAdd(fieldName: string, id: string): void;\n  onFieldMessageIdRemove(fieldName: string, id: string): void;\n  getFieldDescription(fieldName: string): string | undefined;\n};\nconst [AriaDescriptionProvider, useAriaDescriptionContext] =\n  createFormContext<AriaDescriptionContextValue>(FORM_NAME);\n\ntype FormElement = React.ElementRef<typeof Primitive.form>;\ntype PrimitiveFormProps = React.ComponentPropsWithoutRef<typeof Primitive.form>;\ninterface FormProps extends PrimitiveFormProps {\n  onClearServerErrors?(): void;\n}\n\nconst Form = React.forwardRef<FormElement, FormProps>(\n  (props: ScopedProps<FormProps>, forwardedRef) => {\n    const { __scopeForm, onClearServerErrors = () => {}, ...rootProps } = props;\n    const formRef = React.useRef<HTMLFormElement>(null);\n    const composedFormRef = useComposedRefs(forwardedRef, formRef);\n\n    // native validity per field\n    const [validityMap, setValidityMap] = React.useState<ValidityMap>({});\n    const getFieldValidity: ValidationContextValue['getFieldValidity'] = React.useCallback(\n      (fieldName) => validityMap[fieldName],\n      [validityMap]\n    );\n    const handleFieldValidityChange: ValidationContextValue['onFieldValidityChange'] =\n      React.useCallback(\n        (fieldName, validity) =>\n          setValidityMap((prevValidityMap) => ({\n            ...prevValidityMap,\n            [fieldName]: { ...(prevValidityMap[fieldName] ?? {}), ...validity },\n          })),\n        []\n      );\n    const handleFieldValiditionClear: ValidationContextValue['onFieldValiditionClear'] =\n      React.useCallback((fieldName) => {\n        setValidityMap((prevValidityMap) => ({ ...prevValidityMap, [fieldName]: undefined }));\n        setCustomErrorsMap((prevCustomErrorsMap) => ({ ...prevCustomErrorsMap, [fieldName]: {} }));\n      }, []);\n\n    // custom matcher entries per field\n    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] =\n      React.useState<CustomMatcherEntriesMap>({});\n    const getFieldCustomMatcherEntries: ValidationContextValue['getFieldCustomMatcherEntries'] =\n      React.useCallback(\n        (fieldName) => customMatcherEntriesMap[fieldName] ?? [],\n        [customMatcherEntriesMap]\n      );\n    const handleFieldCustomMatcherAdd: ValidationContextValue['onFieldCustomMatcherEntryAdd'] =\n      React.useCallback((fieldName, matcherEntry) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry],\n        }));\n      }, []);\n    const handleFieldCustomMatcherRemove: ValidationContextValue['onFieldCustomMatcherEntryRemove'] =\n      React.useCallback((fieldName, matcherEntryId) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(\n            (matcherEntry) => matcherEntry.id !== matcherEntryId\n          ),\n        }));\n      }, []);\n\n    // custom errors per field\n    const [customErrorsMap, setCustomErrorsMap] = React.useState<CustomErrorsMap>({});\n    const getFieldCustomErrors: ValidationContextValue['getFieldCustomErrors'] = React.useCallback(\n      (fieldName) => customErrorsMap[fieldName] ?? {},\n      [customErrorsMap]\n    );\n    const handleFieldCustomErrorsChange: ValidationContextValue['onFieldCustomErrorsChange'] =\n      React.useCallback((fieldName, customErrors) => {\n        setCustomErrorsMap((prevCustomErrorsMap) => ({\n          ...prevCustomErrorsMap,\n          [fieldName]: { ...(prevCustomErrorsMap[fieldName] ?? {}), ...customErrors },\n        }));\n      }, []);\n\n    // messageIds per field\n    const [messageIdsMap, setMessageIdsMap] = React.useState<MessageIdsMap>({});\n    const handleFieldMessageIdAdd: AriaDescriptionContextValue['onFieldMessageIdAdd'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const handleFieldMessageIdRemove: AriaDescriptionContextValue['onFieldMessageIdRemove'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n          fieldDescriptionIds.delete(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const getFieldDescription: AriaDescriptionContextValue['getFieldDescription'] =\n      React.useCallback(\n        (fieldName) => Array.from(messageIdsMap[fieldName] ?? []).join(' ') || undefined,\n        [messageIdsMap]\n      );\n\n    return (\n      <ValidationProvider\n        scope={__scopeForm}\n        getFieldValidity={getFieldValidity}\n        onFieldValidityChange={handleFieldValidityChange}\n        getFieldCustomMatcherEntries={getFieldCustomMatcherEntries}\n        onFieldCustomMatcherEntryAdd={handleFieldCustomMatcherAdd}\n        onFieldCustomMatcherEntryRemove={handleFieldCustomMatcherRemove}\n        getFieldCustomErrors={getFieldCustomErrors}\n        onFieldCustomErrorsChange={handleFieldCustomErrorsChange}\n        onFieldValiditionClear={handleFieldValiditionClear}\n      >\n        <AriaDescriptionProvider\n          scope={__scopeForm}\n          onFieldMessageIdAdd={handleFieldMessageIdAdd}\n          onFieldMessageIdRemove={handleFieldMessageIdRemove}\n          getFieldDescription={getFieldDescription}\n        >\n          <Primitive.form\n            {...rootProps}\n            ref={composedFormRef}\n            // focus first invalid control when the form is submitted\n            onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n              const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n              if (firstInvalidControl === event.target) firstInvalidControl.focus();\n\n              // prevent default browser UI for form validation\n              event.preventDefault();\n            })}\n            // clear server errors when the form is re-submitted\n            onSubmit={composeEventHandlers(props.onSubmit, onClearServerErrors, {\n              checkForDefaultPrevented: false,\n            })}\n            // clear server errors when the form is reset\n            onReset={composeEventHandlers(props.onReset, onClearServerErrors)}\n          />\n        </AriaDescriptionProvider>\n      </ValidationProvider>\n    );\n  }\n);\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormField\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'FormField';\n\ntype FormFieldContextValue = {\n  id: string;\n  name: string;\n  serverInvalid: boolean;\n};\nconst [FormFieldProvider, useFormFieldContext] =\n  createFormContext<FormFieldContextValue>(FIELD_NAME);\n\ntype FormFieldElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface FormFieldProps extends PrimitiveDivProps {\n  name: string;\n  serverInvalid?: boolean;\n}\n\nconst FormField = React.forwardRef<FormFieldElement, FormFieldProps>(\n  (props: ScopedProps<FormFieldProps>, forwardedRef) => {\n    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;\n    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const id = useId();\n\n    return (\n      <FormFieldProvider scope={__scopeForm} id={id} name={name} serverInvalid={serverInvalid}>\n        <Primitive.div\n          data-valid={getValidAttribute(validity, serverInvalid)}\n          data-invalid={getInvalidAttribute(validity, serverInvalid)}\n          {...fieldProps}\n          ref={forwardedRef}\n        />\n      </FormFieldProvider>\n    );\n  }\n);\n\nFormField.displayName = FIELD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'FormLabel';\n\ntype FormLabelElement = React.ElementRef<typeof LabelPrimitive>;\ntype LabelProps = React.ComponentPropsWithoutRef<typeof LabelPrimitive>;\ninterface FormLabelProps extends LabelProps {}\n\nconst FormLabel = React.forwardRef<FormLabelElement, FormLabelProps>(\n  (props: ScopedProps<FormLabelProps>, forwardedRef) => {\n    const { __scopeForm, ...labelProps } = props;\n    const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n    const htmlFor = labelProps.htmlFor || fieldContext.id;\n    const validity = validationContext.getFieldValidity(fieldContext.name);\n\n    return (\n      <LabelPrimitive\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        {...labelProps}\n        ref={forwardedRef}\n        htmlFor={htmlFor}\n      />\n    );\n  }\n);\n\nFormLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormControl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTROL_NAME = 'FormControl';\n\ntype FormControlElement = React.ElementRef<typeof Primitive.input>;\ntype PrimitiveInputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface FormControlProps extends PrimitiveInputProps {}\n\nconst FormControl = React.forwardRef<FormControlElement, FormControlProps>(\n  (props: ScopedProps<FormControlProps>, forwardedRef) => {\n    const { __scopeForm, ...controlProps } = props;\n\n    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n\n    const ref = React.useRef<FormControlElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const name = controlProps.name || fieldContext.name;\n    const id = controlProps.id || fieldContext.id;\n    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n\n    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } =\n      validationContext;\n    const updateControlValidity = React.useCallback(\n      async (control: FormControlElement) => {\n        //------------------------------------------------------------------------------------------\n        // 1. first, if we have built-in errors we stop here\n\n        if (hasBuiltInError(control.validity)) {\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          return;\n        }\n\n        //------------------------------------------------------------------------------------------\n        // 2. then gather the form data to give to custom matchers for cross-comparisons\n\n        const formData = control.form ? new FormData(control.form) : new FormData();\n        const matcherArgs: CustomMatcherArgs = [control.value, formData];\n\n        //------------------------------------------------------------------------------------------\n        // 3. split sync and async custom matcher entries\n\n        const syncCustomMatcherEntries: Array<SyncCustomMatcherEntry> = [];\n        const ayncCustomMatcherEntries: Array<AsyncCustomMatcherEntry> = [];\n        customMatcherEntries.forEach((customMatcherEntry) => {\n          if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n            ayncCustomMatcherEntries.push(customMatcherEntry);\n          } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n            syncCustomMatcherEntries.push(customMatcherEntry);\n          }\n        });\n\n        //------------------------------------------------------------------------------------------\n        // 4. run sync custom matchers and update control validity / internal validity + errors\n\n        const syncCustomErrors = syncCustomMatcherEntries.map(({ id, match }) => {\n          return [id, match(...matcherArgs)] as const;\n        });\n        const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n        const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n        const hasCustomError = hasSyncCustomErrors;\n        control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n        const controlValidity = validityStateToObject(control.validity);\n        onFieldValidityChange(name, controlValidity);\n        onFieldCustomErrorsChange(name, syncCustomErrorsById);\n\n        //------------------------------------------------------------------------------------------\n        // 5. run async custom matchers and update control validity / internal validity + errors\n\n        if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n          const promisedCustomErrors = ayncCustomMatcherEntries.map(({ id, match }) =>\n            match(...matcherArgs).then((matches) => [id, matches] as const)\n          );\n          const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n          const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n          const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n          const hasCustomError = hasAsyncCustomErrors;\n          control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n        }\n      },\n      [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]\n    );\n\n    React.useEffect(() => {\n      const control = ref.current;\n      if (control) {\n        // We only want validate on change (native `change` event, not React's `onChange`). This is primarily\n        // a UX decision, we don't want to validate on every keystroke and React's `onChange` is the `input` event.\n        const handleChange = () => updateControlValidity(control);\n        control.addEventListener('change', handleChange);\n        return () => control.removeEventListener('change', handleChange);\n      }\n    }, [updateControlValidity]);\n\n    const resetControlValidity = React.useCallback(() => {\n      const control = ref.current;\n      if (control) {\n        control.setCustomValidity('');\n        onFieldValiditionClear(name);\n      }\n    }, [name, onFieldValiditionClear]);\n\n    // reset validity and errors when the form is reset\n    React.useEffect(() => {\n      const form = ref.current?.form;\n      if (form) {\n        form.addEventListener('reset', resetControlValidity);\n        return () => form.removeEventListener('reset', resetControlValidity);\n      }\n    }, [resetControlValidity]);\n\n    // focus first invalid control when fields are set as invalid by server\n    React.useEffect(() => {\n      const control = ref.current;\n      const form = control?.closest('form');\n      if (form && fieldContext.serverInvalid) {\n        const firstInvalidControl = getFirstInvalidControl(form);\n        if (firstInvalidControl === control) firstInvalidControl.focus();\n      }\n    }, [fieldContext.serverInvalid]);\n\n    const validity = validationContext.getFieldValidity(name);\n\n    return (\n      <Primitive.input\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        aria-invalid={fieldContext.serverInvalid ? true : undefined}\n        aria-describedby={ariaDescriptionContext.getFieldDescription(name)}\n        // disable default browser behaviour of showing built-in error message on hover\n        title=\"\"\n        {...controlProps}\n        ref={composedRef}\n        id={id}\n        name={name}\n        onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n          const control = event.currentTarget;\n          updateControlValidity(control);\n        })}\n        onChange={composeEventHandlers(props.onChange, (_event) => {\n          // reset validity when user changes value\n          resetControlValidity();\n        })}\n      />\n    );\n  }\n);\n\nFormControl.displayName = CONTROL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormMessage\n * -----------------------------------------------------------------------------------------------*/\n\nconst _validityMatchers = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'stepMismatch',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valid',\n  'valueMissing',\n] as const;\ntype ValidityMatcher = (typeof _validityMatchers)[number];\n\nconst DEFAULT_INVALID_MESSAGE = 'This value is not valid';\nconst DEFAULT_BUILT_IN_MESSAGES: Record<ValidityMatcher, string | undefined> = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: 'This value does not match the required pattern',\n  rangeOverflow: 'This value is too large',\n  rangeUnderflow: 'This value is too small',\n  stepMismatch: 'This value does not match the required step',\n  tooLong: 'This value is too long',\n  tooShort: 'This value is too short',\n  typeMismatch: 'This value does not match the required type',\n  valid: undefined,\n  valueMissing: 'This value is missing',\n};\n\nconst MESSAGE_NAME = 'FormMessage';\n\ntype FormMessageElement = FormMessageImplElement;\ninterface FormMessageProps extends Omit<FormMessageImplProps, 'name'> {\n  match?: ValidityMatcher | CustomMatcher;\n  forceMatch?: boolean;\n  name?: string;\n}\n\nconst FormMessage = React.forwardRef<FormMessageElement, FormMessageProps>(\n  (props: ScopedProps<FormMessageProps>, forwardedRef) => {\n    const { match, name: nameProp, ...messageProps } = props;\n    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n    const name = nameProp ?? fieldContext.name;\n\n    if (match === undefined) {\n      return (\n        <FormMessageImpl {...messageProps} ref={forwardedRef} name={name}>\n          {props.children || DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    } else if (typeof match === 'function') {\n      return <FormCustomMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    } else {\n      return <FormBuiltInMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    }\n  }\n);\n\nFormMessage.displayName = MESSAGE_NAME;\n\ntype FormBuiltInMessageElement = FormMessageImplElement;\ninterface FormBuiltInMessageProps extends FormMessageImplProps {\n  match: ValidityMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormBuiltInMessage = React.forwardRef<FormBuiltInMessageElement, FormBuiltInMessageProps>(\n  (props: ScopedProps<FormBuiltInMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const matches = forceMatch || validity?.[match];\n\n    if (matches) {\n      return (\n        <FormMessageImpl ref={forwardedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_BUILT_IN_MESSAGES[match]}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormCustomMessageElement = React.ElementRef<typeof FormMessageImpl>;\ninterface FormCustomMessageProps extends React.ComponentPropsWithoutRef<typeof FormMessageImpl> {\n  match: CustomMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormCustomMessage = React.forwardRef<FormCustomMessageElement, FormCustomMessageProps>(\n  (props: ScopedProps<FormCustomMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const ref = React.useRef<FormCustomMessageElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const customMatcherEntry = React.useMemo(() => ({ id, match }), [id, match]);\n    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;\n    React.useEffect(() => {\n      onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n      return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n    }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n\n    const validity = validationContext.getFieldValidity(name);\n    const customErrors = validationContext.getFieldCustomErrors(name);\n    const hasMatchingCustomError = customErrors[id];\n    const matches =\n      forceMatch || (validity && !hasBuiltInError(validity) && hasMatchingCustomError);\n\n    if (matches) {\n      return (\n        <FormMessageImpl id={id} ref={composedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormMessageImplElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface FormMessageImplProps extends PrimitiveSpanProps {\n  name: string;\n}\n\nconst FormMessageImpl = React.forwardRef<FormMessageImplElement, FormMessageImplProps>(\n  (props: ScopedProps<FormMessageImplProps>, forwardedRef) => {\n    const { __scopeForm, id: idProp, name, ...messageProps } = props;\n    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;\n    React.useEffect(() => {\n      onFieldMessageIdAdd(name, id);\n      return () => onFieldMessageIdRemove(name, id);\n    }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n\n    return <Primitive.span id={id} {...messageProps} ref={forwardedRef} />;\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FormValidityState\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALIDITY_STATE_NAME = 'FormValidityState';\n\ninterface FormValidityStateProps {\n  children(validity: ValidityState | undefined): React.ReactNode;\n  name?: string;\n}\n\nconst FormValidityState = (props: ScopedProps<FormValidityStateProps>) => {\n  const { __scopeForm, name: nameProp, children } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return <>{children(validity)}</>;\n};\n\nFormValidityState.displayName = VALIDITY_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormSubmit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'FormSubmit';\n\ntype FormSubmitElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface FormSubmitProps extends PrimitiveButtonProps {}\n\nconst FormSubmit = React.forwardRef<FormSubmitElement, FormSubmitProps>(\n  (props: ScopedProps<FormSubmitProps>, forwardedRef) => {\n    const { __scopeForm, ...submitProps } = props;\n    return <Primitive.button type=\"submit\" {...submitProps} ref={forwardedRef} />;\n  }\n);\n\nFormSubmit.displayName = SUBMIT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ValidityStateKey = keyof ValidityState;\ntype SyncCustomMatcher = (value: string, formData: FormData) => boolean;\ntype AsyncCustomMatcher = (value: string, formData: FormData) => Promise<boolean>;\ntype CustomMatcher = SyncCustomMatcher | AsyncCustomMatcher;\ntype CustomMatcherEntry = { id: string; match: CustomMatcher };\ntype SyncCustomMatcherEntry = { id: string; match: SyncCustomMatcher };\ntype AsyncCustomMatcherEntry = { id: string; match: AsyncCustomMatcher };\ntype CustomMatcherArgs = [string, FormData];\n\nfunction validityStateToObject(validity: ValidityState) {\n  const object: any = {};\n  for (const key in validity) {\n    object[key] = validity[key as ValidityStateKey];\n  }\n  return object as Record<ValidityStateKey, boolean>;\n}\n\nfunction isHTMLElement(element: any): element is HTMLElement {\n  return element instanceof HTMLElement;\n}\n\nfunction isFormControl(element: any): element is { validity: ValidityState } {\n  return 'validity' in element;\n}\n\nfunction isInvalid(control: HTMLElement) {\n  return (\n    isFormControl(control) &&\n    (control.validity.valid === false || control.getAttribute('aria-invalid') === 'true')\n  );\n}\n\nfunction getFirstInvalidControl(form: HTMLFormElement): HTMLElement | undefined {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\n\nfunction isAsyncCustomMatcherEntry(\n  entry: CustomMatcherEntry,\n  args: CustomMatcherArgs\n): entry is AsyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'AsyncFunction' || returnsPromise(entry.match, args);\n}\n\nfunction isSyncCustomMatcherEntry(entry: CustomMatcherEntry): entry is SyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'Function';\n}\n\nfunction returnsPromise(func: Function, args: Array<unknown>) {\n  return func(...args) instanceof Promise;\n}\n\nfunction hasBuiltInError(validity: ValidityState) {\n  let error = false;\n  for (const validityKey in validity) {\n    const key = validityKey as ValidityStateKey;\n    if (key !== 'valid' && key !== 'customError' && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n  return error;\n}\n\nfunction getValidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return undefined;\n}\nfunction getInvalidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return undefined;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Form;\nconst Field = FormField;\nconst Label = FormLabel;\nconst Control = FormControl;\nconst Message = FormMessage;\nconst ValidityState = FormValidityState;\nconst Submit = FormSubmit;\n\nexport {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n};\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,OAAA,EAAAA,CAAA,KAAAA,OAAA;EAAAC,KAAA,EAAAA,CAAA,KAAAA,KAAA;EAAAC,IAAA,EAAAA,CAAA,KAAAA,IAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,SAAA,EAAAA,CAAA,KAAAA,SAAA;EAAAC,SAAA,EAAAA,CAAA,KAAAA,SAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,UAAA,EAAAA,CAAA,KAAAA,UAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,KAAA,EAAAA,CAAA,KAAAA,KAAA;EAAAC,OAAA,EAAAA,CAAA,KAAAA,OAAA;EAAAC,IAAA,EAAAA,CAAA,KAAAA,IAAA;EAAAC,MAAA,EAAAA,CAAA,KAAAA,MAAA;EAAAC,aAAA,EAAAA,CAAA,KAAAA,aAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAnB,WAAA;;;ACAA,IAAAoB,KAAA,GAAuBC,OAAA,CAAAC,OAAA;AACvB,IAAAC,gBAAA,GAAqCD,OAAA;AACrC,IAAAE,yBAAA,GAAgCF,OAAA;AAChC,IAAAG,oBAAA,GAAmCH,OAAA;AACnC,IAAAI,eAAA,GAAsBJ,OAAA;AACtB,IAAAK,kBAAA,GAAwCL,OAAA;AACxC,IAAAM,sBAAA,GAA0BN,OAAA;AA4JhB,IAAAO,kBAAA,GAAAP,OAAA;AAvJV,IAAM,CAACQ,iBAAA,EAAmBd,eAAe,QAAIS,oBAAA,CAAAM,kBAAA,EAAmB,MAAM;AAMtE,IAAMC,SAAA,GAAY;AAmBlB,IAAM,CAACC,kBAAA,EAAoBC,oBAAoB,IAC7CJ,iBAAA,CAA0CE,SAAS;AASrD,IAAM,CAACG,uBAAA,EAAyBC,yBAAyB,IACvDN,iBAAA,CAA+CE,SAAS;AAQ1D,IAAM5B,IAAA,GAAagB,KAAA,CAAAiB,UAAA,CACjB,CAACC,KAAA,EAA+BC,YAAA,KAAiB;EAC/C,MAAM;IAAEC,WAAA;IAAaC,mBAAA,GAAsBA,CAAA,KAAM,CAAC;IAAG,GAAGC;EAAU,IAAIJ,KAAA;EACtE,MAAMK,OAAA,GAAgBvB,KAAA,CAAAwB,MAAA,CAAwB,IAAI;EAClD,MAAMC,eAAA,OAAkBrB,yBAAA,CAAAsB,eAAA,EAAgBP,YAAA,EAAcI,OAAO;EAG7D,MAAM,CAACI,WAAA,EAAaC,cAAc,IAAU5B,KAAA,CAAA6B,QAAA,CAAsB,CAAC,CAAC;EACpE,MAAMC,gBAAA,GAAqE9B,KAAA,CAAA+B,WAAA,CACxEC,SAAA,IAAcL,WAAA,CAAYK,SAAS,GACpC,CAACL,WAAW,CACd;EACA,MAAMM,yBAAA,GACEjC,KAAA,CAAA+B,WAAA,CACJ,CAACC,SAAA,EAAWE,QAAA,KACVN,cAAA,CAAgBO,eAAA,KAAqB;IACnC,GAAGA,eAAA;IACH,CAACH,SAAS,GAAG;MAAE,IAAIG,eAAA,CAAgBH,SAAS,KAAK,CAAC;MAAI,GAAGE;IAAS;EACpE,EAAE,GACJ,EACF;EACF,MAAME,0BAAA,GACEpC,KAAA,CAAA+B,WAAA,CAAaC,SAAA,IAAc;IAC/BJ,cAAA,CAAgBO,eAAA,KAAqB;MAAE,GAAGA,eAAA;MAAiB,CAACH,SAAS,GAAG;IAAU,EAAE;IACpFK,kBAAA,CAAoBC,mBAAA,KAAyB;MAAE,GAAGA,mBAAA;MAAqB,CAACN,SAAS,GAAG,CAAC;IAAE,EAAE;EAC3F,GAAG,EAAE;EAGP,MAAM,CAACO,uBAAA,EAAyBC,0BAA0B,IAClDxC,KAAA,CAAA6B,QAAA,CAAkC,CAAC,CAAC;EAC5C,MAAMY,4BAAA,GACEzC,KAAA,CAAA+B,WAAA,CACHC,SAAA,IAAcO,uBAAA,CAAwBP,SAAS,KAAK,EAAC,EACtD,CAACO,uBAAuB,CAC1B;EACF,MAAMG,2BAAA,GACE1C,KAAA,CAAA+B,WAAA,CAAY,CAACC,SAAA,EAAWW,YAAA,KAAiB;IAC7CH,0BAAA,CAA4BI,2BAAA,KAAiC;MAC3D,GAAGA,2BAAA;MACH,CAACZ,SAAS,GAAG,CAAC,IAAIY,2BAAA,CAA4BZ,SAAS,KAAK,EAAC,GAAIW,YAAY;IAC/E,EAAE;EACJ,GAAG,EAAE;EACP,MAAME,8BAAA,GACE7C,KAAA,CAAA+B,WAAA,CAAY,CAACC,SAAA,EAAWc,cAAA,KAAmB;IAC/CN,0BAAA,CAA4BI,2BAAA,KAAiC;MAC3D,GAAGA,2BAAA;MACH,CAACZ,SAAS,IAAIY,2BAAA,CAA4BZ,SAAS,KAAK,EAAC,EAAGe,MAAA,CACzDJ,YAAA,IAAiBA,YAAA,CAAaK,EAAA,KAAOF,cACxC;IACF,EAAE;EACJ,GAAG,EAAE;EAGP,MAAM,CAACG,eAAA,EAAiBZ,kBAAkB,IAAUrC,KAAA,CAAA6B,QAAA,CAA0B,CAAC,CAAC;EAChF,MAAMqB,oBAAA,GAA6ElD,KAAA,CAAA+B,WAAA,CAChFC,SAAA,IAAciB,eAAA,CAAgBjB,SAAS,KAAK,CAAC,GAC9C,CAACiB,eAAe,CAClB;EACA,MAAME,6BAAA,GACEnD,KAAA,CAAA+B,WAAA,CAAY,CAACC,SAAA,EAAWoB,YAAA,KAAiB;IAC7Cf,kBAAA,CAAoBC,mBAAA,KAAyB;MAC3C,GAAGA,mBAAA;MACH,CAACN,SAAS,GAAG;QAAE,IAAIM,mBAAA,CAAoBN,SAAS,KAAK,CAAC;QAAI,GAAGoB;MAAa;IAC5E,EAAE;EACJ,GAAG,EAAE;EAGP,MAAM,CAACC,aAAA,EAAeC,gBAAgB,IAAUtD,KAAA,CAAA6B,QAAA,CAAwB,CAAC,CAAC;EAC1E,MAAM0B,uBAAA,GACEvD,KAAA,CAAA+B,WAAA,CAAY,CAACC,SAAA,EAAWgB,EAAA,KAAO;IACnCM,gBAAA,CAAkBE,iBAAA,IAAsB;MACtC,MAAMC,mBAAA,GAAsB,IAAIC,GAAA,CAAIF,iBAAA,CAAkBxB,SAAS,CAAC,EAAE2B,GAAA,CAAIX,EAAE;MACxE,OAAO;QAAE,GAAGQ,iBAAA;QAAmB,CAACxB,SAAS,GAAGyB;MAAoB;IAClE,CAAC;EACH,GAAG,EAAE;EACP,MAAMG,0BAAA,GACE5D,KAAA,CAAA+B,WAAA,CAAY,CAACC,SAAA,EAAWgB,EAAA,KAAO;IACnCM,gBAAA,CAAkBE,iBAAA,IAAsB;MACtC,MAAMC,mBAAA,GAAsB,IAAIC,GAAA,CAAIF,iBAAA,CAAkBxB,SAAS,CAAC;MAChEyB,mBAAA,CAAoBI,MAAA,CAAOb,EAAE;MAC7B,OAAO;QAAE,GAAGQ,iBAAA;QAAmB,CAACxB,SAAS,GAAGyB;MAAoB;IAClE,CAAC;EACH,GAAG,EAAE;EACP,MAAMK,mBAAA,GACE9D,KAAA,CAAA+B,WAAA,CACHC,SAAA,IAAc+B,KAAA,CAAMC,IAAA,CAAKX,aAAA,CAAcrB,SAAS,KAAK,EAAE,EAAEiC,IAAA,CAAK,GAAG,KAAK,QACvE,CAACZ,aAAa,CAChB;EAEF,OACE,mBAAA5C,kBAAA,CAAAyD,GAAA,EAACrD,kBAAA;IACCsD,KAAA,EAAO/C,WAAA;IACPU,gBAAA;IACAsC,qBAAA,EAAuBnC,yBAAA;IACvBQ,4BAAA;IACA4B,4BAAA,EAA8B3B,2BAAA;IAC9B4B,+BAAA,EAAiCzB,8BAAA;IACjCK,oBAAA;IACAqB,yBAAA,EAA2BpB,6BAAA;IAC3BqB,sBAAA,EAAwBpC,0BAAA;IAExBqC,QAAA,qBAAAhE,kBAAA,CAAAyD,GAAA,EAACnD,uBAAA;MACCoD,KAAA,EAAO/C,WAAA;MACPsD,mBAAA,EAAqBnB,uBAAA;MACrBoB,sBAAA,EAAwBf,0BAAA;MACxBE,mBAAA;MAEAW,QAAA,qBAAAhE,kBAAA,CAAAyD,GAAA,EAAC1D,sBAAA,CAAAoE,SAAA,CAAUC,IAAA,EAAV;QACE,GAAGvD,SAAA;QACJwD,GAAA,EAAKrD,eAAA;QAELsD,SAAA,MAAW5E,gBAAA,CAAA6E,oBAAA,EAAqB9D,KAAA,CAAM6D,SAAA,EAAYE,KAAA,IAAU;UAC1D,MAAMC,mBAAA,GAAsBC,sBAAA,CAAuBF,KAAA,CAAMG,aAAa;UACtE,IAAIF,mBAAA,KAAwBD,KAAA,CAAMI,MAAA,EAAQH,mBAAA,CAAoBI,KAAA,CAAM;UAGpEL,KAAA,CAAMM,cAAA,CAAe;QACvB,CAAC;QAEDC,QAAA,MAAUrF,gBAAA,CAAA6E,oBAAA,EAAqB9D,KAAA,CAAMsE,QAAA,EAAUnE,mBAAA,EAAqB;UAClEoE,wBAAA,EAA0B;QAC5B,CAAC;QAEDC,OAAA,MAASvF,gBAAA,CAAA6E,oBAAA,EAAqB9D,KAAA,CAAMwE,OAAA,EAASrE,mBAAmB;MAAA,CAClE;IAAA,CACF;EAAA,CACF;AAEJ,CACF;AAEArC,IAAA,CAAK2G,WAAA,GAAc/E,SAAA;AAMnB,IAAMgF,UAAA,GAAa;AAOnB,IAAM,CAACC,iBAAA,EAAmBC,mBAAmB,IAC3CpF,iBAAA,CAAyCkF,UAAU;AASrD,IAAM1G,SAAA,GAAkBc,KAAA,CAAAiB,UAAA,CACtB,CAACC,KAAA,EAAoCC,YAAA,KAAiB;EACpD,MAAM;IAAEC,WAAA;IAAa2E,IAAA;IAAMC,aAAA,GAAgB;IAAO,GAAGC;EAAW,IAAI/E,KAAA;EACpE,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqB8E,UAAA,EAAYxE,WAAW;EACtE,MAAMc,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiBiE,IAAI;EACxD,MAAM/C,EAAA,OAAK1C,eAAA,CAAA6F,KAAA,EAAM;EAEjB,OACE,mBAAA1F,kBAAA,CAAAyD,GAAA,EAAC2B,iBAAA;IAAkB1B,KAAA,EAAO/C,WAAA;IAAa4B,EAAA;IAAQ+C,IAAA;IAAYC,aAAA;IACzDvB,QAAA,qBAAAhE,kBAAA,CAAAyD,GAAA,EAAC1D,sBAAA,CAAAoE,SAAA,CAAUwB,GAAA,EAAV;MACC,cAAYC,iBAAA,CAAkBnE,QAAA,EAAU8D,aAAa;MACrD,gBAAcM,mBAAA,CAAoBpE,QAAA,EAAU8D,aAAa;MACxD,GAAGC,UAAA;MACJnB,GAAA,EAAK3D;IAAA,CACP;EAAA,CACF;AAEJ,CACF;AAEAjC,SAAA,CAAUyG,WAAA,GAAcC,UAAA;AAMxB,IAAMW,UAAA,GAAa;AAMnB,IAAMpH,SAAA,GAAkBa,KAAA,CAAAiB,UAAA,CACtB,CAACC,KAAA,EAAoCC,YAAA,KAAiB;EACpD,MAAM;IAAEC,WAAA;IAAa,GAAGoF;EAAW,IAAItF,KAAA;EACvC,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqByF,UAAA,EAAYnF,WAAW;EACtE,MAAMqF,YAAA,GAAeX,mBAAA,CAAoBS,UAAA,EAAYnF,WAAW;EAChE,MAAMsF,OAAA,GAAUF,UAAA,CAAWE,OAAA,IAAWD,YAAA,CAAazD,EAAA;EACnD,MAAMd,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiB2E,YAAA,CAAaV,IAAI;EAErE,OACE,mBAAAtF,kBAAA,CAAAyD,GAAA,EAAC3D,kBAAA,CAAAhB,KAAA;IACC,cAAY8G,iBAAA,CAAkBnE,QAAA,EAAUuE,YAAA,CAAaT,aAAa;IAClE,gBAAcM,mBAAA,CAAoBpE,QAAA,EAAUuE,YAAA,CAAaT,aAAa;IACrE,GAAGQ,UAAA;IACJ1B,GAAA,EAAK3D,YAAA;IACLuF;EAAA,CACF;AAEJ,CACF;AAEAvH,SAAA,CAAUwG,WAAA,GAAcY,UAAA;AAMxB,IAAMI,YAAA,GAAe;AAMrB,IAAM1H,WAAA,GAAoBe,KAAA,CAAAiB,UAAA,CACxB,CAACC,KAAA,EAAsCC,YAAA,KAAiB;EACtD,MAAM;IAAEC,WAAA;IAAa,GAAGwF;EAAa,IAAI1F,KAAA;EAEzC,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqB6F,YAAA,EAAcvF,WAAW;EACxE,MAAMqF,YAAA,GAAeX,mBAAA,CAAoBa,YAAA,EAAcvF,WAAW;EAClE,MAAMyF,sBAAA,GAAyB7F,yBAAA,CAA0B2F,YAAA,EAAcvF,WAAW;EAElF,MAAM0D,GAAA,GAAY9E,KAAA,CAAAwB,MAAA,CAA2B,IAAI;EACjD,MAAMsF,WAAA,OAAc1G,yBAAA,CAAAsB,eAAA,EAAgBP,YAAA,EAAc2D,GAAG;EACrD,MAAMiB,IAAA,GAAOa,YAAA,CAAab,IAAA,IAAQU,YAAA,CAAaV,IAAA;EAC/C,MAAM/C,EAAA,GAAK4D,YAAA,CAAa5D,EAAA,IAAMyD,YAAA,CAAazD,EAAA;EAC3C,MAAM+D,oBAAA,GAAuBb,iBAAA,CAAkBzD,4BAAA,CAA6BsD,IAAI;EAEhF,MAAM;IAAE3B,qBAAA;IAAuBG,yBAAA;IAA2BC;EAAuB,IAC/E0B,iBAAA;EACF,MAAMc,qBAAA,GAA8BhH,KAAA,CAAA+B,WAAA,CAClC,MAAOkF,OAAA,IAAgC;IAIrC,IAAIC,eAAA,CAAgBD,OAAA,CAAQ/E,QAAQ,GAAG;MACrC,MAAMiF,gBAAA,GAAkBC,qBAAA,CAAsBH,OAAA,CAAQ/E,QAAQ;MAC9DkC,qBAAA,CAAsB2B,IAAA,EAAMoB,gBAAe;MAC3C;IACF;IAKA,MAAME,QAAA,GAAWJ,OAAA,CAAQpC,IAAA,GAAO,IAAIyC,QAAA,CAASL,OAAA,CAAQpC,IAAI,IAAI,IAAIyC,QAAA,CAAS;IAC1E,MAAMC,WAAA,GAAiC,CAACN,OAAA,CAAQO,KAAA,EAAOH,QAAQ;IAK/D,MAAMI,wBAAA,GAA0D,EAAC;IACjE,MAAMC,wBAAA,GAA2D,EAAC;IAClEX,oBAAA,CAAqBY,OAAA,CAASC,kBAAA,IAAuB;MACnD,IAAIC,yBAAA,CAA0BD,kBAAA,EAAoBL,WAAW,GAAG;QAC9DG,wBAAA,CAAyBI,IAAA,CAAKF,kBAAkB;MAClD,WAAWG,wBAAA,CAAyBH,kBAAkB,GAAG;QACvDH,wBAAA,CAAyBK,IAAA,CAAKF,kBAAkB;MAClD;IACF,CAAC;IAKD,MAAMI,gBAAA,GAAmBP,wBAAA,CAAyBQ,GAAA,CAAI,CAAC;MAAEjF,EAAA,EAAAkF,GAAA;MAAIC;IAAM,MAAM;MACvE,OAAO,CAACD,GAAA,EAAIC,KAAA,CAAM,GAAGZ,WAAW,CAAC;IACnC,CAAC;IACD,MAAMa,oBAAA,GAAuBC,MAAA,CAAOC,WAAA,CAAYN,gBAAgB;IAChE,MAAMO,mBAAA,GAAsBF,MAAA,CAAOG,MAAA,CAAOJ,oBAAoB,EAAEK,IAAA,CAAKC,OAAO;IAC5E,MAAMC,cAAA,GAAiBJ,mBAAA;IACvBtB,OAAA,CAAQ2B,iBAAA,CAAkBD,cAAA,GAAiBE,uBAAA,GAA0B,EAAE;IACvE,MAAMC,eAAA,GAAkB1B,qBAAA,CAAsBH,OAAA,CAAQ/E,QAAQ;IAC9DkC,qBAAA,CAAsB2B,IAAA,EAAM+C,eAAe;IAC3CvE,yBAAA,CAA0BwB,IAAA,EAAMqC,oBAAoB;IAKpD,IAAI,CAACG,mBAAA,IAAuBb,wBAAA,CAAyBqB,MAAA,GAAS,GAAG;MAC/D,MAAMC,oBAAA,GAAuBtB,wBAAA,CAAyBO,GAAA,CAAI,CAAC;QAAEjF,EAAA,EAAAkF,GAAA;QAAIC;MAAM,MACrEA,KAAA,CAAM,GAAGZ,WAAW,EAAE0B,IAAA,CAAMC,OAAA,IAAY,CAAChB,GAAA,EAAIgB,OAAO,CAAU,CAChE;MACA,MAAMC,iBAAA,GAAoB,MAAMC,OAAA,CAAQC,GAAA,CAAIL,oBAAoB;MAChE,MAAMM,qBAAA,GAAwBjB,MAAA,CAAOC,WAAA,CAAYa,iBAAiB;MAClE,MAAMI,oBAAA,GAAuBlB,MAAA,CAAOG,MAAA,CAAOc,qBAAqB,EAAEb,IAAA,CAAKC,OAAO;MAC9E,MAAMc,eAAA,GAAiBD,oBAAA;MACvBtC,OAAA,CAAQ2B,iBAAA,CAAkBY,eAAA,GAAiBX,uBAAA,GAA0B,EAAE;MACvE,MAAM1B,gBAAA,GAAkBC,qBAAA,CAAsBH,OAAA,CAAQ/E,QAAQ;MAC9DkC,qBAAA,CAAsB2B,IAAA,EAAMoB,gBAAe;MAC3C5C,yBAAA,CAA0BwB,IAAA,EAAMuD,qBAAqB;IACvD;EACF,GACA,CAACvC,oBAAA,EAAsBhB,IAAA,EAAMxB,yBAAA,EAA2BH,qBAAqB,CAC/E;EAEMpE,KAAA,CAAAyJ,SAAA,CAAU,MAAM;IACpB,MAAMxC,OAAA,GAAUnC,GAAA,CAAI4E,OAAA;IACpB,IAAIzC,OAAA,EAAS;MAGX,MAAM0C,YAAA,GAAeA,CAAA,KAAM3C,qBAAA,CAAsBC,OAAO;MACxDA,OAAA,CAAQ2C,gBAAA,CAAiB,UAAUD,YAAY;MAC/C,OAAO,MAAM1C,OAAA,CAAQ4C,mBAAA,CAAoB,UAAUF,YAAY;IACjE;EACF,GAAG,CAAC3C,qBAAqB,CAAC;EAE1B,MAAM8C,oBAAA,GAA6B9J,KAAA,CAAA+B,WAAA,CAAY,MAAM;IACnD,MAAMkF,OAAA,GAAUnC,GAAA,CAAI4E,OAAA;IACpB,IAAIzC,OAAA,EAAS;MACXA,OAAA,CAAQ2B,iBAAA,CAAkB,EAAE;MAC5BpE,sBAAA,CAAuBuB,IAAI;IAC7B;EACF,GAAG,CAACA,IAAA,EAAMvB,sBAAsB,CAAC;EAG3BxE,KAAA,CAAAyJ,SAAA,CAAU,MAAM;IACpB,MAAM5E,IAAA,GAAOC,GAAA,CAAI4E,OAAA,EAAS7E,IAAA;IAC1B,IAAIA,IAAA,EAAM;MACRA,IAAA,CAAK+E,gBAAA,CAAiB,SAASE,oBAAoB;MACnD,OAAO,MAAMjF,IAAA,CAAKgF,mBAAA,CAAoB,SAASC,oBAAoB;IACrE;EACF,GAAG,CAACA,oBAAoB,CAAC;EAGnB9J,KAAA,CAAAyJ,SAAA,CAAU,MAAM;IACpB,MAAMxC,OAAA,GAAUnC,GAAA,CAAI4E,OAAA;IACpB,MAAM7E,IAAA,GAAOoC,OAAA,EAAS8C,OAAA,CAAQ,MAAM;IACpC,IAAIlF,IAAA,IAAQ4B,YAAA,CAAaT,aAAA,EAAe;MACtC,MAAMd,mBAAA,GAAsBC,sBAAA,CAAuBN,IAAI;MACvD,IAAIK,mBAAA,KAAwB+B,OAAA,EAAS/B,mBAAA,CAAoBI,KAAA,CAAM;IACjE;EACF,GAAG,CAACmB,YAAA,CAAaT,aAAa,CAAC;EAE/B,MAAM9D,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiBiE,IAAI;EAExD,OACE,mBAAAtF,kBAAA,CAAAyD,GAAA,EAAC1D,sBAAA,CAAAoE,SAAA,CAAUoF,KAAA,EAAV;IACC,cAAY3D,iBAAA,CAAkBnE,QAAA,EAAUuE,YAAA,CAAaT,aAAa;IAClE,gBAAcM,mBAAA,CAAoBpE,QAAA,EAAUuE,YAAA,CAAaT,aAAa;IACtE,gBAAcS,YAAA,CAAaT,aAAA,GAAgB,OAAO;IAClD,oBAAkBa,sBAAA,CAAuB/C,mBAAA,CAAoBiC,IAAI;IAEjEkE,KAAA,EAAM;IACL,GAAGrD,YAAA;IACJ9B,GAAA,EAAKgC,WAAA;IACL9D,EAAA;IACA+C,IAAA;IACAhB,SAAA,MAAW5E,gBAAA,CAAA6E,oBAAA,EAAqB9D,KAAA,CAAM6D,SAAA,EAAYE,KAAA,IAAU;MAC1D,MAAMgC,OAAA,GAAUhC,KAAA,CAAMG,aAAA;MACtB4B,qBAAA,CAAsBC,OAAO;IAC/B,CAAC;IACDiD,QAAA,MAAU/J,gBAAA,CAAA6E,oBAAA,EAAqB9D,KAAA,CAAMgJ,QAAA,EAAWC,MAAA,IAAW;MAEzDL,oBAAA,CAAqB;IACvB,CAAC;EAAA,CACH;AAEJ,CACF;AAEA7K,WAAA,CAAY0G,WAAA,GAAcgB,YAAA;AAoB1B,IAAMkC,uBAAA,GAA0B;AAChC,IAAMuB,yBAAA,GAAyE;EAC7EC,QAAA,EAAUxB,uBAAA;EACVyB,eAAA,EAAiB;EACjBC,aAAA,EAAe;EACfC,cAAA,EAAgB;EAChBC,YAAA,EAAc;EACdC,OAAA,EAAS;EACTC,QAAA,EAAU;EACVC,YAAA,EAAc;EACdC,KAAA,EAAO;EACPC,YAAA,EAAc;AAChB;AAEA,IAAMC,YAAA,GAAe;AASrB,IAAM3L,WAAA,GAAoBY,KAAA,CAAAiB,UAAA,CACxB,CAACC,KAAA,EAAsCC,YAAA,KAAiB;EACtD,MAAM;IAAEgH,KAAA;IAAOpC,IAAA,EAAMiF,QAAA;IAAU,GAAGC;EAAa,IAAI/J,KAAA;EACnD,MAAMuF,YAAA,GAAeX,mBAAA,CAAoBiF,YAAA,EAAc7J,KAAA,CAAME,WAAW;EACxE,MAAM2E,IAAA,GAAOiF,QAAA,IAAYvE,YAAA,CAAaV,IAAA;EAEtC,IAAIoC,KAAA,KAAU,QAAW;IACvB,OACE,mBAAA1H,kBAAA,CAAAyD,GAAA,EAACgH,eAAA;MAAiB,GAAGD,YAAA;MAAcnG,GAAA,EAAK3D,YAAA;MAAc4E,IAAA;MACnDtB,QAAA,EAAAvD,KAAA,CAAMuD,QAAA,IAAYoE;IAAA,CACrB;EAEJ,WAAW,OAAOV,KAAA,KAAU,YAAY;IACtC,OAAO,mBAAA1H,kBAAA,CAAAyD,GAAA,EAACiH,iBAAA;MAAkBhD,KAAA;MAAe,GAAG8C,YAAA;MAAcnG,GAAA,EAAK3D,YAAA;MAAc4E;IAAA,CAAY;EAC3F,OAAO;IACL,OAAO,mBAAAtF,kBAAA,CAAAyD,GAAA,EAACkH,kBAAA;MAAmBjD,KAAA;MAAe,GAAG8C,YAAA;MAAcnG,GAAA,EAAK3D,YAAA;MAAc4E;IAAA,CAAY;EAC5F;AACF,CACF;AAEA3G,WAAA,CAAYuG,WAAA,GAAcoF,YAAA;AAS1B,IAAMK,kBAAA,GAA2BpL,KAAA,CAAAiB,UAAA,CAC/B,CAACC,KAAA,EAA6CC,YAAA,KAAiB;EAC7D,MAAM;IAAEgH,KAAA;IAAOkD,UAAA,GAAa;IAAOtF,IAAA;IAAMtB,QAAA;IAAU,GAAGwG;EAAa,IAAI/J,KAAA;EACvE,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqBiK,YAAA,EAAcE,YAAA,CAAa7J,WAAW;EACrF,MAAMc,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiBiE,IAAI;EACxD,MAAMmD,OAAA,GAAUmC,UAAA,IAAcnJ,QAAA,GAAWiG,KAAK;EAE9C,IAAIe,OAAA,EAAS;IACX,OACE,mBAAAzI,kBAAA,CAAAyD,GAAA,EAACgH,eAAA;MAAgBpG,GAAA,EAAK3D,YAAA;MAAe,GAAG8J,YAAA;MAAclF,IAAA;MACnDtB,QAAA,EAAAA,QAAA,IAAY2F,yBAAA,CAA0BjC,KAAK;IAAA,CAC9C;EAEJ;EAEA,OAAO;AACT,CACF;AASA,IAAMgD,iBAAA,GAA0BnL,KAAA,CAAAiB,UAAA,CAC9B,CAACC,KAAA,EAA4CC,YAAA,KAAiB;EAC5D,MAAM;IAAEgH,KAAA;IAAOkD,UAAA,GAAa;IAAOtF,IAAA;IAAM/C,EAAA,EAAIsI,MAAA;IAAQ7G,QAAA;IAAU,GAAGwG;EAAa,IAAI/J,KAAA;EACnF,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqBiK,YAAA,EAAcE,YAAA,CAAa7J,WAAW;EACrF,MAAM0D,GAAA,GAAY9E,KAAA,CAAAwB,MAAA,CAAiC,IAAI;EACvD,MAAMsF,WAAA,OAAc1G,yBAAA,CAAAsB,eAAA,EAAgBP,YAAA,EAAc2D,GAAG;EACrD,MAAMyG,GAAA,OAAMjL,eAAA,CAAA6F,KAAA,EAAM;EAClB,MAAMnD,EAAA,GAAKsI,MAAA,IAAUC,GAAA;EAErB,MAAM3D,kBAAA,GAA2B5H,KAAA,CAAAwL,OAAA,CAAQ,OAAO;IAAExI,EAAA;IAAImF;EAAM,IAAI,CAACnF,EAAA,EAAImF,KAAK,CAAC;EAC3E,MAAM;IAAE9D,4BAAA;IAA8BC;EAAgC,IAAI4B,iBAAA;EACpElG,KAAA,CAAAyJ,SAAA,CAAU,MAAM;IACpBpF,4BAAA,CAA6B0B,IAAA,EAAM6B,kBAAkB;IACrD,OAAO,MAAMtD,+BAAA,CAAgCyB,IAAA,EAAM6B,kBAAA,CAAmB5E,EAAE;EAC1E,GAAG,CAAC4E,kBAAA,EAAoB7B,IAAA,EAAM1B,4BAAA,EAA8BC,+BAA+B,CAAC;EAE5F,MAAMpC,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiBiE,IAAI;EACxD,MAAM3C,YAAA,GAAe8C,iBAAA,CAAkBhD,oBAAA,CAAqB6C,IAAI;EAChE,MAAM0F,sBAAA,GAAyBrI,YAAA,CAAaJ,EAAE;EAC9C,MAAMkG,OAAA,GACJmC,UAAA,IAAenJ,QAAA,IAAY,CAACgF,eAAA,CAAgBhF,QAAQ,KAAKuJ,sBAAA;EAE3D,IAAIvC,OAAA,EAAS;IACX,OACE,mBAAAzI,kBAAA,CAAAyD,GAAA,EAACgH,eAAA;MAAgBlI,EAAA;MAAQ8B,GAAA,EAAKgC,WAAA;MAAc,GAAGmE,YAAA;MAAclF,IAAA;MAC1DtB,QAAA,EAAAA,QAAA,IAAYoE;IAAA,CACf;EAEJ;EAEA,OAAO;AACT,CACF;AAQA,IAAMqC,eAAA,GAAwBlL,KAAA,CAAAiB,UAAA,CAC5B,CAACC,KAAA,EAA0CC,YAAA,KAAiB;EAC1D,MAAM;IAAEC,WAAA;IAAa4B,EAAA,EAAIsI,MAAA;IAAQvF,IAAA;IAAM,GAAGkF;EAAa,IAAI/J,KAAA;EAC3D,MAAM2F,sBAAA,GAAyB7F,yBAAA,CAA0B+J,YAAA,EAAc3J,WAAW;EAClF,MAAMmK,GAAA,OAAMjL,eAAA,CAAA6F,KAAA,EAAM;EAClB,MAAMnD,EAAA,GAAKsI,MAAA,IAAUC,GAAA;EAErB,MAAM;IAAE7G,mBAAA;IAAqBC;EAAuB,IAAIkC,sBAAA;EAClD7G,KAAA,CAAAyJ,SAAA,CAAU,MAAM;IACpB/E,mBAAA,CAAoBqB,IAAA,EAAM/C,EAAE;IAC5B,OAAO,MAAM2B,sBAAA,CAAuBoB,IAAA,EAAM/C,EAAE;EAC9C,GAAG,CAAC+C,IAAA,EAAM/C,EAAA,EAAI0B,mBAAA,EAAqBC,sBAAsB,CAAC;EAE1D,OAAO,mBAAAlE,kBAAA,CAAAyD,GAAA,EAAC1D,sBAAA,CAAAoE,SAAA,CAAU8G,IAAA,EAAV;IAAe1I,EAAA;IAAS,GAAGiI,YAAA;IAAcnG,GAAA,EAAK3D;EAAA,CAAc;AACtE,CACF;AAMA,IAAMwK,mBAAA,GAAsB;AAO5B,IAAMrM,iBAAA,GAAqB4B,KAAA,IAA+C;EACxE,MAAM;IAAEE,WAAA;IAAa2E,IAAA,EAAMiF,QAAA;IAAUvG;EAAS,IAAIvD,KAAA;EAClD,MAAMgF,iBAAA,GAAoBpF,oBAAA,CAAqB6K,mBAAA,EAAqBvK,WAAW;EAC/E,MAAMqF,YAAA,GAAeX,mBAAA,CAAoB6F,mBAAA,EAAqBvK,WAAW;EACzE,MAAM2E,IAAA,GAAOiF,QAAA,IAAYvE,YAAA,CAAaV,IAAA;EACtC,MAAM7D,QAAA,GAAWgE,iBAAA,CAAkBpE,gBAAA,CAAiBiE,IAAI;EACxD,OAAO,mBAAAtF,kBAAA,CAAAyD,GAAA,EAAAzD,kBAAA,CAAAmL,QAAA;IAAGnH,QAAA,EAAAA,QAAA,CAASvC,QAAQ;EAAA,CAAE;AAC/B;AAEA5C,iBAAA,CAAkBqG,WAAA,GAAcgG,mBAAA;AAMhC,IAAME,WAAA,GAAc;AAMpB,IAAMxM,UAAA,GAAmBW,KAAA,CAAAiB,UAAA,CACvB,CAACC,KAAA,EAAqCC,YAAA,KAAiB;EACrD,MAAM;IAAEC,WAAA;IAAa,GAAG0K;EAAY,IAAI5K,KAAA;EACxC,OAAO,mBAAAT,kBAAA,CAAAyD,GAAA,EAAC1D,sBAAA,CAAAoE,SAAA,CAAUmH,MAAA,EAAV;IAAiBC,IAAA,EAAK;IAAU,GAAGF,WAAA;IAAahH,GAAA,EAAK3D;EAAA,CAAc;AAC7E,CACF;AAEA9B,UAAA,CAAWsG,WAAA,GAAckG,WAAA;AAazB,SAASzE,sBAAsBlF,QAAA,EAAyB;EACtD,MAAM+J,MAAA,GAAc,CAAC;EACrB,WAAWC,GAAA,IAAOhK,QAAA,EAAU;IAC1B+J,MAAA,CAAOC,GAAG,IAAIhK,QAAA,CAASgK,GAAuB;EAChD;EACA,OAAOD,MAAA;AACT;AAEA,SAASE,cAAcC,OAAA,EAAsC;EAC3D,OAAOA,OAAA,YAAmBC,WAAA;AAC5B;AAEA,SAASC,cAAcF,OAAA,EAAsD;EAC3E,OAAO,cAAcA,OAAA;AACvB;AAEA,SAASG,UAAUtF,OAAA,EAAsB;EACvC,OACEqF,aAAA,CAAcrF,OAAO,MACpBA,OAAA,CAAQ/E,QAAA,CAAS2I,KAAA,KAAU,SAAS5D,OAAA,CAAQuF,YAAA,CAAa,cAAc,MAAM;AAElF;AAEA,SAASrH,uBAAuBN,IAAA,EAAgD;EAC9E,MAAM4H,QAAA,GAAW5H,IAAA,CAAK4H,QAAA;EACtB,MAAM,CAACvH,mBAAmB,IAAInB,KAAA,CAAMC,IAAA,CAAKyI,QAAQ,EAAE1J,MAAA,CAAOoJ,aAAa,EAAEpJ,MAAA,CAAOwJ,SAAS;EACzF,OAAOrH,mBAAA;AACT;AAEA,SAAS2C,0BACP6E,KAAA,EACAC,IAAA,EACkC;EAClC,OAAOD,KAAA,CAAMvE,KAAA,CAAMyE,WAAA,CAAY7G,IAAA,KAAS,mBAAmB8G,cAAA,CAAeH,KAAA,CAAMvE,KAAA,EAAOwE,IAAI;AAC7F;AAEA,SAAS5E,yBAAyB2E,KAAA,EAA4D;EAC5F,OAAOA,KAAA,CAAMvE,KAAA,CAAMyE,WAAA,CAAY7G,IAAA,KAAS;AAC1C;AAEA,SAAS8G,eAAeC,IAAA,EAAgBH,IAAA,EAAsB;EAC5D,OAAOG,IAAA,CAAK,GAAGH,IAAI,aAAavD,OAAA;AAClC;AAEA,SAASlC,gBAAgBhF,QAAA,EAAyB;EAChD,IAAI6K,KAAA,GAAQ;EACZ,WAAWC,WAAA,IAAe9K,QAAA,EAAU;IAClC,MAAMgK,GAAA,GAAMc,WAAA;IACZ,IAAId,GAAA,KAAQ,WAAWA,GAAA,KAAQ,iBAAiBhK,QAAA,CAASgK,GAAG,GAAG;MAC7Da,KAAA,GAAQ;MACR;IACF;EACF;EACA,OAAOA,KAAA;AACT;AAEA,SAAS1G,kBAAkBnE,QAAA,EAAqC8D,aAAA,EAAwB;EACtF,IAAI9D,QAAA,EAAU2I,KAAA,KAAU,QAAQ,CAAC7E,aAAA,EAAe,OAAO;EACvD,OAAO;AACT;AACA,SAASM,oBAAoBpE,QAAA,EAAqC8D,aAAA,EAAwB;EACxF,IAAI9D,QAAA,EAAU2I,KAAA,KAAU,SAAS7E,aAAA,EAAe,OAAO;EACvD,OAAO;AACT;AAIA,IAAMvG,IAAA,GAAOT,IAAA;AACb,IAAMD,KAAA,GAAQG,SAAA;AACd,IAAMK,KAAA,GAAQJ,SAAA;AACd,IAAML,OAAA,GAAUG,WAAA;AAChB,IAAMO,OAAA,GAAUJ,WAAA;AAChB,IAAMO,aAAA,GAAgBL,iBAAA;AACtB,IAAMI,MAAA,GAASL,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}