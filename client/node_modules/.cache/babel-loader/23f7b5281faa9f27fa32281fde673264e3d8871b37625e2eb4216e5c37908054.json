{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/dismissable-layer/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Branch: () => Branch,\n  DismissableLayer: () => DismissableLayer,\n  DismissableLayerBranch: () => DismissableLayerBranch,\n  Root: () => Root\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/dismissable-layer/src/dismissable-layer.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_use_callback_ref = require(\"@radix-ui/react-use-callback-ref\");\nvar import_react_use_escape_keydown = require(\"@radix-ui/react-use-escape-keydown\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar DISMISSABLE_LAYER_NAME = \"DismissableLayer\";\nvar CONTEXT_UPDATE = \"dismissableLayer.update\";\nvar POINTER_DOWN_OUTSIDE = \"dismissableLayer.pointerDownOutside\";\nvar FOCUS_OUTSIDE = \"dismissableLayer.focusOutside\";\nvar originalBodyPointerEvents;\nvar DismissableLayerContext = React.createContext({\n  layers: /* @__PURE__ */new Set(),\n  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */new Set(),\n  branches: /* @__PURE__ */new Set()\n});\nvar DismissableLayer = React.forwardRef((props, forwardedRef) => {\n  const {\n    disableOutsidePointerEvents = false,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    onDismiss,\n    ...layerProps\n  } = props;\n  const context = React.useContext(DismissableLayerContext);\n  const [node, setNode] = React.useState(null);\n  const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n  const [, force] = React.useState({});\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node2 => setNode(node2));\n  const layers = Array.from(context.layers);\n  const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);\n  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);\n  const index = node ? layers.indexOf(node) : -1;\n  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n  const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n  const pointerDownOutside = usePointerDownOutside(event => {\n    const target = event.target;\n    const isPointerDownOnBranch = [...context.branches].some(branch => branch.contains(target));\n    if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n    onPointerDownOutside?.(event);\n    onInteractOutside?.(event);\n    if (!event.defaultPrevented) onDismiss?.();\n  }, ownerDocument);\n  const focusOutside = useFocusOutside(event => {\n    const target = event.target;\n    const isFocusInBranch = [...context.branches].some(branch => branch.contains(target));\n    if (isFocusInBranch) return;\n    onFocusOutside?.(event);\n    onInteractOutside?.(event);\n    if (!event.defaultPrevented) onDismiss?.();\n  }, ownerDocument);\n  (0, import_react_use_escape_keydown.useEscapeKeydown)(event => {\n    const isHighestLayer = index === context.layers.size - 1;\n    if (!isHighestLayer) return;\n    onEscapeKeyDown?.(event);\n    if (!event.defaultPrevented && onDismiss) {\n      event.preventDefault();\n      onDismiss();\n    }\n  }, ownerDocument);\n  React.useEffect(() => {\n    if (!node) return;\n    if (disableOutsidePointerEvents) {\n      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n        originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = \"none\";\n      }\n      context.layersWithOutsidePointerEventsDisabled.add(node);\n    }\n    context.layers.add(node);\n    dispatchUpdate();\n    return () => {\n      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {\n        ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n      }\n    };\n  }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n  React.useEffect(() => {\n    return () => {\n      if (!node) return;\n      context.layers.delete(node);\n      context.layersWithOutsidePointerEventsDisabled.delete(node);\n      dispatchUpdate();\n    };\n  }, [node, context]);\n  React.useEffect(() => {\n    const handleUpdate = () => force({});\n    document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n    return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    ...layerProps,\n    ref: composedRefs,\n    style: {\n      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? \"auto\" : \"none\" : void 0,\n      ...props.style\n    },\n    onFocusCapture: (0, import_primitive.composeEventHandlers)(props.onFocusCapture, focusOutside.onFocusCapture),\n    onBlurCapture: (0, import_primitive.composeEventHandlers)(props.onBlurCapture, focusOutside.onBlurCapture),\n    onPointerDownCapture: (0, import_primitive.composeEventHandlers)(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n  });\n});\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\nvar BRANCH_NAME = \"DismissableLayerBranch\";\nvar DismissableLayerBranch = React.forwardRef((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    ...props,\n    ref: composedRefs\n  });\n});\nDismissableLayerBranch.displayName = BRANCH_NAME;\nfunction usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {\n  const handlePointerDownOutside = (0, import_react_use_callback_ref.useCallbackRef)(onPointerDownOutside);\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n  React.useEffect(() => {\n    const handlePointerDown = event => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        let handleAndDispatchPointerDownOutsideEvent2 = function () {\n          handleAndDispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n            discrete: true\n          });\n        };\n        var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;\n        const eventDetail = {\n          originalEvent: event\n        };\n        if (event.pointerType === \"touch\") {\n          ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;\n          ownerDocument.addEventListener(\"click\", handleClickRef.current, {\n            once: true\n          });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent2();\n        }\n      } else {\n        ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener(\"pointerdown\", handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener(\"pointerdown\", handlePointerDown);\n      ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true\n  };\n}\nfunction useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {\n  const handleFocusOutside = (0, import_react_use_callback_ref.useCallbackRef)(onFocusOutside);\n  const isFocusInsideReactTreeRef = React.useRef(false);\n  React.useEffect(() => {\n    const handleFocus = event => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false\n        });\n      }\n    };\n    ownerDocument.addEventListener(\"focusin\", handleFocus);\n    return () => ownerDocument.removeEventListener(\"focusin\", handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n  return {\n    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,\n    onBlurCapture: () => isFocusInsideReactTreeRef.current = false\n  };\n}\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\nfunction handleAndDispatchCustomEvent(name, handler, detail, {\n  discrete\n}) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, {\n    bubbles: false,\n    cancelable: true,\n    detail\n  });\n  if (handler) target.addEventListener(name, handler, {\n    once: true\n  });\n  if (discrete) {\n    (0, import_react_primitive.dispatchDiscreteCustomEvent)(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\nvar Root = DismissableLayer;\nvar Branch = DismissableLayerBranch;","map":{"version":3,"names":["src_exports","__export","Branch","DismissableLayer","DismissableLayerBranch","Root","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_primitive","import_react_compose_refs","import_react_use_callback_ref","import_react_use_escape_keydown","import_jsx_runtime","DISMISSABLE_LAYER_NAME","CONTEXT_UPDATE","POINTER_DOWN_OUTSIDE","FOCUS_OUTSIDE","originalBodyPointerEvents","DismissableLayerContext","createContext","layers","Set","layersWithOutsidePointerEventsDisabled","branches","forwardRef","props","forwardedRef","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","layerProps","context","useContext","node","setNode","useState","ownerDocument","globalThis","document","force","composedRefs","useComposedRefs","node2","Array","from","highestLayerWithOutsidePointerEventsDisabled","slice","highestLayerWithOutsidePointerEventsDisabledIndex","indexOf","index","isBodyPointerEventsDisabled","size","isPointerEventsEnabled","pointerDownOutside","usePointerDownOutside","event","target","isPointerDownOnBranch","some","branch","contains","defaultPrevented","focusOutside","useFocusOutside","isFocusInBranch","useEscapeKeydown","isHighestLayer","preventDefault","useEffect","body","style","pointerEvents","add","dispatchUpdate","delete","handleUpdate","addEventListener","removeEventListener","jsx","Primitive","div","ref","onFocusCapture","composeEventHandlers","onBlurCapture","onPointerDownCapture","displayName","BRANCH_NAME","useRef","current","handlePointerDownOutside","useCallbackRef","isPointerInsideReactTreeRef","handleClickRef","handlePointerDown","handleAndDispatchPointerDownOutsideEvent2","handleAndDispatchPointerDownOutsideEvent","handleAndDispatchCustomEvent","eventDetail","discrete","originalEvent","pointerType","once","timerId","window","setTimeout","clearTimeout","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","CustomEvent","dispatchEvent","name","handler","detail","bubbles","cancelable","dispatchDiscreteCustomEvent"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-dismissable-layer/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-dismissable-layer/src/dismissable-layer.tsx"],"sourcesContent":["'use client';\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n} from './dismissable-layer';\nexport type { DismissableLayerProps } from './dismissable-layer';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      } else {\n        // We need to remove the event listener in case the outside click has been canceled.\n        // See: https://github.com/radix-ui/primitives/issues/2171\n        ownerDocument.removeEventListener('click', handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}