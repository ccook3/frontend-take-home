{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/hover-card/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Arrow: () => Arrow2,\n  Content: () => Content2,\n  HoverCard: () => HoverCard,\n  HoverCardArrow: () => HoverCardArrow,\n  HoverCardContent: () => HoverCardContent,\n  HoverCardPortal: () => HoverCardPortal,\n  HoverCardTrigger: () => HoverCardTrigger,\n  Portal: () => Portal,\n  Root: () => Root2,\n  Trigger: () => Trigger,\n  createHoverCardScope: () => createHoverCardScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/hover-card/src/hover-card.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar PopperPrimitive = __toESM(require(\"@radix-ui/react-popper\"));\nvar import_react_popper = require(\"@radix-ui/react-popper\");\nvar import_react_portal = require(\"@radix-ui/react-portal\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_dismissable_layer = require(\"@radix-ui/react-dismissable-layer\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar originalBodyUserSelect;\nvar HOVERCARD_NAME = \"HoverCard\";\nvar [createHoverCardContext, createHoverCardScope] = (0, import_react_context.createContextScope)(HOVERCARD_NAME, [import_react_popper.createPopperScope]);\nvar usePopperScope = (0, import_react_popper.createPopperScope)();\nvar [HoverCardProvider, useHoverCardContext] = createHoverCardContext(HOVERCARD_NAME);\nvar HoverCard = props => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(HoverCardProvider, {\n    scope: __scopeHoverCard,\n    open,\n    onOpenChange: setOpen,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    onDismiss: handleDismiss,\n    hasSelectionRef,\n    isPointerDownOnContentRef,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Root, {\n      ...popperScope,\n      children\n    })\n  });\n};\nHoverCard.displayName = HOVERCARD_NAME;\nvar TRIGGER_NAME = \"HoverCardTrigger\";\nvar HoverCardTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    ...triggerProps\n  } = props;\n  const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.a, {\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      ...triggerProps,\n      ref: forwardedRef,\n      onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, excludeTouch(context.onOpen)),\n      onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, excludeTouch(context.onClose)),\n      onFocus: (0, import_primitive.composeEventHandlers)(props.onFocus, context.onOpen),\n      onBlur: (0, import_primitive.composeEventHandlers)(props.onBlur, context.onClose),\n      onTouchStart: (0, import_primitive.composeEventHandlers)(props.onTouchStart, event => event.preventDefault())\n    })\n  });\n});\nHoverCardTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"HoverCardPortal\";\nvar [PortalProvider, usePortalContext] = createHoverCardContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar HoverCardPortal = props => {\n  const {\n    __scopeHoverCard,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PortalProvider, {\n    scope: __scopeHoverCard,\n    forceMount,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_portal.Portal, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\nHoverCardPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"HoverCardContent\";\nvar HoverCardContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(HoverCardContentImpl, {\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      ...contentProps,\n      onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, excludeTouch(context.onOpen)),\n      onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, excludeTouch(context.onClose)),\n      ref: forwardedRef\n    })\n  });\n});\nHoverCardContent.displayName = CONTENT_NAME;\nvar HoverCardContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n      body.style.userSelect = \"none\";\n      body.style.webkitUserSelect = \"none\";\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== \"\";\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n      document.addEventListener(\"pointerup\", handlePointerUp);\n      return () => {\n        document.removeEventListener(\"pointerup\", handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach(tabbable => tabbable.setAttribute(\"tabindex\", \"-1\"));\n    }\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_dismissable_layer.DismissableLayer, {\n    asChild: true,\n    disableOutsidePointerEvents: false,\n    onInteractOutside,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside: (0, import_primitive.composeEventHandlers)(onFocusOutside, event => {\n      event.preventDefault();\n    }),\n    onDismiss: context.onDismiss,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Content, {\n      ...popperScope,\n      ...contentProps,\n      onPointerDown: (0, import_primitive.composeEventHandlers)(contentProps.onPointerDown, event => {\n        if (event.currentTarget.contains(event.target)) {\n          setContainSelection(true);\n        }\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = true;\n      }),\n      ref: composedRefs,\n      style: {\n        ...contentProps.style,\n        userSelect: containSelection ? \"text\" : void 0,\n        // Safari requires prefix\n        WebkitUserSelect: containSelection ? \"text\" : void 0,\n        // re-namespace exposed content custom properties\n        ...{\n          \"--radix-hover-card-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n          \"--radix-hover-card-content-available-width\": \"var(--radix-popper-available-width)\",\n          \"--radix-hover-card-content-available-height\": \"var(--radix-popper-available-height)\",\n          \"--radix-hover-card-trigger-width\": \"var(--radix-popper-anchor-width)\",\n          \"--radix-hover-card-trigger-height\": \"var(--radix-popper-anchor-height)\"\n        }\n      }\n    })\n  });\n});\nvar ARROW_NAME = \"HoverCardArrow\";\nvar HoverCardArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopperPrimitive.Arrow, {\n    ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nHoverCardArrow.displayName = ARROW_NAME;\nfunction excludeTouch(eventHandler) {\n  return event => event.pointerType === \"touch\" ? void 0 : eventHandler();\n}\nfunction getTabbableNodes(container) {\n  const nodes = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n  return nodes;\n}\nvar Root2 = HoverCard;\nvar Trigger = HoverCardTrigger;\nvar Portal = HoverCardPortal;\nvar Content2 = HoverCardContent;\nvar Arrow2 = HoverCardArrow;","map":{"version":3,"names":["src_exports","__export","Arrow","Arrow2","Content","Content2","HoverCard","HoverCardArrow","HoverCardContent","HoverCardPortal","HoverCardTrigger","Portal","Root","Root2","Trigger","createHoverCardScope","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_context","import_react_use_controllable_state","import_react_compose_refs","PopperPrimitive","import_react_popper","import_react_portal","import_react_presence","import_react_primitive","import_react_dismissable_layer","import_jsx_runtime","originalBodyUserSelect","HOVERCARD_NAME","createHoverCardContext","createContextScope","createPopperScope","usePopperScope","HoverCardProvider","useHoverCardContext","props","__scopeHoverCard","children","open","openProp","defaultOpen","onOpenChange","openDelay","closeDelay","popperScope","openTimerRef","useRef","closeTimerRef","hasSelectionRef","isPointerDownOnContentRef","setOpen","useControllableState","prop","defaultProp","onChange","handleOpen","useCallback","clearTimeout","current","window","setTimeout","handleClose","handleDismiss","useEffect","jsx","scope","onOpen","onClose","onDismiss","displayName","TRIGGER_NAME","forwardRef","forwardedRef","triggerProps","context","Anchor","asChild","Primitive","a","ref","onPointerEnter","composeEventHandlers","excludeTouch","onPointerLeave","onFocus","onBlur","onTouchStart","event","preventDefault","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","container","Presence","present","CONTENT_NAME","portalContext","contentProps","HoverCardContentImpl","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","composedRefs","useComposedRefs","containSelection","setContainSelection","useState","body","document","style","userSelect","webkitUserSelect","handlePointerUp","hasSelection","getSelection","toString","addEventListener","removeEventListener","tabbables","getTabbableNodes","forEach","tabbable","setAttribute","DismissableLayer","disableOutsidePointerEvents","onPointerDown","currentTarget","contains","target","WebkitUserSelect","ARROW_NAME","arrowProps","eventHandler","pointerType","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","tabIndex","FILTER_ACCEPT","FILTER_SKIP","nextNode","push","currentNode"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-hover-card/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-hover-card/src/hover-card.tsx"],"sourcesContent":["'use client';\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n} from './hover-card';\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n} from './hover-card';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nlet originalBodyUserSelect: string;\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype ScopedProps<P> = P & { __scopeHoverCard?: Scope };\nconst [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n  onDismiss(): void;\n  hasSelectionRef: React.MutableRefObject<boolean>;\n  isPointerDownOnContentRef: React.MutableRefObject<boolean>;\n};\n\nconst [HoverCardProvider, useHoverCardContext] =\n  createHoverCardContext<HoverCardContextValue>(HOVERCARD_NAME);\n\ninterface HoverCardProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = (props: ScopedProps<HoverCardProps>) => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider\n      scope={__scopeHoverCard}\n      open={open}\n      onOpenChange={setOpen}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      onDismiss={handleDismiss}\n      hasSelectionRef={hasSelectionRef}\n      isPointerDownOnContentRef={isPointerDownOnContentRef}\n    >\n      <PopperPrimitive.Root {...popperScope}>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\n\ntype HoverCardTriggerElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface HoverCardTriggerProps extends PrimitiveLinkProps {}\n\nconst HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(\n  (props: ScopedProps<HoverCardTriggerProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...triggerProps } = props;\n    const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.a\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={forwardedRef}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          onFocus={composeEventHandlers(props.onFocus, context.onOpen)}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // prevent focus event on touch devices\n          onTouchStart={composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'HoverCardPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createHoverCardContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface HoverCardPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardPortal: React.FC<HoverCardPortalProps> = (\n  props: ScopedProps<HoverCardPortalProps>\n) => {\n  const { __scopeHoverCard, forceMount, children, container } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return (\n    <PortalProvider scope={__scopeHoverCard} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nHoverCardPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentElement = HoverCardContentImplElement;\ninterface HoverCardContentProps extends HoverCardContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(\n  (props: ScopedProps<HoverCardContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n    return (\n      <Presence present={forceMount || context.open}>\n        <HoverCardContentImpl\n          data-state={context.open ? 'open' : 'closed'}\n          {...contentProps}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype HoverCardContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface HoverCardContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  /**\n   * Event handler called when the focus moves outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  /**\n   * Event handler called when an interaction happens outside the `HoverCard`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst HoverCardContentImpl = React.forwardRef<\n  HoverCardContentImplElement,\n  HoverCardContentImplProps\n>((props: ScopedProps<HoverCardContentImplProps>, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef<HoverCardContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n\n      // Safari requires prefix\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n\n      body.style.userSelect = 'none';\n      body.style.webkitUserSelect = 'none';\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n\n        // Delay a frame to ensure we always access the latest selection\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== '';\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach((tabbable) => tabbable.setAttribute('tabindex', '-1'));\n    }\n  });\n\n  return (\n    <DismissableLayer\n      asChild\n      disableOutsidePointerEvents={false}\n      onInteractOutside={onInteractOutside}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onFocusOutside={composeEventHandlers(onFocusOutside, (event) => {\n        event.preventDefault();\n      })}\n      onDismiss={context.onDismiss}\n    >\n      <PopperPrimitive.Content\n        {...popperScope}\n        {...contentProps}\n        onPointerDown={composeEventHandlers(contentProps.onPointerDown, (event) => {\n          // Contain selection to current layer\n          if (event.currentTarget.contains(event.target as HTMLElement)) {\n            setContainSelection(true);\n          }\n          context.hasSelectionRef.current = false;\n          context.isPointerDownOnContentRef.current = true;\n        })}\n        ref={composedRefs}\n        style={{\n          ...contentProps.style,\n          userSelect: containSelection ? 'text' : undefined,\n          // Safari requires prefix\n          WebkitUserSelect: containSelection ? 'text' : undefined,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-hover-card-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-hover-card-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-hover-card-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-hover-card-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-hover-card-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    </DismissableLayer>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'HoverCardArrow';\n\ntype HoverCardArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface HoverCardArrowProps extends PopperArrowProps {}\n\nconst HoverCardArrow = React.forwardRef<HoverCardArrowElement, HoverCardArrowProps>(\n  (props: ScopedProps<HoverCardArrowProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nHoverCardArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\n/**\n * Returns a list of nodes that can be in the tab sequence.\n * @see: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n */\nfunction getTabbableNodes(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  return nodes;\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Portal = HoverCardPortal;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}