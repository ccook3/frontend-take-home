{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/toggle/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Root: () => Root,\n  Toggle: () => Toggle\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/toggle/src/toggle.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar NAME = \"Toggle\";\nvar Toggle = React.forwardRef((props, forwardedRef) => {\n  const {\n    pressed: pressedProp,\n    defaultPressed = false,\n    onPressedChange,\n    ...buttonProps\n  } = props;\n  const [pressed = false, setPressed] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n    type: \"button\",\n    \"aria-pressed\": pressed,\n    \"data-state\": pressed ? \"on\" : \"off\",\n    \"data-disabled\": props.disabled ? \"\" : void 0,\n    ...buttonProps,\n    ref: forwardedRef,\n    onClick: (0, import_primitive.composeEventHandlers)(props.onClick, () => {\n      if (!props.disabled) {\n        setPressed(!pressed);\n      }\n    })\n  });\n});\nToggle.displayName = NAME;\nvar Root = Toggle;","map":{"version":3,"names":["src_exports","__export","Root","Toggle","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_use_controllable_state","import_react_primitive","import_jsx_runtime","NAME","forwardRef","props","forwardedRef","pressed","pressedProp","defaultPressed","onPressedChange","buttonProps","setPressed","useControllableState","prop","onChange","defaultProp","jsx","Primitive","button","type","disabled","ref","onClick","composeEventHandlers","displayName"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-toggle/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-toggle/src/toggle.tsx"],"sourcesContent":["'use client';\nexport {\n  Toggle,\n  //\n  Root,\n} from './toggle';\nexport type { ToggleProps } from './toggle';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,IAAA,EAAAA,CAAA,KAAAA,IAAA;EAAAC,MAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAN,WAAA;;;ACAA,IAAAO,KAAA,GAAuBC,OAAA,CAAAC,OAAA;AACvB,IAAAC,gBAAA,GAAqCD,OAAA;AACrC,IAAAE,mCAAA,GAAqCF,OAAA;AACrC,IAAAG,sBAAA,GAA0BH,OAAA;AAqCtB,IAAAI,kBAAA,GAAAJ,OAAA;AA/BJ,IAAMK,IAAA,GAAO;AAqBb,IAAMX,MAAA,GAAeI,KAAA,CAAAQ,UAAA,CAAuC,CAACC,KAAA,EAAOC,YAAA,KAAiB;EACnF,MAAM;IAAEC,OAAA,EAASC,WAAA;IAAaC,cAAA,GAAiB;IAAOC,eAAA;IAAiB,GAAGC;EAAY,IAAIN,KAAA;EAE1F,MAAM,CAACE,OAAA,GAAU,OAAOK,UAAU,QAAIZ,mCAAA,CAAAa,oBAAA,EAAqB;IACzDC,IAAA,EAAMN,WAAA;IACNO,QAAA,EAAUL,eAAA;IACVM,WAAA,EAAaP;EACf,CAAC;EAED,OACE,mBAAAP,kBAAA,CAAAe,GAAA,EAAChB,sBAAA,CAAAiB,SAAA,CAAUC,MAAA,EAAV;IACCC,IAAA,EAAK;IACL,gBAAcb,OAAA;IACd,cAAYA,OAAA,GAAU,OAAO;IAC7B,iBAAeF,KAAA,CAAMgB,QAAA,GAAW,KAAK;IACpC,GAAGV,WAAA;IACJW,GAAA,EAAKhB,YAAA;IACLiB,OAAA,MAASxB,gBAAA,CAAAyB,oBAAA,EAAqBnB,KAAA,CAAMkB,OAAA,EAAS,MAAM;MACjD,IAAI,CAAClB,KAAA,CAAMgB,QAAA,EAAU;QACnBT,UAAA,CAAW,CAACL,OAAO;MACrB;IACF,CAAC;EAAA,CACH;AAEJ,CAAC;AAEDf,MAAA,CAAOiC,WAAA,GAActB,IAAA;AAIrB,IAAMZ,IAAA,GAAOC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}