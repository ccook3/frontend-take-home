{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/collapsible/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Collapsible: () => Collapsible,\n  CollapsibleContent: () => CollapsibleContent,\n  CollapsibleTrigger: () => CollapsibleTrigger,\n  Content: () => Content,\n  Root: () => Root,\n  Trigger: () => Trigger,\n  createCollapsibleScope: () => createCollapsibleScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/collapsible/src/collapsible.tsx\nvar React = __toESM(require(\"react\"));\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_react_use_layout_effect = require(\"@radix-ui/react-use-layout-effect\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar COLLAPSIBLE_NAME = \"Collapsible\";\nvar [createCollapsibleContext, createCollapsibleScope] = (0, import_react_context.createContextScope)(COLLAPSIBLE_NAME);\nvar [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);\nvar Collapsible = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    open: openProp,\n    defaultOpen,\n    disabled,\n    onOpenChange,\n    ...collapsibleProps\n  } = props;\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(CollapsibleProvider, {\n    scope: __scopeCollapsible,\n    disabled,\n    contentId: (0, import_react_id.useId)(),\n    open,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      \"data-state\": getState(open),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      ...collapsibleProps,\n      ref: forwardedRef\n    })\n  });\n});\nCollapsible.displayName = COLLAPSIBLE_NAME;\nvar TRIGGER_NAME = \"CollapsibleTrigger\";\nvar CollapsibleTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    ...triggerProps\n  } = props;\n  const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n    type: \"button\",\n    \"aria-controls\": context.contentId,\n    \"aria-expanded\": context.open || false,\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    disabled: context.disabled,\n    ...triggerProps,\n    ref: forwardedRef,\n    onClick: (0, import_primitive.composeEventHandlers)(props.onClick, context.onOpenToggle)\n  });\n});\nCollapsibleTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"CollapsibleContent\";\nvar CollapsibleContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || context.open,\n    children: ({\n      present\n    }) => /* @__PURE__ */(0, import_jsx_runtime.jsx)(CollapsibleContentImpl, {\n      ...contentProps,\n      ref: forwardedRef,\n      present\n    })\n  });\n});\nCollapsibleContent.displayName = CONTENT_NAME;\nvar CollapsibleContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeCollapsible,\n    present,\n    children,\n    ...contentProps\n  } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref);\n  const heightRef = React.useRef(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef(0);\n  const width = widthRef.current;\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef(void 0);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName\n      };\n      node.style.transitionDuration = \"0s\";\n      node.style.animationName = \"none\";\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n      setIsPresent(present);\n    }\n  }, [context.open, present]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    id: context.contentId,\n    hidden: !isOpen,\n    ...contentProps,\n    ref: composedRefs,\n    style: {\n      [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,\n      [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0,\n      ...props.style\n    },\n    children: isOpen && children\n  });\n});\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root = Collapsible;\nvar Trigger = CollapsibleTrigger;\nvar Content = CollapsibleContent;","map":{"version":3,"names":["src_exports","__export","Collapsible","CollapsibleContent","CollapsibleTrigger","Content","Root","Trigger","createCollapsibleScope","module","exports","__toCommonJS","React","__toESM","require","import_primitive","import_react_context","import_react_use_controllable_state","import_react_use_layout_effect","import_react_compose_refs","import_react_primitive","import_react_presence","import_react_id","import_jsx_runtime","COLLAPSIBLE_NAME","createCollapsibleContext","createContextScope","CollapsibleProvider","useCollapsibleContext","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","useControllableState","prop","defaultProp","onChange","jsx","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","children","Primitive","div","getState","ref","displayName","TRIGGER_NAME","triggerProps","context","button","type","onClick","composeEventHandlers","CONTENT_NAME","forceMount","contentProps","Presence","present","CollapsibleContentImpl","isPresent","setIsPresent","useState","useRef","composedRefs","useComposedRefs","heightRef","height","current","widthRef","width","isOpen","isMountAnimationPreventedRef","originalStylesRef","useEffect","rAF","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","node","transitionDuration","style","animationName","rect","getBoundingClientRect","id","hidden"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-collapsible/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-collapsible/src/collapsible.tsx"],"sourcesContent":["'use client';\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n} from './collapsible';\nexport type {\n  CollapsibleProps,\n  CollapsibleTriggerProps,\n  CollapsibleContentProps,\n} from './collapsible';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>(undefined);\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationName = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}