{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/use-callback-ref/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  useCallbackRef: () => useCallbackRef\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/use-callback-ref/src/useCallbackRef.tsx\nvar React = __toESM(require(\"react\"));\nfunction useCallbackRef(callback) {\n  const callbackRef = React.useRef(callback);\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return React.useMemo(() => (...args) => callbackRef.current?.(...args), []);\n}","map":{"version":3,"names":["src_exports","__export","useCallbackRef","module","exports","__toCommonJS","React","__toESM","require","callback","callbackRef","useRef","useEffect","current","useMemo","args"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-use-callback-ref/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-use-callback-ref/src/useCallbackRef.tsx"],"sourcesContent":["export { useCallbackRef } from './useCallbackRef';\n","import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,cAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;;;ACAA,IAAAM,KAAA,GAAuBC,OAAA,CAAAC,OAAA;AAMvB,SAASN,eAAkDO,QAAA,EAA4B;EACrF,MAAMC,WAAA,GAAoBJ,KAAA,CAAAK,MAAA,CAAOF,QAAQ;EAEnCH,KAAA,CAAAM,SAAA,CAAU,MAAM;IACpBF,WAAA,CAAYG,OAAA,GAAUJ,QAAA;EACxB,CAAC;EAGD,OAAaH,KAAA,CAAAQ,OAAA,CAAQ,MAAO,IAAIC,IAAA,KAASL,WAAA,CAAYG,OAAA,GAAU,GAAGE,IAAI,GAAS,EAAE;AACnF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}