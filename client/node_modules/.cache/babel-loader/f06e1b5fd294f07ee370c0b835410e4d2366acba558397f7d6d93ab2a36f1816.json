{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/scroll-area/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Corner: () => Corner,\n  Root: () => Root,\n  ScrollArea: () => ScrollArea,\n  ScrollAreaCorner: () => ScrollAreaCorner,\n  ScrollAreaScrollbar: () => ScrollAreaScrollbar,\n  ScrollAreaThumb: () => ScrollAreaThumb,\n  ScrollAreaViewport: () => ScrollAreaViewport,\n  Scrollbar: () => Scrollbar,\n  Thumb: () => Thumb,\n  Viewport: () => Viewport,\n  createScrollAreaScope: () => createScrollAreaScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/scroll-area/src/scroll-area.tsx\nvar React2 = __toESM(require(\"react\"));\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_presence = require(\"@radix-ui/react-presence\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_use_callback_ref = require(\"@radix-ui/react-use-callback-ref\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\nvar import_react_use_layout_effect = require(\"@radix-ui/react-use-layout-effect\");\nvar import_number = require(\"@radix-ui/number\");\nvar import_primitive = require(\"@radix-ui/primitive\");\n\n// packages/react/scroll-area/src/use-state-machine.ts\nvar React = __toESM(require(\"react\"));\nfunction useStateMachine(initialState, machine) {\n  return React.useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState ?? state;\n  }, initialState);\n}\n\n// packages/react/scroll-area/src/scroll-area.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar SCROLL_AREA_NAME = \"ScrollArea\";\nvar [createScrollAreaContext, createScrollAreaScope] = (0, import_react_context.createContextScope)(SCROLL_AREA_NAME);\nvar [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);\nvar ScrollArea = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    type = \"hover\",\n    dir,\n    scrollHideDelay = 600,\n    ...scrollAreaProps\n  } = props;\n  const [scrollArea, setScrollArea] = React2.useState(null);\n  const [viewport, setViewport] = React2.useState(null);\n  const [content, setContent] = React2.useState(null);\n  const [scrollbarX, setScrollbarX] = React2.useState(null);\n  const [scrollbarY, setScrollbarY] = React2.useState(null);\n  const [cornerWidth, setCornerWidth] = React2.useState(0);\n  const [cornerHeight, setCornerHeight] = React2.useState(0);\n  const [scrollbarXEnabled, setScrollbarXEnabled] = React2.useState(false);\n  const [scrollbarYEnabled, setScrollbarYEnabled] = React2.useState(false);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setScrollArea(node));\n  const direction = (0, import_react_direction.useDirection)(dir);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaProvider, {\n    scope: __scopeScrollArea,\n    type,\n    dir: direction,\n    scrollHideDelay,\n    scrollArea,\n    viewport,\n    onViewportChange: setViewport,\n    content,\n    onContentChange: setContent,\n    scrollbarX,\n    onScrollbarXChange: setScrollbarX,\n    scrollbarXEnabled,\n    onScrollbarXEnabledChange: setScrollbarXEnabled,\n    scrollbarY,\n    onScrollbarYChange: setScrollbarY,\n    scrollbarYEnabled,\n    onScrollbarYEnabledChange: setScrollbarYEnabled,\n    onCornerWidthChange: setCornerWidth,\n    onCornerHeightChange: setCornerHeight,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      dir: direction,\n      ...scrollAreaProps,\n      ref: composedRefs,\n      style: {\n        position: \"relative\",\n        // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n        [\"--radix-scroll-area-corner-width\"]: cornerWidth + \"px\",\n        [\"--radix-scroll-area-corner-height\"]: cornerHeight + \"px\",\n        ...props.style\n      }\n    })\n  });\n});\nScrollArea.displayName = SCROLL_AREA_NAME;\nvar VIEWPORT_NAME = \"ScrollAreaViewport\";\nvar ScrollAreaViewport = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    children,\n    nonce,\n    ...viewportProps\n  } = props;\n  const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n  const ref = React2.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref, context.onViewportChange);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`\n      },\n      nonce\n    }), /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      \"data-radix-scroll-area-viewport\": \"\",\n      ...viewportProps,\n      ref: composedRefs,\n      style: {\n        /**\n         * We don't support `visible` because the intention is to have at least one scrollbar\n         * if this component is used and `visible` will behave like `auto` in that case\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n         *\n         * We don't handle `auto` because the intention is for the native implementation\n         * to be hidden if using this component. We just want to ensure the node is scrollable\n         * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n         * the browser from having to work out whether to render native scrollbars or not,\n         * we tell it to with the intention of hiding them in CSS.\n         */\n        overflowX: context.scrollbarXEnabled ? \"scroll\" : \"hidden\",\n        overflowY: context.scrollbarYEnabled ? \"scroll\" : \"hidden\",\n        ...props.style\n      },\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"div\", {\n        ref: context.onContentChange,\n        style: {\n          minWidth: \"100%\",\n          display: \"table\"\n        },\n        children\n      })\n    })]\n  });\n});\nScrollAreaViewport.displayName = VIEWPORT_NAME;\nvar SCROLLBAR_NAME = \"ScrollAreaScrollbar\";\nvar ScrollAreaScrollbar = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    onScrollbarXEnabledChange,\n    onScrollbarYEnabledChange\n  } = context;\n  const isHorizontal = props.orientation === \"horizontal\";\n  React2.useEffect(() => {\n    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n    return () => {\n      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n    };\n  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n  return context.type === \"hover\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarHover, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"scroll\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarScroll, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"auto\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarAuto, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"always\" ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarVisible, {\n    ...scrollbarProps,\n    ref: forwardedRef\n  }) : null;\n});\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\nvar ScrollAreaScrollbarHover = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React2.useState(false);\n  React2.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener(\"pointerenter\", handlePointerEnter);\n      scrollArea.addEventListener(\"pointerleave\", handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener(\"pointerenter\", handlePointerEnter);\n        scrollArea.removeEventListener(\"pointerleave\", handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarAuto, {\n      \"data-state\": visible ? \"visible\" : \"hidden\",\n      ...scrollbarProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ScrollAreaScrollbarScroll = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const debounceScrollEnd = useDebounceCallback(() => send(\"SCROLL_END\"), 100);\n  const [state, send] = useStateMachine(\"hidden\", {\n    hidden: {\n      SCROLL: \"scrolling\"\n    },\n    scrolling: {\n      SCROLL_END: \"idle\",\n      POINTER_ENTER: \"interacting\"\n    },\n    interacting: {\n      SCROLL: \"interacting\",\n      POINTER_LEAVE: \"idle\"\n    },\n    idle: {\n      HIDE: \"hidden\",\n      SCROLL: \"scrolling\",\n      POINTER_ENTER: \"interacting\"\n    }\n  });\n  React2.useEffect(() => {\n    if (state === \"idle\") {\n      const hideTimer = window.setTimeout(() => send(\"HIDE\"), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n  React2.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send(\"SCROLL\");\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || state !== \"hidden\",\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarVisible, {\n      \"data-state\": state === \"hidden\" ? \"hidden\" : \"visible\",\n      ...scrollbarProps,\n      ref: forwardedRef,\n      onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, () => send(\"POINTER_ENTER\")),\n      onPointerLeave: (0, import_primitive.composeEventHandlers)(props.onPointerLeave, () => send(\"POINTER_LEAVE\"))\n    })\n  });\n});\nvar ScrollAreaScrollbarAuto = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const [visible, setVisible] = React2.useState(false);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarVisible, {\n      \"data-state\": visible ? \"visible\" : \"hidden\",\n      ...scrollbarProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ScrollAreaScrollbarVisible = React2.forwardRef((props, forwardedRef) => {\n  const {\n    orientation = \"vertical\",\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React2.useRef(null);\n  const pointerOffsetRef = React2.useRef(0);\n  const [sizes, setSizes] = React2.useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => thumbRef.current = thumb,\n    onThumbPointerUp: () => pointerOffsetRef.current = 0,\n    onThumbPointerDown: pointerPos => pointerOffsetRef.current = pointerPos\n  };\n  function getScrollPosition(pointerPos, dir) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n  if (orientation === \"horizontal\") {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarX, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollLeft;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n          thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollLeft = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n        }\n      }\n    });\n  }\n  if (orientation === \"vertical\") {\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarY, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollTop;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n          thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollTop = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n      }\n    });\n  }\n  return null;\n});\nvar ScrollAreaScrollbarX = React2.forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref, context.onScrollbarXChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarImpl, {\n    \"data-orientation\": \"horizontal\",\n    ...scrollbarProps,\n    ref: composeRefs,\n    sizes,\n    style: {\n      bottom: 0,\n      left: context.dir === \"rtl\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      right: context.dir === \"ltr\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      [\"--radix-scroll-area-thumb-width\"]: getThumbSize(sizes) + \"px\",\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.x),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.x),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollLeft + event.deltaX;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollWidth,\n          viewport: context.viewport.offsetWidth,\n          scrollbar: {\n            size: ref.current.clientWidth,\n            paddingStart: toInt(computedStyle.paddingLeft),\n            paddingEnd: toInt(computedStyle.paddingRight)\n          }\n        });\n      }\n    }\n  });\n});\nvar ScrollAreaScrollbarY = React2.forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref, context.onScrollbarYChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaScrollbarImpl, {\n    \"data-orientation\": \"vertical\",\n    ...scrollbarProps,\n    ref: composeRefs,\n    sizes,\n    style: {\n      top: 0,\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: \"var(--radix-scroll-area-corner-height)\",\n      [\"--radix-scroll-area-thumb-height\"]: getThumbSize(sizes) + \"px\",\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.y),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.y),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollTop + event.deltaY;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollHeight,\n          viewport: context.viewport.offsetHeight,\n          scrollbar: {\n            size: ref.current.clientHeight,\n            paddingStart: toInt(computedStyle.paddingTop),\n            paddingEnd: toInt(computedStyle.paddingBottom)\n          }\n        });\n      }\n    }\n  });\n});\nvar [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);\nvar ScrollAreaScrollbarImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React2.useState(null);\n  const composeRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => setScrollbar(node));\n  const rectRef = React2.useRef(null);\n  const prevWebkitUserSelectRef = React2.useRef(\"\");\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = (0, import_react_use_callback_ref.useCallbackRef)(onWheelScroll);\n  const handleThumbPositionChange = (0, import_react_use_callback_ref.useCallbackRef)(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n  function handleDragScroll(event) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  }\n  React2.useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  React2.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollbarProvider, {\n    scope: __scopeScrollArea,\n    scrollbar,\n    hasThumb,\n    onThumbChange: (0, import_react_use_callback_ref.useCallbackRef)(onThumbChange),\n    onThumbPointerUp: (0, import_react_use_callback_ref.useCallbackRef)(onThumbPointerUp),\n    onThumbPositionChange: handleThumbPositionChange,\n    onThumbPointerDown: (0, import_react_use_callback_ref.useCallbackRef)(onThumbPointerDown),\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n      ...scrollbarProps,\n      ref: composeRefs,\n      style: {\n        position: \"absolute\",\n        ...scrollbarProps.style\n      },\n      onPointerDown: (0, import_primitive.composeEventHandlers)(props.onPointerDown, event => {\n        const mainPointer = 0;\n        if (event.button === mainPointer) {\n          const element = event.target;\n          element.setPointerCapture(event.pointerId);\n          rectRef.current = scrollbar.getBoundingClientRect();\n          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n          document.body.style.webkitUserSelect = \"none\";\n          if (context.viewport) context.viewport.style.scrollBehavior = \"auto\";\n          handleDragScroll(event);\n        }\n      }),\n      onPointerMove: (0, import_primitive.composeEventHandlers)(props.onPointerMove, handleDragScroll),\n      onPointerUp: (0, import_primitive.composeEventHandlers)(props.onPointerUp, event => {\n        const element = event.target;\n        if (element.hasPointerCapture(event.pointerId)) {\n          element.releasePointerCapture(event.pointerId);\n        }\n        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n        if (context.viewport) context.viewport.style.scrollBehavior = \"\";\n        rectRef.current = null;\n      })\n    })\n  });\n});\nvar THUMB_NAME = \"ScrollAreaThumb\";\nvar ScrollAreaThumb = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...thumbProps\n  } = props;\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_presence.Presence, {\n    present: forceMount || scrollbarContext.hasThumb,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaThumbImpl, {\n      ref: forwardedRef,\n      ...thumbProps\n    })\n  });\n});\nvar ScrollAreaThumbImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    style,\n    ...thumbProps\n  } = props;\n  const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n  const {\n    onThumbPositionChange\n  } = scrollbarContext;\n  const composedRef = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, node => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = React2.useRef(void 0);\n  const debounceScrollEnd = useDebounceCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = void 0;\n    }\n  }, 100);\n  React2.useEffect(() => {\n    const viewport = scrollAreaContext.viewport;\n    if (viewport) {\n      const handleScroll = () => {\n        debounceScrollEnd();\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n      onThumbPositionChange();\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    \"data-state\": scrollbarContext.hasThumb ? \"visible\" : \"hidden\",\n    ...thumbProps,\n    ref: composedRef,\n    style: {\n      width: \"var(--radix-scroll-area-thumb-width)\",\n      height: \"var(--radix-scroll-area-thumb-height)\",\n      ...style\n    },\n    onPointerDownCapture: (0, import_primitive.composeEventHandlers)(props.onPointerDownCapture, event => {\n      const thumb = event.target;\n      const thumbRect = thumb.getBoundingClientRect();\n      const x = event.clientX - thumbRect.left;\n      const y = event.clientY - thumbRect.top;\n      scrollbarContext.onThumbPointerDown({\n        x,\n        y\n      });\n    }),\n    onPointerUp: (0, import_primitive.composeEventHandlers)(props.onPointerUp, scrollbarContext.onThumbPointerUp)\n  });\n});\nScrollAreaThumb.displayName = THUMB_NAME;\nvar CORNER_NAME = \"ScrollAreaCorner\";\nvar ScrollAreaCorner = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n  const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n  const hasCorner = context.type !== \"scroll\" && hasBothScrollbarsVisible;\n  return hasCorner ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(ScrollAreaCornerImpl, {\n    ...props,\n    ref: forwardedRef\n  }) : null;\n});\nScrollAreaCorner.displayName = CORNER_NAME;\nvar ScrollAreaCornerImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    ...cornerProps\n  } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React2.useState(0);\n  const [height, setHeight] = React2.useState(0);\n  const hasSize = Boolean(width && height);\n  useResizeObserver(context.scrollbarX, () => {\n    const height2 = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height2);\n    setHeight(height2);\n  });\n  useResizeObserver(context.scrollbarY, () => {\n    const width2 = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width2);\n    setWidth(width2);\n  });\n  return hasSize ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n    ...cornerProps,\n    ref: forwardedRef,\n    style: {\n      width,\n      height,\n      position: \"absolute\",\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: 0,\n      ...props.style\n    }\n  }) : null;\n});\nfunction toInt(value) {\n  return value ? parseInt(value, 10) : 0;\n}\nfunction getThumbRatio(viewportSize, contentSize) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\nfunction getThumbSize(sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  return Math.max(thumbSize, 18);\n}\nfunction getScrollPositionFromPointer(pointerPos, pointerOffset, sizes, dir = \"ltr\") {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);\n  return interpolate(pointerPos);\n}\nfunction getThumbOffsetFromScroll(scrollPos, sizes, dir = \"ltr\") {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = (0, import_number.clamp)(scrollPos, scrollClampRange);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\nfunction linearScale(input, output) {\n  return value => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\nfunction isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\nvar addUnlinkedScrollListener = (node, handler = () => {}) => {\n  let prevPosition = {\n    left: node.scrollLeft,\n    top: node.scrollTop\n  };\n  let rAF = 0;\n  (function loop() {\n    const position = {\n      left: node.scrollLeft,\n      top: node.scrollTop\n    };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\nfunction useDebounceCallback(callback, delay) {\n  const handleCallback = (0, import_react_use_callback_ref.useCallbackRef)(callback);\n  const debounceTimerRef = React2.useRef(0);\n  React2.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React2.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\nfunction useResizeObserver(element, onResize) {\n  const handleResize = (0, import_react_use_callback_ref.useCallbackRef)(onResize);\n  (0, import_react_use_layout_effect.useLayoutEffect)(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\nvar Root = ScrollArea;\nvar Viewport = ScrollAreaViewport;\nvar Scrollbar = ScrollAreaScrollbar;\nvar Thumb = ScrollAreaThumb;\nvar Corner = ScrollAreaCorner;","map":{"version":3,"names":["src_exports","__export","Corner","Root","ScrollArea","ScrollAreaCorner","ScrollAreaScrollbar","ScrollAreaThumb","ScrollAreaViewport","Scrollbar","Thumb","Viewport","createScrollAreaScope","module","exports","__toCommonJS","React2","__toESM","require","import_react_primitive","import_react_presence","import_react_context","import_react_compose_refs","import_react_use_callback_ref","import_react_direction","import_react_use_layout_effect","import_number","import_primitive","React","useStateMachine","initialState","machine","useReducer","state","event","nextState","import_jsx_runtime","SCROLL_AREA_NAME","createScrollAreaContext","createContextScope","ScrollAreaProvider","useScrollAreaContext","forwardRef","props","forwardedRef","__scopeScrollArea","type","dir","scrollHideDelay","scrollAreaProps","scrollArea","setScrollArea","useState","viewport","setViewport","content","setContent","scrollbarX","setScrollbarX","scrollbarY","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","composedRefs","useComposedRefs","node","direction","useDirection","jsx","scope","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","onCornerWidthChange","onCornerHeightChange","children","Primitive","div","ref","style","position","displayName","VIEWPORT_NAME","nonce","viewportProps","context","useRef","jsxs","Fragment","dangerouslySetInnerHTML","__html","overflowX","overflowY","minWidth","display","SCROLLBAR_NAME","forceMount","scrollbarProps","isHorizontal","orientation","useEffect","ScrollAreaScrollbarHover","ScrollAreaScrollbarScroll","ScrollAreaScrollbarAuto","ScrollAreaScrollbarVisible","visible","setVisible","hideTimer","handlePointerEnter","window","clearTimeout","handlePointerLeave","setTimeout","addEventListener","removeEventListener","Presence","present","debounceScrollEnd","useDebounceCallback","send","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","scrollDirection","prevScrollPos","handleScroll","scrollPos","hasScrollInDirectionChanged","onPointerEnter","composeEventHandlers","onPointerLeave","handleResize","isOverflowX","offsetWidth","scrollWidth","isOverflowY","offsetHeight","scrollHeight","useResizeObserver","thumbRef","pointerOffsetRef","sizes","setSizes","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","getScrollPositionFromPointer","ScrollAreaScrollbarX","onThumbPositionChange","scrollLeft","offset","getThumbOffsetFromScroll","transform","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","computedStyle","setComputedStyle","composeRefs","getComputedStyle","ScrollAreaScrollbarImpl","bottom","left","right","getThumbSize","x","maxScrollPos","deltaX","isScrollingWithinScrollbarBounds","preventDefault","onResize","clientWidth","toInt","paddingLeft","paddingRight","top","y","deltaY","clientHeight","paddingTop","paddingBottom","ScrollbarProvider","useScrollbarContext","setScrollbar","rectRef","prevWebkitUserSelectRef","handleWheelScroll","useCallbackRef","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","element","target","isScrollbarWheel","contains","document","passive","onPointerDown","mainPointer","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","scrollBehavior","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","THUMB_NAME","thumbProps","scrollbarContext","ScrollAreaThumbImpl","scrollAreaContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","width","height","onPointerDownCapture","thumbRect","CORNER_NAME","hasBothScrollbarsVisible","hasCorner","ScrollAreaCornerImpl","cornerProps","setWidth","setHeight","hasSize","height2","width2","value","parseInt","viewportSize","contentSize","ratio","isNaN","scrollbarPadding","thumbSize","Math","max","pointerOffset","thumbSizePx","thumbCenter","thumbOffsetFromEnd","minPointerPos","maxPointerPos","scrollRange","interpolate","linearScale","maxThumbPos","scrollClampRange","scrollWithoutMomentum","clamp","input","output","handler","prevPosition","rAF","loop","isHorizontalScroll","isVerticalScroll","requestAnimationFrame","cancelAnimationFrame","callback","delay","handleCallback","debounceTimerRef","useCallback","useLayoutEffect","resizeObserver","ResizeObserver","observe","unobserve"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-scroll-area/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-scroll-area/src/scroll-area.tsx","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-scroll-area/src/use-state-machine.ts"],"sourcesContent":["'use client';\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n} from './scroll-area';\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n} from './scroll-area';\n","/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './use-state-machine';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ElementRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends Omit<PrimitiveDivProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            if (context.viewport) context.viewport.style.scrollBehavior = 'auto';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          if (context.viewport) context.viewport.style.scrollBehavior = '';\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>(undefined);\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}