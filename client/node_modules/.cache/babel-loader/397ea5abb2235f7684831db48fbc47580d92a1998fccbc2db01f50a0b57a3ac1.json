{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport useSWR from 'swr';\nconst API_BASE_URL = \"http://localhost:3002\";\nconst fetcher = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n  return response.json();\n};\nexport function useUsers(currentPage, searchText = \"\") {\n  _s();\n  // Fetch users\n  const usersUrl = `${API_BASE_URL}/users?search=${searchText}&page=${currentPage}`;\n  const {\n    data: usersData,\n    error: usersError,\n    isLoading: usersLoading\n  } = useSWR(usersUrl, fetcher);\n\n  // Fetch roles\n  const rolesUrl = `${API_BASE_URL}/roles`;\n  const {\n    data: rolesData,\n    error: rolesError,\n    isLoading: rolesLoading\n  } = useSWR(rolesUrl, fetcher);\n\n  // Combine users with their roles when both are available\n  const completeUsers = usersData && rolesData ? usersData.data.map(user => {\n    const role = rolesData.data.find(role => role.id === user.roleId);\n    return {\n      ...user,\n      role\n    };\n  }) : [];\n\n  // Overall loading state\n  const isLoading = usersLoading || rolesLoading;\n\n  // Combined error\n  const error = usersError || rolesError;\n\n  // Return a combined result object\n  return {\n    data: usersData ? {\n      ...usersData,\n      completeUsers\n    } : null,\n    isLoading,\n    error\n  };\n}\n\n// Hook for fetching all roles\n_s(useUsers, \"rAuTbSeN2mLI2IYsccnfzxfQdTs=\", false, function () {\n  return [useSWR, useSWR];\n});\nexport function useRoles() {\n  _s2();\n  const {\n    data,\n    error,\n    isLoading\n  } = useSWR(`${API_BASE_URL}/roles`, fetcher);\n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n\n// Hook for fetching a specific role\n_s2(useRoles, \"3etLDUffADz62tD7g9gJKxYxEy4=\", false, function () {\n  return [useSWR];\n});\nexport function useUserRole(roleId) {\n  _s3();\n  const {\n    data,\n    error,\n    isLoading\n  } = useSWR(roleId ? `${API_BASE_URL}/roles?id=${roleId}` : null, fetcher);\n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n\n// Keep the original functions for compatibility if needed\n_s3(useUserRole, \"3etLDUffADz62tD7g9gJKxYxEy4=\", false, function () {\n  return [useSWR];\n});\nexport async function getUsers({\n  currentPage,\n  searchText = \"\"\n}) {\n  const response = await fetch(`${API_BASE_URL}/users?search=${searchText}&page=${currentPage}`);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n  const users = await response.json();\n  const roles = await getRoles();\n  const completeUsers = users.data.map(user => {\n    const role = roles.data.find(role => role.id === user.roleId);\n    return {\n      ...user,\n      role\n    };\n  });\n  return {\n    ...users,\n    completeUsers\n  };\n}\nexport async function getRoles() {\n  const response = await fetch(`${API_BASE_URL}/roles`);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n  const roles = await response.json();\n  return {\n    ...roles\n  };\n}\nexport async function getUserRole({\n  roleId\n}) {\n  const response = await fetch(`${API_BASE_URL}/roles?id=${roleId}`);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n  const data = await response.json();\n  return {\n    ...data\n  };\n}","map":{"version":3,"names":["useSWR","API_BASE_URL","fetcher","url","response","fetch","ok","Error","json","useUsers","currentPage","searchText","_s","usersUrl","data","usersData","error","usersError","isLoading","usersLoading","rolesUrl","rolesData","rolesError","rolesLoading","completeUsers","map","user","role","find","id","roleId","useRoles","_s2","useUserRole","_s3","getUsers","users","roles","getRoles","getUserRole"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/src/api/api.ts"],"sourcesContent":["import useSWR from 'swr';\nimport { Role } from \"../types/Role\";\nimport { User } from \"../types/User\";\n\nconst API_BASE_URL = \"http://localhost:3002\";\n\nconst fetcher = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n  return response.json();\n};\n\nexport function useUsers(currentPage: number, searchText: string = \"\") {\n  // Fetch users\n  const usersUrl = `${API_BASE_URL}/users?search=${searchText}&page=${currentPage}`;\n  const { data: usersData, error: usersError, isLoading: usersLoading } = useSWR(usersUrl, fetcher);\n\n  // Fetch roles\n  const rolesUrl = `${API_BASE_URL}/roles`;\n  const { data: rolesData, error: rolesError, isLoading: rolesLoading } = useSWR(rolesUrl, fetcher);\n\n  // Combine users with their roles when both are available\n  const completeUsers = usersData && rolesData \n    ? usersData.data.map((user: User) => {\n        const role = rolesData.data.find((role: Role) => role.id === user.roleId);\n        return { ...user, role };\n      })\n    : [];\n\n  // Overall loading state\n  const isLoading = usersLoading || rolesLoading;\n  \n  // Combined error\n  const error = usersError || rolesError;\n\n  // Return a combined result object\n  return {\n    data: usersData ? { ...usersData, completeUsers } : null,\n    isLoading,\n    error\n  };\n}\n\n// Hook for fetching all roles\nexport function useRoles() {\n  const { data, error, isLoading } = useSWR(`${API_BASE_URL}/roles`, fetcher);\n  \n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n\n// Hook for fetching a specific role\nexport function useUserRole(roleId: string) {\n  const { data, error, isLoading } = useSWR(\n    roleId ? `${API_BASE_URL}/roles?id=${roleId}` : null,\n    fetcher\n  );\n  \n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n\n// Keep the original functions for compatibility if needed\nexport async function getUsers({\n  currentPage,\n  searchText = \"\",\n}: {\n  currentPage: number;\n  searchText: string;\n}) {\n  const response = await fetch(\n    `${API_BASE_URL}/users?search=${searchText}&page=${currentPage}`,\n  );\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n\n  const users = await response.json();\n  const roles = await getRoles();\n\n  const completeUsers = users.data.map((user: User) => {\n    const role = roles.data.find((role: Role) => role.id === user.roleId);\n    return { ...user, role };\n  });\n\n  return { ...users, completeUsers };\n}\n\nexport async function getRoles() {\n  const response = await fetch(`${API_BASE_URL}/roles`);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n\n  const roles = await response.json();\n\n  return { ...roles };\n}\n\nexport async function getUserRole({\n  roleId,\n}: {\n  roleId: string;\n}) {\n  const response = await fetch(`${API_BASE_URL}/roles?id=${roleId}`);\n  if (!response.ok) {\n    throw new Error(\"Error with network response\");\n  }\n\n  const data = await response.json();\n\n  return { ...data };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}