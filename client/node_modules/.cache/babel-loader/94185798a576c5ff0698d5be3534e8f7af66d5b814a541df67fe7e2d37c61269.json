{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// packages/react/menubar/src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Arrow: () => Arrow2,\n  CheckboxItem: () => CheckboxItem2,\n  Content: () => Content2,\n  Group: () => Group2,\n  Item: () => Item3,\n  ItemIndicator: () => ItemIndicator2,\n  Label: () => Label2,\n  Menu: () => Menu,\n  Menubar: () => Menubar,\n  MenubarArrow: () => MenubarArrow,\n  MenubarCheckboxItem: () => MenubarCheckboxItem,\n  MenubarContent: () => MenubarContent,\n  MenubarGroup: () => MenubarGroup,\n  MenubarItem: () => MenubarItem,\n  MenubarItemIndicator: () => MenubarItemIndicator,\n  MenubarLabel: () => MenubarLabel,\n  MenubarMenu: () => MenubarMenu,\n  MenubarPortal: () => MenubarPortal,\n  MenubarRadioGroup: () => MenubarRadioGroup,\n  MenubarRadioItem: () => MenubarRadioItem,\n  MenubarSeparator: () => MenubarSeparator,\n  MenubarSub: () => MenubarSub,\n  MenubarSubContent: () => MenubarSubContent,\n  MenubarSubTrigger: () => MenubarSubTrigger,\n  MenubarTrigger: () => MenubarTrigger,\n  Portal: () => Portal2,\n  RadioGroup: () => RadioGroup2,\n  RadioItem: () => RadioItem2,\n  Root: () => Root3,\n  Separator: () => Separator2,\n  Sub: () => Sub2,\n  SubContent: () => SubContent2,\n  SubTrigger: () => SubTrigger2,\n  Trigger: () => Trigger,\n  createMenubarScope: () => createMenubarScope\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// packages/react/menubar/src/menubar.tsx\nvar React = __toESM(require(\"react\"));\nvar import_react_collection = require(\"@radix-ui/react-collection\");\nvar import_react_direction = require(\"@radix-ui/react-direction\");\nvar import_primitive = require(\"@radix-ui/primitive\");\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_react_context = require(\"@radix-ui/react-context\");\nvar import_react_id = require(\"@radix-ui/react-id\");\nvar MenuPrimitive = __toESM(require(\"@radix-ui/react-menu\"));\nvar import_react_menu = require(\"@radix-ui/react-menu\");\nvar RovingFocusGroup = __toESM(require(\"@radix-ui/react-roving-focus\"));\nvar import_react_roving_focus = require(\"@radix-ui/react-roving-focus\");\nvar import_react_primitive = require(\"@radix-ui/react-primitive\");\nvar import_react_use_controllable_state = require(\"@radix-ui/react-use-controllable-state\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar MENUBAR_NAME = \"Menubar\";\nvar [Collection, useCollection, createCollectionScope] = (0, import_react_collection.createCollection)(MENUBAR_NAME);\nvar [createMenubarContext, createMenubarScope] = (0, import_react_context.createContextScope)(MENUBAR_NAME, [createCollectionScope, import_react_roving_focus.createRovingFocusGroupScope]);\nvar useMenuScope = (0, import_react_menu.createMenuScope)();\nvar useRovingFocusGroupScope = (0, import_react_roving_focus.createRovingFocusGroupScope)();\nvar [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);\nvar Menubar = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    loop = true,\n    dir,\n    ...menubarProps\n  } = props;\n  const direction = (0, import_react_direction.useDirection)(dir);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n  const [value = \"\", setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue\n  });\n  const [currentTabStopId, setCurrentTabStopId] = React.useState(null);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenubarContextProvider, {\n    scope: __scopeMenubar,\n    value,\n    onMenuOpen: React.useCallback(value2 => {\n      setValue(value2);\n      setCurrentTabStopId(value2);\n    }, [setValue]),\n    onMenuClose: React.useCallback(() => setValue(\"\"), [setValue]),\n    onMenuToggle: React.useCallback(value2 => {\n      setValue(prevValue => prevValue ? \"\" : value2);\n      setCurrentTabStopId(value2);\n    }, [setValue]),\n    dir: direction,\n    loop,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Provider, {\n      scope: __scopeMenubar,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.Slot, {\n        scope: __scopeMenubar,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(RovingFocusGroup.Root, {\n          asChild: true,\n          ...rovingFocusGroupScope,\n          orientation: \"horizontal\",\n          loop,\n          dir: direction,\n          currentTabStopId,\n          onCurrentTabStopIdChange: setCurrentTabStopId,\n          children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.div, {\n            role: \"menubar\",\n            ...menubarProps,\n            ref: forwardedRef\n          })\n        })\n      })\n    })\n  });\n});\nMenubar.displayName = MENUBAR_NAME;\nvar MENU_NAME = \"MenubarMenu\";\nvar [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);\nvar MenubarMenu = props => {\n  const {\n    __scopeMenubar,\n    value: valueProp,\n    ...menuProps\n  } = props;\n  const autoValue = (0, import_react_id.useId)();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenubarMenuProvider, {\n    scope: __scopeMenubar,\n    value,\n    triggerId: (0, import_react_id.useId)(),\n    triggerRef,\n    contentId: (0, import_react_id.useId)(),\n    wasKeyboardTriggerOpenRef,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Root, {\n      ...menuScope,\n      open,\n      onOpenChange: open2 => {\n        if (!open2) context.onMenuClose();\n      },\n      modal: false,\n      dir: context.dir,\n      ...menuProps\n    })\n  });\n};\nMenubarMenu.displayName = MENU_NAME;\nvar TRIGGER_NAME = \"MenubarTrigger\";\nvar MenubarTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n  const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n  const ref = React.useRef(null);\n  const composedRefs = (0, import_react_compose_refs.useComposedRefs)(forwardedRef, ref, menuContext.triggerRef);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const open = context.value === menuContext.value;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Collection.ItemSlot, {\n    scope: __scopeMenubar,\n    value: menuContext.value,\n    disabled,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(RovingFocusGroup.Item, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      focusable: !disabled,\n      tabStopId: menuContext.value,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Anchor, {\n        asChild: true,\n        ...menuScope,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_primitive.Primitive.button, {\n          type: \"button\",\n          role: \"menuitem\",\n          id: menuContext.triggerId,\n          \"aria-haspopup\": \"menu\",\n          \"aria-expanded\": open,\n          \"aria-controls\": open ? menuContext.contentId : void 0,\n          \"data-highlighted\": isFocused ? \"\" : void 0,\n          \"data-state\": open ? \"open\" : \"closed\",\n          \"data-disabled\": disabled ? \"\" : void 0,\n          disabled,\n          ...triggerProps,\n          ref: composedRefs,\n          onPointerDown: (0, import_primitive.composeEventHandlers)(props.onPointerDown, event => {\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onMenuOpen(menuContext.value);\n              if (!open) event.preventDefault();\n            }\n          }),\n          onPointerEnter: (0, import_primitive.composeEventHandlers)(props.onPointerEnter, () => {\n            const menubarOpen = Boolean(context.value);\n            if (menubarOpen && !open) {\n              context.onMenuOpen(menuContext.value);\n              ref.current?.focus();\n            }\n          }),\n          onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n            if (disabled) return;\n            if ([\"Enter\", \" \"].includes(event.key)) context.onMenuToggle(menuContext.value);\n            if (event.key === \"ArrowDown\") context.onMenuOpen(menuContext.value);\n            if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) {\n              menuContext.wasKeyboardTriggerOpenRef.current = true;\n              event.preventDefault();\n            }\n          }),\n          onFocus: (0, import_primitive.composeEventHandlers)(props.onFocus, () => setIsFocused(true)),\n          onBlur: (0, import_primitive.composeEventHandlers)(props.onBlur, () => setIsFocused(false))\n        })\n      })\n    })\n  });\n});\nMenubarTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"MenubarPortal\";\nvar MenubarPortal = props => {\n  const {\n    __scopeMenubar,\n    ...portalProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Portal, {\n    ...menuScope,\n    ...portalProps\n  });\n};\nMenubarPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenubarContent\";\nvar MenubarContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    align = \"start\",\n    ...contentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n  const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n  const getItems = useCollection(__scopeMenubar);\n  const hasInteractedOutsideRef = React.useRef(false);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Content, {\n    id: menuContext.contentId,\n    \"aria-labelledby\": menuContext.triggerId,\n    \"data-radix-menubar-content\": \"\",\n    ...menuScope,\n    ...contentProps,\n    ref: forwardedRef,\n    align,\n    onCloseAutoFocus: (0, import_primitive.composeEventHandlers)(props.onCloseAutoFocus, event => {\n      const menubarOpen = Boolean(context.value);\n      if (!menubarOpen && !hasInteractedOutsideRef.current) {\n        menuContext.triggerRef.current?.focus();\n      }\n      hasInteractedOutsideRef.current = false;\n      event.preventDefault();\n    }),\n    onFocusOutside: (0, import_primitive.composeEventHandlers)(props.onFocusOutside, event => {\n      const target = event.target;\n      const isMenubarTrigger = getItems().some(item => item.ref.current?.contains(target));\n      if (isMenubarTrigger) event.preventDefault();\n    }),\n    onInteractOutside: (0, import_primitive.composeEventHandlers)(props.onInteractOutside, () => {\n      hasInteractedOutsideRef.current = true;\n    }),\n    onEntryFocus: event => {\n      if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n    },\n    onKeyDown: (0, import_primitive.composeEventHandlers)(props.onKeyDown, event => {\n      if ([\"ArrowRight\", \"ArrowLeft\"].includes(event.key)) {\n        const target = event.target;\n        const targetIsSubTrigger = target.hasAttribute(\"data-radix-menubar-subtrigger\");\n        const isKeyDownInsideSubMenu = target.closest(\"[data-radix-menubar-content]\") !== event.currentTarget;\n        const prevMenuKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n        const isPrevKey = prevMenuKey === event.key;\n        const isNextKey = !isPrevKey;\n        if (isNextKey && targetIsSubTrigger) return;\n        if (isKeyDownInsideSubMenu && isPrevKey) return;\n        const items = getItems().filter(item => !item.disabled);\n        let candidateValues = items.map(item => item.value);\n        if (isPrevKey) candidateValues.reverse();\n        const currentIndex = candidateValues.indexOf(menuContext.value);\n        candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);\n        const [nextValue] = candidateValues;\n        if (nextValue) context.onMenuOpen(nextValue);\n      }\n    }, {\n      checkForDefaultPrevented: false\n    }),\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nMenubarContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenubarGroup\";\nvar MenubarGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...groupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Group, {\n    ...menuScope,\n    ...groupProps,\n    ref: forwardedRef\n  });\n});\nMenubarGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenubarLabel\";\nvar MenubarLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...labelProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Label, {\n    ...menuScope,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nMenubarLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenubarItem\";\nvar MenubarItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...itemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Item, {\n    ...menuScope,\n    ...itemProps,\n    ref: forwardedRef\n  });\n});\nMenubarItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"MenubarCheckboxItem\";\nvar MenubarCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...checkboxItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.CheckboxItem, {\n    ...menuScope,\n    ...checkboxItemProps,\n    ref: forwardedRef\n  });\n});\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenubarRadioGroup\";\nvar MenubarRadioGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...radioGroupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.RadioGroup, {\n    ...menuScope,\n    ...radioGroupProps,\n    ref: forwardedRef\n  });\n});\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenubarRadioItem\";\nvar MenubarRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...radioItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.RadioItem, {\n    ...menuScope,\n    ...radioItemProps,\n    ref: forwardedRef\n  });\n});\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"MenubarItemIndicator\";\nvar MenubarItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...itemIndicatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.ItemIndicator, {\n    ...menuScope,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  });\n});\nMenubarItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenubarSeparator\";\nvar MenubarSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...separatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Separator, {\n    ...menuScope,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nMenubarSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenubarArrow\";\nvar MenubarArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...arrowProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Arrow, {\n    ...menuScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nMenubarArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenubarSub\";\nvar MenubarSub = props => {\n  const {\n    __scopeMenubar,\n    children,\n    open: openProp,\n    onOpenChange,\n    defaultOpen\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = (0, import_react_use_controllable_state.useControllableState)({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.Sub, {\n    ...menuScope,\n    open,\n    onOpenChange: setOpen,\n    children\n  });\n};\nMenubarSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenubarSubTrigger\";\nvar MenubarSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...subTriggerProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.SubTrigger, {\n    \"data-radix-menubar-subtrigger\": \"\",\n    ...menuScope,\n    ...subTriggerProps,\n    ref: forwardedRef\n  });\n});\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenubarSubContent\";\nvar MenubarSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...subContentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuPrimitive.SubContent, {\n    ...menuScope,\n    \"data-radix-menubar-content\": \"\",\n    ...subContentProps,\n    ref: forwardedRef,\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root3 = Menubar;\nvar Menu = MenubarMenu;\nvar Trigger = MenubarTrigger;\nvar Portal2 = MenubarPortal;\nvar Content2 = MenubarContent;\nvar Group2 = MenubarGroup;\nvar Label2 = MenubarLabel;\nvar Item3 = MenubarItem;\nvar CheckboxItem2 = MenubarCheckboxItem;\nvar RadioGroup2 = MenubarRadioGroup;\nvar RadioItem2 = MenubarRadioItem;\nvar ItemIndicator2 = MenubarItemIndicator;\nvar Separator2 = MenubarSeparator;\nvar Arrow2 = MenubarArrow;\nvar Sub2 = MenubarSub;\nvar SubTrigger2 = MenubarSubTrigger;\nvar SubContent2 = MenubarSubContent;","map":{"version":3,"names":["src_exports","__export","Arrow","Arrow2","CheckboxItem","CheckboxItem2","Content","Content2","Group","Group2","Item","Item3","ItemIndicator","ItemIndicator2","Label","Label2","Menu","Menubar","MenubarArrow","MenubarCheckboxItem","MenubarContent","MenubarGroup","MenubarItem","MenubarItemIndicator","MenubarLabel","MenubarMenu","MenubarPortal","MenubarRadioGroup","MenubarRadioItem","MenubarSeparator","MenubarSub","MenubarSubContent","MenubarSubTrigger","MenubarTrigger","Portal","Portal2","RadioGroup","RadioGroup2","RadioItem","RadioItem2","Root","Root3","Separator","Separator2","Sub","Sub2","SubContent","SubContent2","SubTrigger","SubTrigger2","Trigger","createMenubarScope","module","exports","__toCommonJS","React","__toESM","require","import_react_collection","import_react_direction","import_primitive","import_react_compose_refs","import_react_context","import_react_id","MenuPrimitive","import_react_menu","RovingFocusGroup","import_react_roving_focus","import_react_primitive","import_react_use_controllable_state","import_jsx_runtime","MENUBAR_NAME","Collection","useCollection","createCollectionScope","createCollection","createMenubarContext","createContextScope","createRovingFocusGroupScope","useMenuScope","createMenuScope","useRovingFocusGroupScope","MenubarContextProvider","useMenubarContext","forwardRef","props","forwardedRef","__scopeMenubar","value","valueProp","onValueChange","defaultValue","loop","dir","menubarProps","direction","useDirection","rovingFocusGroupScope","setValue","useControllableState","prop","onChange","defaultProp","currentTabStopId","setCurrentTabStopId","useState","jsx","scope","onMenuOpen","useCallback","value2","onMenuClose","onMenuToggle","prevValue","children","Provider","Slot","asChild","orientation","onCurrentTabStopIdChange","Primitive","div","role","ref","displayName","MENU_NAME","MenubarMenuProvider","useMenubarMenuContext","menuProps","autoValue","useId","context","menuScope","triggerRef","useRef","wasKeyboardTriggerOpenRef","open","useEffect","current","triggerId","contentId","onOpenChange","open2","modal","TRIGGER_NAME","disabled","triggerProps","menuContext","composedRefs","useComposedRefs","isFocused","setIsFocused","ItemSlot","focusable","tabStopId","Anchor","button","type","id","onPointerDown","composeEventHandlers","event","ctrlKey","preventDefault","onPointerEnter","menubarOpen","Boolean","focus","onKeyDown","includes","key","onFocus","onBlur","PORTAL_NAME","portalProps","CONTENT_NAME","align","contentProps","getItems","hasInteractedOutsideRef","onCloseAutoFocus","onFocusOutside","target","isMenubarTrigger","some","item","contains","onInteractOutside","onEntryFocus","targetIsSubTrigger","hasAttribute","isKeyDownInsideSubMenu","closest","currentTarget","prevMenuKey","isPrevKey","isNextKey","items","filter","candidateValues","map","reverse","currentIndex","indexOf","wrapArray","slice","nextValue","checkForDefaultPrevented","style","GROUP_NAME","groupProps","LABEL_NAME","labelProps","ITEM_NAME","itemProps","CHECKBOX_ITEM_NAME","checkboxItemProps","RADIO_GROUP_NAME","radioGroupProps","RADIO_ITEM_NAME","radioItemProps","INDICATOR_NAME","itemIndicatorProps","SEPARATOR_NAME","separatorProps","ARROW_NAME","arrowProps","SUB_NAME","openProp","defaultOpen","setOpen","SUB_TRIGGER_NAME","subTriggerProps","SUB_CONTENT_NAME","subContentProps","array","startIndex","_","index","length"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-menubar/src/index.ts","/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-menubar/src/menubar.tsx"],"sourcesContent":["'use client';\nexport {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n} from './menubar';\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n} from './menubar';\n","import * as React from 'react';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Menubar\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENUBAR_NAME = 'Menubar';\n\ntype ItemData = { value: string; disabled: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenubarTriggerElement,\n  ItemData\n>(MENUBAR_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenubar?: Scope };\nconst [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope,\n]);\n\nconst useMenuScope = createMenuScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenubarContextValue = {\n  value: string;\n  dir: Direction;\n  loop: boolean;\n  onMenuOpen(value: string): void;\n  onMenuClose(): void;\n  onMenuToggle(value: string): void;\n};\n\nconst [MenubarContextProvider, useMenubarContext] =\n  createMenubarContext<MenubarContextValue>(MENUBAR_NAME);\n\ntype MenubarElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenubarProps extends PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Menubar = React.forwardRef<MenubarElement, MenubarProps>(\n  (props: ScopedProps<MenubarProps>, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    // We need to manage tab stop id manually as `RovingFocusGroup` updates the stop\n    // based on focus, and in some situations our triggers won't ever be given focus\n    // (e.g. click to open and then outside to close)\n    const [currentTabStopId, setCurrentTabStopId] = React.useState<string | null>(null);\n\n    return (\n      <MenubarContextProvider\n        scope={__scopeMenubar}\n        value={value}\n        onMenuOpen={React.useCallback(\n          (value) => {\n            setValue(value);\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        onMenuClose={React.useCallback(() => setValue(''), [setValue])}\n        onMenuToggle={React.useCallback(\n          (value) => {\n            setValue((prevValue) => (prevValue ? '' : value));\n            // `openMenuOpen` and `onMenuToggle` are called exclusively so we\n            // need to update the id in either case.\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        dir={direction}\n        loop={loop}\n      >\n        <Collection.Provider scope={__scopeMenubar}>\n          <Collection.Slot scope={__scopeMenubar}>\n            <RovingFocusGroup.Root\n              asChild\n              {...rovingFocusGroupScope}\n              orientation=\"horizontal\"\n              loop={loop}\n              dir={direction}\n              currentTabStopId={currentTabStopId}\n              onCurrentTabStopIdChange={setCurrentTabStopId}\n            >\n              <Primitive.div role=\"menubar\" {...menubarProps} ref={forwardedRef} />\n            </RovingFocusGroup.Root>\n          </Collection.Slot>\n        </Collection.Provider>\n      </MenubarContextProvider>\n    );\n  }\n);\n\nMenubar.displayName = MENUBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'MenubarMenu';\n\ntype MenubarMenuContextValue = {\n  value: string;\n  triggerId: string;\n  triggerRef: React.RefObject<MenubarTriggerElement | null>;\n  contentId: string;\n  wasKeyboardTriggerOpenRef: React.MutableRefObject<boolean>;\n};\n\nconst [MenubarMenuProvider, useMenubarMenuContext] =\n  createMenubarContext<MenubarMenuContextValue>(MENU_NAME);\n\ninterface MenubarMenuProps {\n  value?: string;\n  children?: React.ReactNode;\n}\n\nconst MenubarMenu = (props: ScopedProps<MenubarMenuProps>) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  // We need to provide an initial deterministic value as `useId` will return\n  // empty string on the first render and we don't want to match our internal \"closed\" value.\n  const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef<MenubarTriggerElement>(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n\n  return (\n    <MenubarMenuProvider\n      scope={__scopeMenubar}\n      value={value}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      wasKeyboardTriggerOpenRef={wasKeyboardTriggerOpenRef}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={(open) => {\n          // Menu only calls `onOpenChange` when dismissing so we\n          // want to close our MenuBar based on the same events.\n          if (!open) context.onMenuClose();\n        }}\n        modal={false}\n        dir={context.dir}\n        {...menuProps}\n      />\n    </MenubarMenuProvider>\n  );\n};\n\nMenubarMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'MenubarTrigger';\n\ntype MenubarTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface MenubarTriggerProps extends PrimitiveButtonProps {}\n\nconst MenubarTrigger = React.forwardRef<MenubarTriggerElement, MenubarTriggerProps>(\n  (props: ScopedProps<MenubarTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef<MenubarTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n\n    return (\n      <Collection.ItemSlot scope={__scopeMenubar} value={menuContext.value} disabled={disabled}>\n        <RovingFocusGroup.Item\n          asChild\n          {...rovingFocusGroupScope}\n          focusable={!disabled}\n          tabStopId={menuContext.value}\n        >\n          <MenuPrimitive.Anchor asChild {...menuScope}>\n            <Primitive.button\n              type=\"button\"\n              role=\"menuitem\"\n              id={menuContext.triggerId}\n              aria-haspopup=\"menu\"\n              aria-expanded={open}\n              aria-controls={open ? menuContext.contentId : undefined}\n              data-highlighted={isFocused ? '' : undefined}\n              data-state={open ? 'open' : 'closed'}\n              data-disabled={disabled ? '' : undefined}\n              disabled={disabled}\n              {...triggerProps}\n              ref={composedRefs}\n              onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n                // but not when the control key is pressed (avoiding MacOS right click)\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                  context.onMenuOpen(menuContext.value);\n                  // prevent trigger focusing when opening\n                  // this allows the content to be given focus without competition\n                  if (!open) event.preventDefault();\n                }\n              })}\n              onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n                const menubarOpen = Boolean(context.value);\n                if (menubarOpen && !open) {\n                  context.onMenuOpen(menuContext.value);\n                  ref.current?.focus();\n                }\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                if (disabled) return;\n                if (['Enter', ' '].includes(event.key)) context.onMenuToggle(menuContext.value);\n                if (event.key === 'ArrowDown') context.onMenuOpen(menuContext.value);\n                // prevent keydown from scrolling window / first focused item to execute\n                // that keydown (inadvertently closing the menu)\n                if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {\n                  menuContext.wasKeyboardTriggerOpenRef.current = true;\n                  event.preventDefault();\n                }\n              })}\n              onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n              onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n            />\n          </MenuPrimitive.Anchor>\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nMenubarTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenubarPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface MenubarPortalProps extends MenuPortalProps {}\n\nconst MenubarPortal: React.FC<MenubarPortalProps> = (props: ScopedProps<MenubarPortalProps>) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nMenubarPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenubarContent';\n\ntype MenubarContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface MenubarContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst MenubarContent = React.forwardRef<MenubarContentElement, MenubarContentProps>(\n  (props: ScopedProps<MenubarContentProps>, forwardedRef) => {\n    const { __scopeMenubar, align = 'start', ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={menuContext.contentId}\n        aria-labelledby={menuContext.triggerId}\n        data-radix-menubar-content=\"\"\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        align={align}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        })}\n        onEntryFocus={(event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        }}\n        onKeyDown={composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n              const target = event.target as HTMLElement;\n              const targetIsSubTrigger = target.hasAttribute('data-radix-menubar-subtrigger');\n              const isKeyDownInsideSubMenu =\n                target.closest('[data-radix-menubar-content]') !== event.currentTarget;\n\n              const prevMenuKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n\n              // Prevent navigation when we're opening a submenu\n              if (isNextKey && targetIsSubTrigger) return;\n              // or we're inside a submenu and are moving backwards to close it\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n\n              candidateValues = context.loop\n                ? wrapArray(candidateValues, currentIndex + 1)\n                : candidateValues.slice(currentIndex + 1);\n\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        )}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenubarGroup';\n\ntype MenubarGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface MenubarGroupProps extends MenuGroupProps {}\n\nconst MenubarGroup = React.forwardRef<MenubarGroupElement, MenubarGroupProps>(\n  (props: ScopedProps<MenubarGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenubarLabel';\n\ntype MenubarLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface MenubarLabelProps extends MenuLabelProps {}\n\nconst MenubarLabel = React.forwardRef<MenubarLabelElement, MenubarLabelProps>(\n  (props: ScopedProps<MenubarLabelProps>, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenubarItem';\n\ntype MenubarItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface MenubarItemProps extends MenuItemProps {}\n\nconst MenubarItem = React.forwardRef<MenubarItemElement, MenubarItemProps>(\n  (props: ScopedProps<MenubarItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenubarCheckboxItem';\n\ntype MenubarCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface MenubarCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst MenubarCheckboxItem = React.forwardRef<MenubarCheckboxItemElement, MenubarCheckboxItemProps>(\n  (props: ScopedProps<MenubarCheckboxItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenubarRadioGroup';\n\ntype MenubarRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface MenubarRadioGroupProps extends MenuRadioGroupProps {}\n\nconst MenubarRadioGroup = React.forwardRef<MenubarRadioGroupElement, MenubarRadioGroupProps>(\n  (props: ScopedProps<MenubarRadioGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenubarRadioItem';\n\ntype MenubarRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface MenubarRadioItemProps extends MenuRadioItemProps {}\n\nconst MenubarRadioItem = React.forwardRef<MenubarRadioItemElement, MenubarRadioItemProps>(\n  (props: ScopedProps<MenubarRadioItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'MenubarItemIndicator';\n\ntype MenubarItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface MenubarItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst MenubarItemIndicator = React.forwardRef<\n  MenubarItemIndicatorElement,\n  MenubarItemIndicatorProps\n>((props: ScopedProps<MenubarItemIndicatorProps>, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nMenubarItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenubarSeparator';\n\ntype MenubarSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface MenubarSeparatorProps extends MenuSeparatorProps {}\n\nconst MenubarSeparator = React.forwardRef<MenubarSeparatorElement, MenubarSeparatorProps>(\n  (props: ScopedProps<MenubarSeparatorProps>, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenubarArrow';\n\ntype MenubarArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface MenubarArrowProps extends MenuArrowProps {}\n\nconst MenubarArrow = React.forwardRef<MenubarArrowElement, MenubarArrowProps>(\n  (props: ScopedProps<MenubarArrowProps>, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenubarSub';\n\ninterface MenubarSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenubarSub: React.FC<MenubarSubProps> = (props: ScopedProps<MenubarSubProps>) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\nMenubarSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenubarSubTrigger';\n\ntype MenubarSubTriggerElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface MenubarSubTriggerProps extends MenuSubTriggerProps {}\n\nconst MenubarSubTrigger = React.forwardRef<MenubarSubTriggerElement, MenubarSubTriggerProps>(\n  (props: ScopedProps<MenubarSubTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return (\n      <MenuPrimitive.SubTrigger\n        data-radix-menubar-subtrigger=\"\"\n        {...menuScope}\n        {...subTriggerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenubarSubContent';\n\ntype MenubarSubContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface MenubarSubContentProps extends MenuSubContentProps {}\n\nconst MenubarSubContent = React.forwardRef<MenubarSubContentElement, MenubarSubContentProps>(\n  (props: ScopedProps<MenubarSubContentProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n\n    return (\n      <MenuPrimitive.SubContent\n        {...menuScope}\n        data-radix-menubar-content=\"\"\n        {...subContentProps}\n        ref={forwardedRef}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Menubar;\nconst Menu = MenubarMenu;\nconst Trigger = MenubarTrigger;\nconst Portal = MenubarPortal;\nconst Content = MenubarContent;\nconst Group = MenubarGroup;\nconst Label = MenubarLabel;\nconst Item = MenubarItem;\nconst CheckboxItem = MenubarCheckboxItem;\nconst RadioGroup = MenubarRadioGroup;\nconst RadioItem = MenubarRadioItem;\nconst ItemIndicator = MenubarItemIndicator;\nconst Separator = MenubarSeparator;\nconst Arrow = MenubarArrow;\nconst Sub = MenubarSub;\nconst SubTrigger = MenubarSubTrigger;\nconst SubContent = MenubarSubContent;\n\nexport {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}