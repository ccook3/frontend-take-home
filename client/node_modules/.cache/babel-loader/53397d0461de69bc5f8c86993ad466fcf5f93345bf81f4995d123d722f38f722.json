{"ast":null,"code":"\"use client\";\n\n// packages/react/menubar/src/menubar.tsx\nimport * as React from \"react\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MENUBAR_NAME = \"Menubar\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENUBAR_NAME);\nvar [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [createCollectionScope, createRovingFocusGroupScope]);\nvar useMenuScope = createMenuScope();\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);\nvar Menubar = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    loop = true,\n    dir,\n    ...menubarProps\n  } = props;\n  const direction = useDirection(dir);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n  const [value = \"\", setValue] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue\n  });\n  const [currentTabStopId, setCurrentTabStopId] = React.useState(null);\n  return /* @__PURE__ */jsx(MenubarContextProvider, {\n    scope: __scopeMenubar,\n    value,\n    onMenuOpen: React.useCallback(value2 => {\n      setValue(value2);\n      setCurrentTabStopId(value2);\n    }, [setValue]),\n    onMenuClose: React.useCallback(() => setValue(\"\"), [setValue]),\n    onMenuToggle: React.useCallback(value2 => {\n      setValue(prevValue => prevValue ? \"\" : value2);\n      setCurrentTabStopId(value2);\n    }, [setValue]),\n    dir: direction,\n    loop,\n    children: /* @__PURE__ */jsx(Collection.Provider, {\n      scope: __scopeMenubar,\n      children: /* @__PURE__ */jsx(Collection.Slot, {\n        scope: __scopeMenubar,\n        children: /* @__PURE__ */jsx(RovingFocusGroup.Root, {\n          asChild: true,\n          ...rovingFocusGroupScope,\n          orientation: \"horizontal\",\n          loop,\n          dir: direction,\n          currentTabStopId,\n          onCurrentTabStopIdChange: setCurrentTabStopId,\n          children: /* @__PURE__ */jsx(Primitive.div, {\n            role: \"menubar\",\n            ...menubarProps,\n            ref: forwardedRef\n          })\n        })\n      })\n    })\n  });\n});\nMenubar.displayName = MENUBAR_NAME;\nvar MENU_NAME = \"MenubarMenu\";\nvar [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);\nvar MenubarMenu = props => {\n  const {\n    __scopeMenubar,\n    value: valueProp,\n    ...menuProps\n  } = props;\n  const autoValue = useId();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n  return /* @__PURE__ */jsx(MenubarMenuProvider, {\n    scope: __scopeMenubar,\n    value,\n    triggerId: useId(),\n    triggerRef,\n    contentId: useId(),\n    wasKeyboardTriggerOpenRef,\n    children: /* @__PURE__ */jsx(MenuPrimitive.Root, {\n      ...menuScope,\n      open,\n      onOpenChange: open2 => {\n        if (!open2) context.onMenuClose();\n      },\n      modal: false,\n      dir: context.dir,\n      ...menuProps\n    })\n  });\n};\nMenubarMenu.displayName = MENU_NAME;\nvar TRIGGER_NAME = \"MenubarTrigger\";\nvar MenubarTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n  const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const open = context.value === menuContext.value;\n  return /* @__PURE__ */jsx(Collection.ItemSlot, {\n    scope: __scopeMenubar,\n    value: menuContext.value,\n    disabled,\n    children: /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      focusable: !disabled,\n      tabStopId: menuContext.value,\n      children: /* @__PURE__ */jsx(MenuPrimitive.Anchor, {\n        asChild: true,\n        ...menuScope,\n        children: /* @__PURE__ */jsx(Primitive.button, {\n          type: \"button\",\n          role: \"menuitem\",\n          id: menuContext.triggerId,\n          \"aria-haspopup\": \"menu\",\n          \"aria-expanded\": open,\n          \"aria-controls\": open ? menuContext.contentId : void 0,\n          \"data-highlighted\": isFocused ? \"\" : void 0,\n          \"data-state\": open ? \"open\" : \"closed\",\n          \"data-disabled\": disabled ? \"\" : void 0,\n          disabled,\n          ...triggerProps,\n          ref: composedRefs,\n          onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onMenuOpen(menuContext.value);\n              if (!open) event.preventDefault();\n            }\n          }),\n          onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {\n            const menubarOpen = Boolean(context.value);\n            if (menubarOpen && !open) {\n              context.onMenuOpen(menuContext.value);\n              ref.current?.focus();\n            }\n          }),\n          onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n            if (disabled) return;\n            if ([\"Enter\", \" \"].includes(event.key)) context.onMenuToggle(menuContext.value);\n            if (event.key === \"ArrowDown\") context.onMenuOpen(menuContext.value);\n            if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) {\n              menuContext.wasKeyboardTriggerOpenRef.current = true;\n              event.preventDefault();\n            }\n          }),\n          onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\n          onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))\n        })\n      })\n    })\n  });\n});\nMenubarTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"MenubarPortal\";\nvar MenubarPortal = props => {\n  const {\n    __scopeMenubar,\n    ...portalProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Portal, {\n    ...menuScope,\n    ...portalProps\n  });\n};\nMenubarPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenubarContent\";\nvar MenubarContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    align = \"start\",\n    ...contentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n  const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n  const getItems = useCollection(__scopeMenubar);\n  const hasInteractedOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(MenuPrimitive.Content, {\n    id: menuContext.contentId,\n    \"aria-labelledby\": menuContext.triggerId,\n    \"data-radix-menubar-content\": \"\",\n    ...menuScope,\n    ...contentProps,\n    ref: forwardedRef,\n    align,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      const menubarOpen = Boolean(context.value);\n      if (!menubarOpen && !hasInteractedOutsideRef.current) {\n        menuContext.triggerRef.current?.focus();\n      }\n      hasInteractedOutsideRef.current = false;\n      event.preventDefault();\n    }),\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => {\n      const target = event.target;\n      const isMenubarTrigger = getItems().some(item => item.ref.current?.contains(target));\n      if (isMenubarTrigger) event.preventDefault();\n    }),\n    onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {\n      hasInteractedOutsideRef.current = true;\n    }),\n    onEntryFocus: event => {\n      if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n    },\n    onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n      if ([\"ArrowRight\", \"ArrowLeft\"].includes(event.key)) {\n        const target = event.target;\n        const targetIsSubTrigger = target.hasAttribute(\"data-radix-menubar-subtrigger\");\n        const isKeyDownInsideSubMenu = target.closest(\"[data-radix-menubar-content]\") !== event.currentTarget;\n        const prevMenuKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n        const isPrevKey = prevMenuKey === event.key;\n        const isNextKey = !isPrevKey;\n        if (isNextKey && targetIsSubTrigger) return;\n        if (isKeyDownInsideSubMenu && isPrevKey) return;\n        const items = getItems().filter(item => !item.disabled);\n        let candidateValues = items.map(item => item.value);\n        if (isPrevKey) candidateValues.reverse();\n        const currentIndex = candidateValues.indexOf(menuContext.value);\n        candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);\n        const [nextValue] = candidateValues;\n        if (nextValue) context.onMenuOpen(nextValue);\n      }\n    }, {\n      checkForDefaultPrevented: false\n    }),\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nMenubarContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenubarGroup\";\nvar MenubarGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...groupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Group, {\n    ...menuScope,\n    ...groupProps,\n    ref: forwardedRef\n  });\n});\nMenubarGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenubarLabel\";\nvar MenubarLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...labelProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Label, {\n    ...menuScope,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nMenubarLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenubarItem\";\nvar MenubarItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...itemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Item, {\n    ...menuScope,\n    ...itemProps,\n    ref: forwardedRef\n  });\n});\nMenubarItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"MenubarCheckboxItem\";\nvar MenubarCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...checkboxItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.CheckboxItem, {\n    ...menuScope,\n    ...checkboxItemProps,\n    ref: forwardedRef\n  });\n});\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenubarRadioGroup\";\nvar MenubarRadioGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...radioGroupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioGroup, {\n    ...menuScope,\n    ...radioGroupProps,\n    ref: forwardedRef\n  });\n});\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenubarRadioItem\";\nvar MenubarRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...radioItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioItem, {\n    ...menuScope,\n    ...radioItemProps,\n    ref: forwardedRef\n  });\n});\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"MenubarItemIndicator\";\nvar MenubarItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...itemIndicatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.ItemIndicator, {\n    ...menuScope,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  });\n});\nMenubarItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenubarSeparator\";\nvar MenubarSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...separatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Separator, {\n    ...menuScope,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nMenubarSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenubarArrow\";\nvar MenubarArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...arrowProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.Arrow, {\n    ...menuScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nMenubarArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenubarSub\";\nvar MenubarSub = props => {\n  const {\n    __scopeMenubar,\n    children,\n    open: openProp,\n    onOpenChange,\n    defaultOpen\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(MenuPrimitive.Sub, {\n    ...menuScope,\n    open,\n    onOpenChange: setOpen,\n    children\n  });\n};\nMenubarSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenubarSubTrigger\";\nvar MenubarSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...subTriggerProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubTrigger, {\n    \"data-radix-menubar-subtrigger\": \"\",\n    ...menuScope,\n    ...subTriggerProps,\n    ref: forwardedRef\n  });\n});\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenubarSubContent\";\nvar MenubarSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeMenubar,\n    ...subContentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubContent, {\n    ...menuScope,\n    \"data-radix-menubar-content\": \"\",\n    ...subContentProps,\n    ref: forwardedRef,\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root3 = Menubar;\nvar Menu = MenubarMenu;\nvar Trigger = MenubarTrigger;\nvar Portal2 = MenubarPortal;\nvar Content2 = MenubarContent;\nvar Group2 = MenubarGroup;\nvar Label2 = MenubarLabel;\nvar Item3 = MenubarItem;\nvar CheckboxItem2 = MenubarCheckboxItem;\nvar RadioGroup2 = MenubarRadioGroup;\nvar RadioItem2 = MenubarRadioItem;\nvar ItemIndicator2 = MenubarItemIndicator;\nvar Separator2 = MenubarSeparator;\nvar Arrow2 = MenubarArrow;\nvar Sub2 = MenubarSub;\nvar SubTrigger2 = MenubarSubTrigger;\nvar SubContent2 = MenubarSubContent;\nexport { Arrow2 as Arrow, CheckboxItem2 as CheckboxItem, Content2 as Content, Group2 as Group, Item3 as Item, ItemIndicator2 as ItemIndicator, Label2 as Label, Menu, Menubar, MenubarArrow, MenubarCheckboxItem, MenubarContent, MenubarGroup, MenubarItem, MenubarItemIndicator, MenubarLabel, MenubarMenu, MenubarPortal, MenubarRadioGroup, MenubarRadioItem, MenubarSeparator, MenubarSub, MenubarSubContent, MenubarSubTrigger, MenubarTrigger, Portal2 as Portal, RadioGroup2 as RadioGroup, RadioItem2 as RadioItem, Root3 as Root, Separator2 as Separator, Sub2 as Sub, SubContent2 as SubContent, SubTrigger2 as SubTrigger, Trigger, createMenubarScope };","map":{"version":3,"names":["React","createCollection","useDirection","composeEventHandlers","useComposedRefs","createContextScope","useId","MenuPrimitive","createMenuScope","RovingFocusGroup","createRovingFocusGroupScope","Primitive","useControllableState","jsx","MENUBAR_NAME","Collection","useCollection","createCollectionScope","createMenubarContext","createMenubarScope","useMenuScope","useRovingFocusGroupScope","MenubarContextProvider","useMenubarContext","Menubar","forwardRef","props","forwardedRef","__scopeMenubar","value","valueProp","onValueChange","defaultValue","loop","dir","menubarProps","direction","rovingFocusGroupScope","setValue","prop","onChange","defaultProp","currentTabStopId","setCurrentTabStopId","useState","scope","onMenuOpen","useCallback","value2","onMenuClose","onMenuToggle","prevValue","children","Provider","Slot","Root","asChild","orientation","onCurrentTabStopIdChange","div","role","ref","displayName","MENU_NAME","MenubarMenuProvider","useMenubarMenuContext","MenubarMenu","menuProps","autoValue","context","menuScope","triggerRef","useRef","wasKeyboardTriggerOpenRef","open","useEffect","current","triggerId","contentId","onOpenChange","open2","modal","TRIGGER_NAME","MenubarTrigger","disabled","triggerProps","menuContext","composedRefs","isFocused","setIsFocused","ItemSlot","Item","focusable","tabStopId","Anchor","button","type","id","onPointerDown","event","ctrlKey","preventDefault","onPointerEnter","menubarOpen","Boolean","focus","onKeyDown","includes","key","onFocus","onBlur","PORTAL_NAME","MenubarPortal","portalProps","Portal","CONTENT_NAME","MenubarContent","align","contentProps","getItems","hasInteractedOutsideRef","Content","onCloseAutoFocus","onFocusOutside","target","isMenubarTrigger","some","item","contains","onInteractOutside","onEntryFocus","targetIsSubTrigger","hasAttribute","isKeyDownInsideSubMenu","closest","currentTarget","prevMenuKey","isPrevKey","isNextKey","items","filter","candidateValues","map","reverse","currentIndex","indexOf","wrapArray","slice","nextValue","checkForDefaultPrevented","style","GROUP_NAME","MenubarGroup","groupProps","Group","LABEL_NAME","MenubarLabel","labelProps","Label","ITEM_NAME","MenubarItem","itemProps","CHECKBOX_ITEM_NAME","MenubarCheckboxItem","checkboxItemProps","CheckboxItem","RADIO_GROUP_NAME","MenubarRadioGroup","radioGroupProps","RadioGroup","RADIO_ITEM_NAME","MenubarRadioItem","radioItemProps","RadioItem","INDICATOR_NAME","MenubarItemIndicator","itemIndicatorProps","ItemIndicator","SEPARATOR_NAME","MenubarSeparator","separatorProps","Separator","ARROW_NAME","MenubarArrow","arrowProps","Arrow","SUB_NAME","MenubarSub","openProp","defaultOpen","setOpen","Sub","SUB_TRIGGER_NAME","MenubarSubTrigger","subTriggerProps","SubTrigger","SUB_CONTENT_NAME","MenubarSubContent","subContentProps","SubContent","array","startIndex","_","index","length","Root3","Menu","Trigger","Portal2","Content2","Group2","Label2","Item3","CheckboxItem2","RadioGroup2","RadioItem2","ItemIndicator2","Separator2","Arrow2","Sub2","SubTrigger2","SubContent2"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/react-menubar/src/menubar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Menubar\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENUBAR_NAME = 'Menubar';\n\ntype ItemData = { value: string; disabled: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenubarTriggerElement,\n  ItemData\n>(MENUBAR_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenubar?: Scope };\nconst [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope,\n]);\n\nconst useMenuScope = createMenuScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenubarContextValue = {\n  value: string;\n  dir: Direction;\n  loop: boolean;\n  onMenuOpen(value: string): void;\n  onMenuClose(): void;\n  onMenuToggle(value: string): void;\n};\n\nconst [MenubarContextProvider, useMenubarContext] =\n  createMenubarContext<MenubarContextValue>(MENUBAR_NAME);\n\ntype MenubarElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenubarProps extends PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Menubar = React.forwardRef<MenubarElement, MenubarProps>(\n  (props: ScopedProps<MenubarProps>, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    // We need to manage tab stop id manually as `RovingFocusGroup` updates the stop\n    // based on focus, and in some situations our triggers won't ever be given focus\n    // (e.g. click to open and then outside to close)\n    const [currentTabStopId, setCurrentTabStopId] = React.useState<string | null>(null);\n\n    return (\n      <MenubarContextProvider\n        scope={__scopeMenubar}\n        value={value}\n        onMenuOpen={React.useCallback(\n          (value) => {\n            setValue(value);\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        onMenuClose={React.useCallback(() => setValue(''), [setValue])}\n        onMenuToggle={React.useCallback(\n          (value) => {\n            setValue((prevValue) => (prevValue ? '' : value));\n            // `openMenuOpen` and `onMenuToggle` are called exclusively so we\n            // need to update the id in either case.\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        dir={direction}\n        loop={loop}\n      >\n        <Collection.Provider scope={__scopeMenubar}>\n          <Collection.Slot scope={__scopeMenubar}>\n            <RovingFocusGroup.Root\n              asChild\n              {...rovingFocusGroupScope}\n              orientation=\"horizontal\"\n              loop={loop}\n              dir={direction}\n              currentTabStopId={currentTabStopId}\n              onCurrentTabStopIdChange={setCurrentTabStopId}\n            >\n              <Primitive.div role=\"menubar\" {...menubarProps} ref={forwardedRef} />\n            </RovingFocusGroup.Root>\n          </Collection.Slot>\n        </Collection.Provider>\n      </MenubarContextProvider>\n    );\n  }\n);\n\nMenubar.displayName = MENUBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'MenubarMenu';\n\ntype MenubarMenuContextValue = {\n  value: string;\n  triggerId: string;\n  triggerRef: React.RefObject<MenubarTriggerElement | null>;\n  contentId: string;\n  wasKeyboardTriggerOpenRef: React.MutableRefObject<boolean>;\n};\n\nconst [MenubarMenuProvider, useMenubarMenuContext] =\n  createMenubarContext<MenubarMenuContextValue>(MENU_NAME);\n\ninterface MenubarMenuProps {\n  value?: string;\n  children?: React.ReactNode;\n}\n\nconst MenubarMenu = (props: ScopedProps<MenubarMenuProps>) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  // We need to provide an initial deterministic value as `useId` will return\n  // empty string on the first render and we don't want to match our internal \"closed\" value.\n  const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef<MenubarTriggerElement>(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n\n  return (\n    <MenubarMenuProvider\n      scope={__scopeMenubar}\n      value={value}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      wasKeyboardTriggerOpenRef={wasKeyboardTriggerOpenRef}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={(open) => {\n          // Menu only calls `onOpenChange` when dismissing so we\n          // want to close our MenuBar based on the same events.\n          if (!open) context.onMenuClose();\n        }}\n        modal={false}\n        dir={context.dir}\n        {...menuProps}\n      />\n    </MenubarMenuProvider>\n  );\n};\n\nMenubarMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'MenubarTrigger';\n\ntype MenubarTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface MenubarTriggerProps extends PrimitiveButtonProps {}\n\nconst MenubarTrigger = React.forwardRef<MenubarTriggerElement, MenubarTriggerProps>(\n  (props: ScopedProps<MenubarTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef<MenubarTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n\n    return (\n      <Collection.ItemSlot scope={__scopeMenubar} value={menuContext.value} disabled={disabled}>\n        <RovingFocusGroup.Item\n          asChild\n          {...rovingFocusGroupScope}\n          focusable={!disabled}\n          tabStopId={menuContext.value}\n        >\n          <MenuPrimitive.Anchor asChild {...menuScope}>\n            <Primitive.button\n              type=\"button\"\n              role=\"menuitem\"\n              id={menuContext.triggerId}\n              aria-haspopup=\"menu\"\n              aria-expanded={open}\n              aria-controls={open ? menuContext.contentId : undefined}\n              data-highlighted={isFocused ? '' : undefined}\n              data-state={open ? 'open' : 'closed'}\n              data-disabled={disabled ? '' : undefined}\n              disabled={disabled}\n              {...triggerProps}\n              ref={composedRefs}\n              onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n                // but not when the control key is pressed (avoiding MacOS right click)\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                  context.onMenuOpen(menuContext.value);\n                  // prevent trigger focusing when opening\n                  // this allows the content to be given focus without competition\n                  if (!open) event.preventDefault();\n                }\n              })}\n              onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n                const menubarOpen = Boolean(context.value);\n                if (menubarOpen && !open) {\n                  context.onMenuOpen(menuContext.value);\n                  ref.current?.focus();\n                }\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                if (disabled) return;\n                if (['Enter', ' '].includes(event.key)) context.onMenuToggle(menuContext.value);\n                if (event.key === 'ArrowDown') context.onMenuOpen(menuContext.value);\n                // prevent keydown from scrolling window / first focused item to execute\n                // that keydown (inadvertently closing the menu)\n                if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {\n                  menuContext.wasKeyboardTriggerOpenRef.current = true;\n                  event.preventDefault();\n                }\n              })}\n              onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n              onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n            />\n          </MenuPrimitive.Anchor>\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nMenubarTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenubarPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface MenubarPortalProps extends MenuPortalProps {}\n\nconst MenubarPortal: React.FC<MenubarPortalProps> = (props: ScopedProps<MenubarPortalProps>) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nMenubarPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenubarContent';\n\ntype MenubarContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface MenubarContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst MenubarContent = React.forwardRef<MenubarContentElement, MenubarContentProps>(\n  (props: ScopedProps<MenubarContentProps>, forwardedRef) => {\n    const { __scopeMenubar, align = 'start', ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={menuContext.contentId}\n        aria-labelledby={menuContext.triggerId}\n        data-radix-menubar-content=\"\"\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        align={align}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        })}\n        onEntryFocus={(event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        }}\n        onKeyDown={composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n              const target = event.target as HTMLElement;\n              const targetIsSubTrigger = target.hasAttribute('data-radix-menubar-subtrigger');\n              const isKeyDownInsideSubMenu =\n                target.closest('[data-radix-menubar-content]') !== event.currentTarget;\n\n              const prevMenuKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n\n              // Prevent navigation when we're opening a submenu\n              if (isNextKey && targetIsSubTrigger) return;\n              // or we're inside a submenu and are moving backwards to close it\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n\n              candidateValues = context.loop\n                ? wrapArray(candidateValues, currentIndex + 1)\n                : candidateValues.slice(currentIndex + 1);\n\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        )}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenubarGroup';\n\ntype MenubarGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface MenubarGroupProps extends MenuGroupProps {}\n\nconst MenubarGroup = React.forwardRef<MenubarGroupElement, MenubarGroupProps>(\n  (props: ScopedProps<MenubarGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenubarLabel';\n\ntype MenubarLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface MenubarLabelProps extends MenuLabelProps {}\n\nconst MenubarLabel = React.forwardRef<MenubarLabelElement, MenubarLabelProps>(\n  (props: ScopedProps<MenubarLabelProps>, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenubarItem';\n\ntype MenubarItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface MenubarItemProps extends MenuItemProps {}\n\nconst MenubarItem = React.forwardRef<MenubarItemElement, MenubarItemProps>(\n  (props: ScopedProps<MenubarItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenubarCheckboxItem';\n\ntype MenubarCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface MenubarCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst MenubarCheckboxItem = React.forwardRef<MenubarCheckboxItemElement, MenubarCheckboxItemProps>(\n  (props: ScopedProps<MenubarCheckboxItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenubarRadioGroup';\n\ntype MenubarRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface MenubarRadioGroupProps extends MenuRadioGroupProps {}\n\nconst MenubarRadioGroup = React.forwardRef<MenubarRadioGroupElement, MenubarRadioGroupProps>(\n  (props: ScopedProps<MenubarRadioGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenubarRadioItem';\n\ntype MenubarRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface MenubarRadioItemProps extends MenuRadioItemProps {}\n\nconst MenubarRadioItem = React.forwardRef<MenubarRadioItemElement, MenubarRadioItemProps>(\n  (props: ScopedProps<MenubarRadioItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'MenubarItemIndicator';\n\ntype MenubarItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface MenubarItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst MenubarItemIndicator = React.forwardRef<\n  MenubarItemIndicatorElement,\n  MenubarItemIndicatorProps\n>((props: ScopedProps<MenubarItemIndicatorProps>, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nMenubarItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenubarSeparator';\n\ntype MenubarSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface MenubarSeparatorProps extends MenuSeparatorProps {}\n\nconst MenubarSeparator = React.forwardRef<MenubarSeparatorElement, MenubarSeparatorProps>(\n  (props: ScopedProps<MenubarSeparatorProps>, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenubarArrow';\n\ntype MenubarArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface MenubarArrowProps extends MenuArrowProps {}\n\nconst MenubarArrow = React.forwardRef<MenubarArrowElement, MenubarArrowProps>(\n  (props: ScopedProps<MenubarArrowProps>, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenubarSub';\n\ninterface MenubarSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenubarSub: React.FC<MenubarSubProps> = (props: ScopedProps<MenubarSubProps>) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\nMenubarSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenubarSubTrigger';\n\ntype MenubarSubTriggerElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface MenubarSubTriggerProps extends MenuSubTriggerProps {}\n\nconst MenubarSubTrigger = React.forwardRef<MenubarSubTriggerElement, MenubarSubTriggerProps>(\n  (props: ScopedProps<MenubarSubTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return (\n      <MenuPrimitive.SubTrigger\n        data-radix-menubar-subtrigger=\"\"\n        {...menuScope}\n        {...subTriggerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenubarSubContent';\n\ntype MenubarSubContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface MenubarSubContentProps extends MenuSubContentProps {}\n\nconst MenubarSubContent = React.forwardRef<MenubarSubContentElement, MenubarSubContentProps>(\n  (props: ScopedProps<MenubarSubContentProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n\n    return (\n      <MenuPrimitive.SubContent\n        {...menuScope}\n        data-radix-menubar-content=\"\"\n        {...subContentProps}\n        ref={forwardedRef}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Menubar;\nconst Menu = MenubarMenu;\nconst Trigger = MenubarTrigger;\nconst Portal = MenubarPortal;\nconst Content = MenubarContent;\nconst Group = MenubarGroup;\nconst Label = MenubarLabel;\nconst Item = MenubarItem;\nconst CheckboxItem = MenubarCheckboxItem;\nconst RadioGroup = MenubarRadioGroup;\nconst RadioItem = MenubarRadioItem;\nconst ItemIndicator = MenubarItemIndicator;\nconst Separator = MenubarSeparator;\nconst Arrow = MenubarArrow;\nconst Sub = MenubarSub;\nconst SubTrigger = MenubarSubTrigger;\nconst SubContent = MenubarSubContent;\n\nexport {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}