{"ast":null,"code":"import * as r from \"react\";\nimport f from \"classnames\";\nimport { Slot as c } from \"radix-ui\";\nimport { codePropDefs as i } from \"./code.props.js\";\nimport { extractProps as P } from \"../helpers/extract-props.js\";\nimport { marginPropDefs as C } from \"../props/margin.props.js\";\nconst p = r.forwardRef((o, t) => {\n  const {\n      asChild: s,\n      className: m,\n      color: e,\n      ...d\n    } = P(o, i, C),\n    n = o.variant === \"ghost\" ? e || void 0 : e,\n    a = s ? c.Root : \"code\";\n  return r.createElement(a, {\n    \"data-accent-color\": n,\n    ...d,\n    ref: t,\n    className: f(\"rt-reset\", \"rt-Code\", m)\n  });\n});\np.displayName = \"Code\";\nexport { p as Code };","map":{"version":3,"names":["r","f","Slot","c","codePropDefs","i","extractProps","P","marginPropDefs","C","p","forwardRef","o","t","asChild","s","className","m","color","e","d","n","variant","a","Root","createElement","ref","displayName","Code"],"sources":["/Users/catiecook/Documents/workos/frontend-take-home/client/node_modules/@radix-ui/themes/src/components/code.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { Slot } from 'radix-ui';\n\nimport { codePropDefs } from './code.props.js';\nimport { extractProps } from '../helpers/extract-props.js';\nimport { marginPropDefs } from '../props/margin.props.js';\n\nimport type { MarginProps } from '../props/margin.props.js';\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';\nimport type { GetPropDefTypes } from '../props/prop-def.js';\n\ntype CodeElement = React.ElementRef<'code'>;\ntype CodeOwnProps = GetPropDefTypes<typeof codePropDefs>;\ninterface CodeProps\n  extends ComponentPropsWithout<'code', RemovedProps>,\n    MarginProps,\n    CodeOwnProps {}\nconst Code = React.forwardRef<CodeElement, CodeProps>((props, forwardedRef) => {\n  const { asChild, className, color, ...codeProps } = extractProps(\n    props,\n    codePropDefs,\n    marginPropDefs\n  );\n  // Code ghost color prop should work as text color by default\n  const resolvedColor = props.variant === 'ghost' ? color || undefined : color;\n  const Comp = asChild ? Slot.Root : 'code';\n  return (\n    <Comp\n      data-accent-color={resolvedColor}\n      {...codeProps}\n      ref={forwardedRef}\n      className={classNames('rt-reset', 'rt-Code', className)}\n    />\n  );\n});\nCode.displayName = 'Code';\n\nexport { Code };\nexport type { CodeProps };\n"],"mappings":"AAAA,YAAYA,CAAA,MAAW;AACvB,OAAOC,CAAA,MAAgB;AACvB,SAASC,IAAA,IAAAC,CAAA,QAAY;AAErB,SAASC,YAAA,IAAAC,CAAA,QAAoB;AAC7B,SAASC,YAAA,IAAAC,CAAA,QAAoB;AAC7B,SAASC,cAAA,IAAAC,CAAA,QAAsB;AAY/B,MAAMC,CAAA,GAAOV,CAAA,CAAMW,UAAA,CAAmC,CAACC,CAAA,EAAOC,CAAA,KAAiB;EAC7E,MAAM;MAAEC,OAAA,EAAAC,CAAA;MAASC,SAAA,EAAAC,CAAA;MAAWC,KAAA,EAAAC,CAAA;MAAO,GAAGC;IAAU,IAAIb,CAAA,CAClDK,CAAA,EACAP,CAAA,EACAI,CACF;IAEMY,CAAA,GAAgBT,CAAA,CAAMU,OAAA,KAAY,UAAUH,CAAA,IAAS,SAAYA,CAAA;IACjEI,CAAA,GAAOR,CAAA,GAAUZ,CAAA,CAAKqB,IAAA,GAAO;EACnC,OACExB,CAAA,CAAAyB,aAAA,CAACF,CAAA;IACC,qBAAmBF,CAAA;IAClB,GAAGD,CAAA;IACJM,GAAA,EAAKb,CAAA;IACLG,SAAA,EAAWf,CAAA,CAAW,YAAY,WAAWgB,CAAS;EAAA,CACxD,CAEJ;AAAA,CAAC;AACDP,CAAA,CAAKiB,WAAA,GAAc;AAAA,SAAAjB,CAAA,IAAAkB,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}